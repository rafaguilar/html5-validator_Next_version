module.exports = {

"[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Unite two or more sets
 *
 * @param {Iterable<string>[]} args
 * @see {@link https://github.com/microsoft/TypeScript/issues/57228|GitHub}
 */ __turbopack_context__.s({
    "default": (()=>uniteSets)
});
function uniteSets(...args) {
    return new Set([
        ...args
    ].reduce((result, set)=>[
            ...result,
            ...set
        ], []));
}
}}),
"[project]/node_modules/stylelint/lib/reference/atKeywords.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atKeywords": (()=>atKeywords),
    "deprecatedAtKeywords": (()=>deprecatedAtKeywords),
    "nestingSupportedAtKeywords": (()=>nestingSupportedAtKeywords),
    "pageMarginAtKeywords": (()=>pageMarginAtKeywords)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)");
;
const deprecatedAtKeywords = new Set([
    'apply',
    'document',
    'nest',
    'viewport'
]);
const nestingSupportedAtKeywords = new Set([
    'container',
    'layer',
    'media',
    'scope',
    'starting-style',
    'supports'
]);
const pageMarginAtKeywords = new Set([
    'top-left-corner',
    'top-left',
    'top-center',
    'top-right',
    'top-right-corner',
    'bottom-left-corner',
    'bottom-left',
    'bottom-center',
    'bottom-right',
    'bottom-right-corner',
    'left-top',
    'left-middle',
    'left-bottom',
    'right-top',
    'right-middle',
    'right-bottom'
]);
/**
 * @see https://www.w3.org/TR/css-fonts-4/#font-feature-values-font-feature-value-type
 * @type {ReadonlySet<string>}
 */ const fontFeatureValueTypes = new Set([
    'annotation',
    'character-variant',
    'historical-forms',
    'ornaments',
    'styleset',
    'stylistic',
    'swash'
]);
const atKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(deprecatedAtKeywords, nestingSupportedAtKeywords, pageMarginAtKeywords, fontFeatureValueTypes, [
    'counter-style',
    'custom-media',
    'custom-selector',
    'font-face',
    'font-feature-values',
    'font-palette-values',
    'import',
    'keyframes',
    'namespace',
    'page',
    'position-try',
    'property',
    'scroll-timeline',
    'view-transition'
]);
}}),
"[project]/node_modules/stylelint/lib/utils/regexes.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atRuleRegexes": (()=>atRuleRegexes),
    "descriptorRegexes": (()=>descriptorRegexes),
    "functionRegexes": (()=>functionRegexes),
    "propertyRegexes": (()=>propertyRegexes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$atKeywords$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reference/atKeywords.mjs [app-route] (ecmascript)");
;
const atRuleRegexes = {
    mediaName: /^media$/i,
    keyframesName: /^(-(o|moz|ms|webkit)-)?keyframes$/i,
    propertyName: /^property$/i,
    importName: /^import$/i,
    unsupportedNestingNames: new RegExp(`^((?!${[
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$atKeywords$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["nestingSupportedAtKeywords"].values()
    ].join('|')}).)*$`, 'i'),
    layerName: /^layer$/i,
    containerName: /^container$/i
};
const descriptorRegexes = {
    syntaxName: /^syntax$/i
};
const functionRegexes = {
    layer: /layer\((.*?)\)/i
};
const propertyRegexes = {
    containerNameAndShorthandName: /^container(-name)?$/i
};
}}),
"[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Contains helpers for working with vendor prefixes.
 *
 * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2
 *
 * @namespace vendor
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    /**
	 * Returns the vendor prefix extracted from an input string.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} vendor prefix or empty string
	 *
	 * @example
	 * vendor.prefix('-moz-tab-size') //=> '-moz-'
	 * vendor.prefix('tab-size')      //=> ''
	 */ prefix (prop) {
        const match = prop.match(/^(-\w+-)/);
        if (match) {
            return match[0] || '';
        }
        return '';
    },
    /**
	 * Returns the input string stripped of its vendor prefix.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} String name without vendor prefixes.
	 *
	 * @example
	 * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
	 */ unprefixed (prop) {
        return prop.replace(/^-\w+-/, '');
    }
};
}}),
"[project]/node_modules/stylelint/lib/utils/isAutoprefixable.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)");
;
/**
 * Extract each list using the internal API of Autoprefixer 10.2.5.
 *
 * @see https://github.com/postcss/autoprefixer/tree/10.2.5
 *
 * @example
 * const autoprefixer = require('autoprefixer');
 * const Browsers = require('autoprefixer/lib/browsers');
 * const Prefixes = require('autoprefixer/lib/prefixes');
 * const utils = require('autoprefixer/lib/utils');
 *
 * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));
 */ /**
 * @example
 * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));
 */ const AT_RULES = new Set([
    '@-moz-keyframes',
    '@-moz-document',
    '@-ms-keyframes',
    '@-ms-viewport',
    '@-o-keyframes',
    '@-o-viewport',
    '@-webkit-keyframes',
    '@-webkit-viewport'
]);
/**
 * @example
 * prefixes.remove.selectors.map((s) => s.prefixed);
 */ const SELECTORS = new Set([
    ':-moz-any-link',
    ':-moz-full-screen',
    ':-moz-placeholder',
    ':-moz-placeholder-shown',
    ':-moz-read-only',
    ':-moz-read-write',
    ':-ms-fullscreen',
    ':-ms-input-placeholder',
    ':-webkit-any-link',
    ':-webkit-full-screen',
    '::-moz-placeholder',
    '::-moz-selection',
    '::-ms-input-placeholder',
    '::-webkit-backdrop',
    '::-webkit-input-placeholder'
]);
/**
 * @example
 * Object.entries(autoprefixer.data.prefixes)
 *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))
 *   .map(([key, value]) => key);
 */ const PROPERTIES = new Set([
    'align-content',
    'align-items',
    'align-self',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'appearance',
    'backdrop-filter',
    'backface-visibility',
    'background-clip',
    'background-origin',
    'background-size',
    'border-block-end',
    'border-block-start',
    'border-bottom-left-radius',
    'border-bottom-right-radius',
    'border-image',
    'border-inline-end',
    'border-inline-start',
    'border-radius',
    'border-top-left-radius',
    'border-top-right-radius',
    'box-decoration-break',
    'box-shadow',
    'box-sizing',
    'break-after',
    'break-before',
    'break-inside',
    'clip-path',
    'color-adjust',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'columns',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'flow-from',
    'flow-into',
    'font-feature-settings',
    'font-kerning',
    'font-language-override',
    'font-variant-ligatures',
    'grid-area',
    'grid-column',
    'grid-column-align',
    'grid-column-end',
    'grid-column-start',
    'grid-row',
    'grid-row-align',
    'grid-row-end',
    'grid-row-start',
    'grid-template',
    'grid-template-areas',
    'grid-template-columns',
    'grid-template-rows',
    'hyphens',
    'image-rendering',
    'justify-content',
    'margin-block-end',
    'margin-block-start',
    'margin-inline-end',
    'margin-inline-start',
    'mask',
    'mask-border',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-border-slice',
    'mask-border-source',
    'mask-border-width',
    'mask-clip',
    'mask-composite',
    'mask-image',
    'mask-origin',
    'mask-position',
    'mask-repeat',
    'mask-size',
    'object-fit',
    'object-position',
    'order',
    'overscroll-behavior',
    'padding-block-end',
    'padding-block-start',
    'padding-inline-end',
    'padding-inline-start',
    'perspective',
    'perspective-origin',
    'place-self',
    'region-fragment',
    'scroll-snap-coordinate',
    'scroll-snap-destination',
    'scroll-snap-points-x',
    'scroll-snap-points-y',
    'scroll-snap-type',
    'shape-image-threshold',
    'shape-margin',
    'shape-outside',
    'tab-size',
    'text-align-last',
    'text-decoration',
    'text-decoration-color',
    'text-decoration-line',
    'text-decoration-skip',
    'text-decoration-skip-ink',
    'text-decoration-style',
    'text-emphasis',
    'text-emphasis-color',
    'text-emphasis-position',
    'text-emphasis-style',
    'text-orientation',
    'text-overflow',
    'text-size-adjust',
    'text-spacing',
    'touch-action',
    'transform',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'user-select',
    'writing-mode'
]);
/**
 * This list is currently being used to compile all the prefixed values that can safely be unprefixed.
 * i.e. value-no-vendor-prefix autofix ought to be able to handle it appropriately
 * It was initially populated using the following example:
 * @example
 * Object.values(prefixes.remove)
 *   .filter((p) => Array.isArray(p.values))
 *   .flatMap((p) => p.values)
 *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'
 *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only
 *
 * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013
 */ const PROPERTY_VALUES = new Set([
    '-moz-all',
    '-moz-calc',
    '-moz-crisp-edges',
    '-moz-element',
    '-moz-fit-content',
    '-moz-grab',
    '-moz-grabbing',
    '-moz-initial',
    '-moz-isolate',
    '-moz-isolate-override',
    '-moz-linear-gradient',
    '-moz-max-content',
    '-moz-min-content',
    '-moz-pre-wrap',
    '-moz-plaintext',
    '-moz-radial-gradient',
    '-moz-repeating-linear-gradient',
    '-moz-repeating-radial-gradient',
    '-moz-zoom-in',
    '-moz-zoom-out',
    '-ms-flexbox',
    '-ms-grid',
    '-ms-inline-grid',
    '-ms-linear-gradient',
    '-ms-radial-gradient',
    '-ms-repeating-linear-gradient',
    '-ms-repeating-radial-gradient',
    '-o-crisp-edges',
    '-o-linear-gradient',
    '-o-pre-wrap',
    '-o-radial-gradient',
    '-o-repeating-linear-gradient',
    '-o-repeating-radial-gradient',
    '-webkit-calc',
    '-webkit-cross-fade',
    '-webkit-filter',
    '-webkit-fit-content',
    '-webkit-flex',
    '-webkit-grab',
    '-webkit-grabbing',
    '-webkit-image-set',
    '-webkit-inline-flex',
    '-webkit-isolate',
    '-webkit-linear-gradient',
    '-webkit-max-content',
    '-webkit-min-content',
    '-webkit-plaintext',
    '-webkit-radial-gradient',
    '-webkit-repeating-linear-gradient',
    '-webkit-repeating-radial-gradient',
    '-webkit-sticky',
    '-webkit-zoom-in',
    '-webkit-zoom-out',
    '-xv-digits',
    '-xv-literal-punctuation',
    '-xv-no-punctuation',
    // Firefox does not support
    // ethiopic-halehame, ethiopic-halehame-am, ethiopic-halehame-ti-er and ethiopic-halehame-ti-et
    // without a -moz- prefix
    // see https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type
    '-moz-arabic-indic',
    '-moz-bengali',
    '-moz-cjk-earthly-branch',
    '-moz-cjk-heavenly-stem',
    '-moz-devanagari',
    '-moz-ethiopic-numeric',
    '-moz-gujarati',
    '-moz-gurmukhi',
    '-moz-hangul',
    '-moz-hangul-consonant',
    '-moz-japanese-formal',
    '-moz-japanese-informal',
    '-moz-kannada',
    '-moz-khmer',
    '-moz-lao',
    '-moz-malayalam',
    '-moz-myanmar',
    '-moz-oriya',
    '-moz-persian',
    '-moz-simp-chinese-formal',
    '-moz-simp-chinese-informal',
    '-moz-tamil',
    '-moz-telugu',
    '-moz-thai',
    '-moz-trad-chinese-formal',
    '-moz-trad-chinese-informal'
]);
const __TURBOPACK__default__export__ = {
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ atRuleName (identifier) {
        return AT_RULES.has(`@${identifier.toLowerCase()}`);
    },
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ selector (identifier) {
        return SELECTORS.has(identifier.toLowerCase());
    },
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ mediaFeatureName (identifier) {
        return identifier.toLowerCase().includes('device-pixel-ratio');
    },
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ property (identifier) {
        const ident = identifier.toLowerCase();
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].prefix(ident).length === 0) {
            return false;
        }
        return PROPERTIES.has(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefixed(ident));
    },
    /**
	 * @param {string} value
	 * @returns {boolean}
	 */ propertyValue (value) {
        return PROPERTY_VALUES.has(value.toLowerCase());
    },
    /**
	 * @param {string} value
	 * @returns {string}
	 */ unprefix (value) {
        return value.replace(/-\w+-/, '');
    }
};
}}),
"[project]/node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$regexes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/regexes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAutoprefixable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isAutoprefixable.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
;
;
;
;
;
const ruleName = 'media-feature-name-no-vendor-prefix';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    rejected: 'Unexpected vendor-prefix'
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/media-feature-name-no-vendor-prefix',
    fixable: true
};
const FEATURES = [
    '-webkit-device-pixel-ratio',
    '-webkit-min-device-pixel-ratio',
    '-webkit-max-device-pixel-ratio',
    '-o-device-pixel-ratio',
    '-o-min-device-pixel-ratio',
    '-o-max-device-pixel-ratio',
    '-moz-device-pixel-ratio',
    'min--moz-device-pixel-ratio',
    'max--moz-device-pixel-ratio'
];
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary
        });
        if (!validOptions) {
            return;
        }
        root.walkAtRules(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$regexes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["atRuleRegexes"].mediaName, (atRule)=>{
            const params = atRule.params;
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAutoprefixable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].mediaFeatureName(params)) {
                return;
            }
            const matches = atRule.toString().match(new RegExp(`${FEATURES.join('|')}`, 'gi'));
            if (!matches) {
                return;
            }
            for (const match of matches){
                const fix = ()=>{
                    atRule.params = atRule.params.replace(/-moz-|-o-|-webkit-/i, '');
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                    message: messages.rejected,
                    node: atRule,
                    word: match,
                    result,
                    ruleName,
                    fix: {
                        apply: fix,
                        node: atRule
                    }
                });
            }
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_77c77d1b._.js.map