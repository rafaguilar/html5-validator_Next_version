module.exports = {

"[project]/node_modules/stylelint/lib/utils/beforeBlockString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>beforeBlockString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
function beforeBlockString(statement, { noRawBefore } = {
    noRawBefore: false
}) {
    let result = '';
    const before = statement.raws.before || '';
    if (!noRawBefore) {
        result += before;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(statement)) {
        result += statement.selector;
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(statement)) {
        result += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;
    } else {
        return '';
    }
    result += statement.raws.between || '';
    return result;
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasBlock.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check if a statement has an block (empty or otherwise).
 *
 * @param {import('postcss').Container} statement
 * @returns {boolean} True if `statement` has a block (empty or otherwise)
 */ __turbopack_context__.s({
    "default": (()=>hasBlock)
});
function hasBlock(statement) {
    return statement.nodes !== undefined;
}
}}),
"[project]/node_modules/stylelint/lib/utils/rawNodeString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Stringify PostCSS node including its raw "before" string.
 *
 * @param {import('postcss').Node} node
 *
 * @returns {string}
 */ __turbopack_context__.s({
    "default": (()=>rawNodeString)
});
function rawNodeString(node) {
    let result = '';
    if (node.raws.before) {
        result += node.raws.before;
    }
    result += node.toString();
    return result;
}
}}),
"[project]/node_modules/stylelint/lib/utils/blockString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>blockString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$beforeBlockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/beforeBlockString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasBlock.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$rawNodeString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/rawNodeString.mjs [app-route] (ecmascript)");
;
;
;
function blockString(statement) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement)) {
        return '';
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$rawNodeString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement).slice((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$beforeBlockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement).length);
}
}}),
"[project]/node_modules/stylelint/lib/utils/addEmptyLineBefore.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Add one or two empty line(s) before a node. Mutates the node.
 *
 * @template {import('postcss').Node} T
 * @param {T} node
 * @param {string} newline
 * @returns {T}
 */ __turbopack_context__.s({
    "default": (()=>addEmptyLineBefore)
});
function addEmptyLineBefore(node, newline) {
    const { raws } = node;
    if (typeof raws.before !== 'string') {
        return node;
    }
    raws.before = !/\r?\n/.test(raws.before) ? newline.repeat(2) + raws.before : raws.before.replace(/(\r?\n)/, `${newline}$1`);
    return node;
}
}}),
"[project]/node_modules/stylelint/lib/utils/removeEmptyLinesBefore.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Remove empty lines before a node. Mutates the node.
 *
 * @template {import('postcss').Node} T
 * @param {T} node
 * @param {string} newline
 * @returns {T}
 */ __turbopack_context__.s({
    "default": (()=>removeEmptyLinesBefore)
});
function removeEmptyLinesBefore(node, newline) {
    node.raws.before = node.raws.before ? node.raws.before.replace(/(\r?\n\s*\n)+/g, newline) : '';
    return node;
}
}}),
"[project]/node_modules/stylelint/lib/utils/fixEmptyLinesBefore.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>fixEmptyLinesBefore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$addEmptyLineBefore$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/addEmptyLineBefore.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$removeEmptyLinesBefore$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/removeEmptyLinesBefore.mjs [app-route] (ecmascript)");
;
;
;
function fixEmptyLinesBefore({ node, newline, action }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assert"])(newline);
    switch(action){
        case 'add':
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$addEmptyLineBefore$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node, newline);
            break;
        case 'remove':
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$removeEmptyLinesBefore$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node, newline);
            break;
        default:
            throw new TypeError(`Unknown action ${action}`);
    }
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasEmptyLine.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasEmptyLine)
});
const HAS_EMPTY_LINE = /\n[\r\t ]*\n/;
function hasEmptyLine(string) {
    if (string === '' || string === undefined) return false;
    return HAS_EMPTY_LINE.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @typedef {import('postcss').Node} Node */ /**
 * @param {Node | void} node
 */ __turbopack_context__.s({
    "default": (()=>getNextNonSharedLineCommentNode)
});
function getNodeLine(node) {
    return node && node.source && node.source.start && node.source.start.line;
}
function getNextNonSharedLineCommentNode(node) {
    if (node === undefined) {
        return undefined;
    }
    /** @type {Node | void} */ const nextNode = node.next();
    if (!nextNode || nextNode.type !== 'comment') {
        return nextNode;
    }
    if (getNodeLine(node) === getNodeLine(nextNode) || getNodeLine(nextNode) === getNodeLine(nextNode.next())) {
        return getNextNonSharedLineCommentNode(nextNode);
    }
    return nextNode;
}
}}),
"[project]/node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @typedef {import('postcss').Node} Node */ /**
 * @param {Node} node
 */ __turbopack_context__.s({
    "default": (()=>getPreviousNonSharedLineCommentNode)
});
function getNodeLine(node) {
    return node.source && node.source.start && node.source.start.line;
}
function getPreviousNonSharedLineCommentNode(node) {
    if (node === undefined) {
        return undefined;
    }
    const previousNode = node.prev();
    if (!previousNode || previousNode.type !== 'comment') {
        return previousNode;
    }
    if (getNodeLine(node) === getNodeLine(previousNode)) {
        return getPreviousNonSharedLineCommentNode(previousNode);
    }
    const previousNode2 = previousNode.prev();
    if (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {
        return getPreviousNonSharedLineCommentNode(previousNode);
    }
    return previousNode;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isSharedLineComment.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isSharedLineComment)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getNextNonSharedLineCommentNode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getPreviousNonSharedLineCommentNode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.mjs [app-route] (ecmascript)");
;
;
;
/** @typedef {import('postcss').Node} PostcssNode */ /**
 * @param {PostcssNode | void} a
 * @param {PostcssNode | void} b
 */ function nodesShareLines(a, b) {
    const endLine = a && a.source && a.source.end && a.source.end.line;
    const startLine = b && b.source && b.source.start && b.source.start.line;
    return endLine === startLine;
}
function isSharedLineComment(node) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(node)) {
        return false;
    }
    const previousNonSharedLineCommentNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getPreviousNonSharedLineCommentNode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node);
    if (nodesShareLines(previousNonSharedLineCommentNode, node)) {
        return true;
    }
    const nextNonSharedLineCommentNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getNextNonSharedLineCommentNode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node);
    if (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {
        return true;
    }
    const parentNode = node.parent;
    // It's a first child and located on the same line as block start
    if (parentNode !== undefined && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(parentNode) && parentNode.index(node) === 0 && node.raws.before !== undefined && !node.raws.before.includes('\n')) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isAfterComment.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isAfterComment)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isSharedLineComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isSharedLineComment.mjs [app-route] (ecmascript)");
;
function isAfterComment(node) {
    const previousNode = node.prev();
    if (!previousNode || previousNode.type !== 'comment') {
        return false;
    }
    return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isSharedLineComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(previousNode);
}
}}),
"[project]/node_modules/stylelint/lib/utils/isCustomProperty.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check whether a property is a custom one
 * @param {string} property
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isCustomProperty)
});
function isCustomProperty(property) {
    return property.startsWith('--');
}
}}),
"[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check whether a property is SCSS variable
 *
 * @param {string} property
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isScssVariable)
});
function isScssVariable(property) {
    // SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))
    if (property.startsWith('$')) {
        return true;
    }
    // SCSS var within a namespace (e.g. namespace.$var: x)
    if (property.includes('.$')) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isStandardSyntaxDeclaration)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)");
;
;
function isStandardSyntaxDeclaration(decl) {
    const prop = decl.prop;
    const parent = decl.parent;
    // SCSS var; covers map and list declarations
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prop)) {
        return false;
    }
    // Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})
    if (prop[0] === '@' && prop[1] !== '{') {
        return false;
    }
    // Less map declaration
    if (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {
        return false;
    }
    // Less map (e.g. #my-map() { myprop: red; })
    if (parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(parent) && parent.selector && parent.selector.startsWith('#') && parent.selector.endsWith('()')) {
        return false;
    }
    // Sass nested properties (e.g. border: { style: solid; color: red; })
    if (parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(parent) && parent.selector && parent.selector[parent.selector.length - 1] === ':' && parent.selector.substring(0, 2) !== '--') {
        return false;
    }
    // Less &:extend
    if ('extend' in decl && decl.extend) {
        return false;
    }
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isAfterStandardPropertyDeclaration)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getPreviousNonSharedLineCommentNode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isCustomProperty.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.mjs [app-route] (ecmascript)");
;
;
;
;
function isAfterStandardPropertyDeclaration(node) {
    const prevNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getPreviousNonSharedLineCommentNode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node);
    return prevNode !== undefined && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isDeclaration"])(prevNode) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prevNode) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prevNode.prop || '');
}
}}),
"[project]/node_modules/stylelint/lib/utils/isFirstNested.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isFirstNested)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
function isFirstNested(statement) {
    const parentNode = statement.parent;
    if (parentNode === undefined) {
        return false;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(parentNode) && !isInDocument(parentNode)) {
        return false;
    }
    if (statement === parentNode.first) {
        return true;
    }
    /*
	 * Search for the statement in the parent's nodes, ignoring comment
	 * nodes on the same line as the parent's opening brace.
	 */ const parentNodes = parentNode.nodes;
    if (!parentNodes) {
        return false;
    }
    const firstNode = parentNodes[0];
    if (!firstNode) {
        return false;
    }
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(firstNode) || typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\n')) {
        return false;
    }
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["hasSource"])(firstNode) || !firstNode.source.start) {
        return false;
    }
    const openingBraceLine = firstNode.source.start.line;
    if (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {
        return false;
    }
    for (const [index, node] of parentNodes.entries()){
        if (index === 0) {
            continue;
        }
        if (node === statement) {
            return true;
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["hasSource"])(node) && node.source.end && node.source.end.line !== openingBraceLine) {
            return false;
        }
    }
    /* istanbul ignore next: Should always return in the loop */ return false;
}
/**
 * @param {import('postcss').Node} node
 * @returns {boolean}
 */ function isInDocument({ parent }) {
    return Boolean(parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isDocument"])(parent));
}
}}),
"[project]/node_modules/stylelint/lib/utils/isFirstNodeOfRoot.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isFirstNodeOfRoot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
function isFirstNodeOfRoot(node) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(node)) return false;
    const parentNode = node.parent;
    if (!parentNode) {
        return false;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(parentNode) && node === parentNode.first;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isSingleLineString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check if a string is a single line (i.e. does not contain
 * any newline characters).
 *
 * @param {string} input
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isSingleLineString)
});
function isSingleLineString(input) {
    return !/[\n\r]/.test(input);
}
}}),
"[project]/node_modules/stylelint/lib/rules/declaration-empty-line-before/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/blockString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$fixEmptyLinesBefore$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/fixEmptyLinesBefore.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasEmptyLine$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasEmptyLine.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAfterComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isAfterComment.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAfterStandardPropertyDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isAfterStandardPropertyDeclaration.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isCustomProperty.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isFirstNested$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isFirstNested.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isFirstNodeOfRoot$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isFirstNodeOfRoot.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isSingleLineString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isSingleLineString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const ruleName = 'declaration-empty-line-before';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    expected: 'Expected empty line before declaration',
    rejected: 'Unexpected empty line before declaration'
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/declaration-empty-line-before',
    fixable: true
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary, secondaryOptions, context)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary,
            possible: [
                'always',
                'never'
            ]
        }, {
            actual: secondaryOptions,
            possible: {
                except: [
                    'first-nested',
                    'after-comment',
                    'after-declaration'
                ],
                ignore: [
                    'after-comment',
                    'after-declaration',
                    'first-nested',
                    'inside-single-line-block'
                ]
            },
            optional: true
        });
        if (!validOptions) {
            return;
        }
        root.walkDecls((decl)=>{
            const prop = decl.prop;
            const parent = decl.parent;
            if (parent == null) {
                return;
            }
            // Ignore the first node
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isFirstNodeOfRoot$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl)) {
                return;
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(parent) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(parent) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(parent)) {
                return;
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl)) {
                return;
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prop)) {
                return;
            }
            // Optionally ignore the node if a comment precedes it
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'after-comment') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAfterComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl)) {
                return;
            }
            // Optionally ignore the node if a declaration precedes it
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'after-declaration') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAfterStandardPropertyDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl)) {
                return;
            }
            // Optionally ignore the node if it is the first nested
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'first-nested') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isFirstNested$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl)) {
                return;
            }
            // Optionally ignore nodes inside single-line blocks
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'inside-single-line-block') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isSingleLineString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(parent))) {
                return;
            }
            let expectEmptyLineBefore = primary === 'always';
            // Optionally reverse the expectation if any exceptions apply
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'except', 'first-nested') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isFirstNested$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'except', 'after-comment') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAfterComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'except', 'after-declaration') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAfterStandardPropertyDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl)) {
                expectEmptyLineBefore = !expectEmptyLineBefore;
            }
            // Check for at least one empty line
            const hasEmptyLineBefore = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasEmptyLine$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl.raws.before);
            // Return if the expectation is met
            if (expectEmptyLineBefore === hasEmptyLineBefore) {
                return;
            }
            const message = expectEmptyLineBefore ? messages.expected : messages.rejected;
            const action = expectEmptyLineBefore ? 'add' : 'remove';
            // Fix
            const fix = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$fixEmptyLinesBefore$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                    node: decl,
                    newline: context.newline,
                    action
                });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                message,
                node: decl,
                result,
                ruleName,
                fix: {
                    apply: fix,
                    node: decl.parent
                }
            });
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_e8a2457e._.js.map