{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/src/app/api/lint-css/route.ts"],"sourcesContent":["\n'use server';\n\nimport type { NextRequest } from 'next/server';\n// stylelint import will be dynamic\nimport type { ValidationIssue } from '@/types';\n\nexport async function POST(request: NextRequest) {\n  const lintIssues: ValidationIssue[] = [];\n  try {\n    // Dynamically import stylelint\n    const stylelint = (await import('stylelint')).default;\n\n    const { code, codeFilename: rawCodeFilename } = await request.json();\n\n    if (!code || typeof code !== 'string') {\n      return new Response(JSON.stringify({ error: 'CSS code string is required.' }), { status: 400, headers: { 'Content-Type': 'application/json' } });\n    }\n    \n    const codeFilename = typeof rawCodeFilename === 'string' ? rawCodeFilename : (rawCodeFilename ? String(rawCodeFilename) : undefined);\n\n    // --- Temporarily bypass stylelint execution ---\n    // This section is to avoid runtime errors on Netlify like \"Cannot find module '../data/patch.json'\"\n    // and build errors related to static analysis of stylelint.\n    // The API will return as if no CSS issues were found.\n\n    // const minimalConfig = {\n    //   rules: {\n    //     'color-no-invalid-hex': true,\n    //     // Add other simple, non-plugin rules here if needed\n    //   },\n    // };\n\n    // let results;\n    // try {\n    //   results = await stylelint.lint({\n    //     code: code,\n    //     codeFilename: codeFilename || 'temp.css',\n    //     config: minimalConfig,\n    //   });\n    // } catch (lintError: any) {\n    //   console.error(`Stylelint.lint() execution error for ${codeFilename || 'unknown file'}:`, lintError);\n    //   let errMsg = 'A critical error occurred during CSS linting.';\n    //   let errLine: number | undefined;\n    //   let errCol: number | undefined;\n    //   let errRule = 'stylelint-execution-error';\n\n    //   if (lintError.name === 'CssSyntaxError' && lintError.reason) {\n    //     errMsg = `CSS Syntax Error: ${lintError.reason}`;\n    //     errLine = lintError.line;\n    //     errCol = lintError.column;\n    //     errRule = 'css-syntax-error';\n    //   } else if (lintError.message) {\n    //     errMsg = lintError.message;\n    //   }\n      \n    //   lintIssues.push({\n    //     id: `css-critical-lint-error-${Math.random().toString(36).substring(2, 9)}`,\n    //     type: 'error',\n    //     message: errMsg,\n    //     line: errLine,\n    //     column: errCol,\n    //     rule: errRule,\n    //     details: lintError.stack || String(lintError),\n    //   });\n    //   return new Response(JSON.stringify({ issues: lintIssues }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n    // }\n\n    // if (results.results && results.results.length > 0) {\n    //   const fileResult = results.results[0];\n      \n    //   if (fileResult.parseErrors && fileResult.parseErrors.length > 0) {\n    //     fileResult.parseErrors.forEach((parseError: any) => {\n    //       let errMsg = 'Unknown CSS parse error';\n    //       if (parseError.reason) errMsg = parseError.reason;\n    //       else if (parseError.text) errMsg = parseError.text;\n    //       else if (parseError.message) errMsg = parseError.message;\n          \n    //       lintIssues.push({\n    //         id: `css-parse-${Math.random().toString(36).substring(2, 9)}`,\n    //         type: 'error',\n    //         message: `CSS Parse Error: ${errMsg}`,\n    //         line: parseError.line,\n    //         column: parseError.column,\n    //         rule: 'css-syntax-error',\n    //       });\n    //     });\n    //   }\n\n    //   fileResult.warnings.forEach(warning => {\n    //     let message = warning.text;\n    //     if (warning.rule === 'CssSyntaxError' && message.endsWith(` (${warning.rule})`)) {\n    //       message = message.substring(0, message.length - ` (${warning.rule})`.length);\n    //     } else if (warning.rule && message.includes(`(${warning.rule})`)) {\n    //        message = message.replace(` (${warning.rule})`, '');\n    //     }\n\n    //     lintIssues.push({\n    //       id: `css-lint-${warning.line}-${warning.column}-${warning.rule || 'unknown'}`,\n    //       type: warning.severity === 'error' ? 'error' : 'warning',\n    //       message: message, \n    //       line: warning.line,\n    //       column: warning.column,\n    //       rule: warning.rule,\n    //     });\n    //   });\n    // } else if (results.errored && (!results.results || results.results.length === 0)) {\n    //   lintIssues.push({\n    //     id: `css-global-error-${Math.random().toString(36).substring(2, 9)}`,\n    //     type: 'error',\n    //     message: results.output || 'A global Stylelint error occurred. The CSS might be empty or critically malformed.',\n    //     rule: 'stylelint-global',\n    //   });\n    // }\n    // --- End of temporarily bypassed section ---\n\n    return new Response(JSON.stringify({ issues: lintIssues }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n\n  } catch (error: any) {\n    console.error('Critical error in /api/lint-css POST handler:', error);\n    \n    const criticalErrorIssue: ValidationIssue = {\n        id: `css-critical-server-error-${Math.random().toString(36).substring(2, 9)}`,\n        type: 'error',\n        message: 'Failed to lint CSS due to a server-side exception.',\n        details: error.message || String(error) || 'An unknown server error occurred.',\n        rule: 'stylelint-server-exception',\n    };\n    return new Response(JSON.stringify({ issues: [criticalErrorIssue] }), { status: 500, headers: { 'Content-Type': 'application/json' } });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAOO,eAAe,KAAK,OAAoB;IAC7C,MAAM,aAAgC,EAAE;IACxC,IAAI;QACF,+BAA+B;QAC/B,MAAM,YAAY,CAAC,+IAAyB,EAAE,OAAO;QAErD,MAAM,EAAE,IAAI,EAAE,cAAc,eAAe,EAAE,GAAG,MAAM,QAAQ,IAAI;QAElE,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA+B,IAAI;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAChJ;QAEA,MAAM,eAAe,OAAO,oBAAoB,WAAW,kBAAmB,kBAAkB,OAAO,mBAAmB;QAE1H,iDAAiD;QACjD,oGAAoG;QACpG,4DAA4D;QAC5D,sDAAsD;QAEtD,0BAA0B;QAC1B,aAAa;QACb,oCAAoC;QACpC,2DAA2D;QAC3D,OAAO;QACP,KAAK;QAEL,eAAe;QACf,QAAQ;QACR,qCAAqC;QACrC,kBAAkB;QAClB,gDAAgD;QAChD,6BAA6B;QAC7B,QAAQ;QACR,6BAA6B;QAC7B,yGAAyG;QACzG,kEAAkE;QAClE,qCAAqC;QACrC,oCAAoC;QACpC,+CAA+C;QAE/C,mEAAmE;QACnE,wDAAwD;QACxD,gCAAgC;QAChC,iCAAiC;QACjC,oCAAoC;QACpC,oCAAoC;QACpC,kCAAkC;QAClC,MAAM;QAEN,sBAAsB;QACtB,mFAAmF;QACnF,qBAAqB;QACrB,uBAAuB;QACvB,qBAAqB;QACrB,sBAAsB;QACtB,qBAAqB;QACrB,qDAAqD;QACrD,QAAQ;QACR,mIAAmI;QACnI,IAAI;QAEJ,uDAAuD;QACvD,2CAA2C;QAE3C,uEAAuE;QACvE,4DAA4D;QAC5D,gDAAgD;QAChD,2DAA2D;QAC3D,4DAA4D;QAC5D,kEAAkE;QAElE,0BAA0B;QAC1B,yEAAyE;QACzE,yBAAyB;QACzB,iDAAiD;QACjD,iCAAiC;QACjC,qCAAqC;QACrC,oCAAoC;QACpC,YAAY;QACZ,UAAU;QACV,MAAM;QAEN,6CAA6C;QAC7C,kCAAkC;QAClC,yFAAyF;QACzF,sFAAsF;QACtF,0EAA0E;QAC1E,8DAA8D;QAC9D,QAAQ;QAER,wBAAwB;QACxB,uFAAuF;QACvF,kEAAkE;QAClE,2BAA2B;QAC3B,4BAA4B;QAC5B,gCAAgC;QAChC,4BAA4B;QAC5B,UAAU;QACV,QAAQ;QACR,sFAAsF;QACtF,sBAAsB;QACtB,4EAA4E;QAC5E,qBAAqB;QACrB,uHAAuH;QACvH,gCAAgC;QAChC,QAAQ;QACR,IAAI;QACJ,8CAA8C;QAE9C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,QAAQ;QAAW,IAAI;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAE7H,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,iDAAiD;QAE/D,MAAM,qBAAsC;YACxC,IAAI,CAAC,0BAA0B,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI;YAC7E,MAAM;YACN,SAAS;YACT,SAAS,MAAM,OAAO,IAAI,OAAO,UAAU;YAC3C,MAAM;QACV;QACA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,QAAQ;gBAAC;aAAmB;QAAC,IAAI;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IACvI;AACF;;;IA3HsB;;AAAA,iPAAA","debugId":null}}]
}