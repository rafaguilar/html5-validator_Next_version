{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/src/app/api/lint-css/route.ts"],"sourcesContent":["\n'use server';\n\nimport type { NextRequest } from 'next/server';\n// import stylelint from 'stylelint'; // Commented out for dynamic import\nimport type { ValidationIssue } from '@/types';\n\nexport async function POST(request: NextRequest) {\n  const lintIssues: ValidationIssue[] = [];\n  try {\n    const stylelint = (await import('stylelint')).default; // Dynamic import\n    const { code, codeFilename: rawCodeFilename } = await request.json();\n\n    if (!code || typeof code !== 'string') {\n      return new Response(JSON.stringify({ error: 'CSS code string is required.' }), { status: 400, headers: { 'Content-Type': 'application/json' } });\n    }\n    \n    const codeFilename = typeof rawCodeFilename === 'string' ? rawCodeFilename : (rawCodeFilename ? String(rawCodeFilename) : undefined);\n\n    const minimalConfig = {\n      rules: {\n        'color-no-invalid-hex': true,\n        // 'block-no-empty': null, // Example: disable a rule\n        // Add other simple, non-plugin rules here if needed\n      },\n    };\n\n    let results;\n    try {\n      results = await stylelint.lint({\n        code: code,\n        codeFilename: codeFilename || 'temp.css', // Provide a default filename\n        config: minimalConfig,\n      });\n    } catch (lintError: any) {\n      // This catch block is for critical errors during stylelint.lint() itself\n      console.error(`Stylelint.lint() execution error for ${codeFilename || 'unknown file'}:`, lintError);\n      let errMsg = 'A critical error occurred during CSS linting.';\n      let errLine: number | undefined;\n      let errCol: number | undefined;\n      let errRule = 'stylelint-execution-error';\n\n      if (lintError.name === 'CssSyntaxError' && lintError.reason) {\n        errMsg = `CSS Syntax Error: ${lintError.reason}`;\n        errLine = lintError.line;\n        errCol = lintError.column;\n        errRule = 'css-syntax-error';\n      } else if (lintError.message) {\n        errMsg = lintError.message;\n      }\n      \n      lintIssues.push({\n        id: `css-critical-lint-error-${Math.random().toString(36).substring(2, 9)}`,\n        type: 'error',\n        message: errMsg,\n        line: errLine,\n        column: errCol,\n        rule: errRule,\n        details: lintError.stack || String(lintError),\n      });\n      return new Response(JSON.stringify({ issues: lintIssues }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n    }\n\n\n    if (results.results && results.results.length > 0) {\n      const fileResult = results.results[0]; \n      \n      if (fileResult.parseErrors && fileResult.parseErrors.length > 0) {\n        fileResult.parseErrors.forEach((parseError: any) => { \n          let errMsg = 'Unknown CSS parse error';\n          if (parseError.reason) errMsg = parseError.reason;\n          else if (parseError.text) errMsg = parseError.text;\n          else if (parseError.message) errMsg = parseError.message;\n          \n          lintIssues.push({\n            id: `css-parse-${Math.random().toString(36).substring(2, 9)}`,\n            type: 'error',\n            message: `CSS Parse Error: ${errMsg}`,\n            line: parseError.line,\n            column: parseError.column,\n            rule: 'css-syntax-error', \n          });\n        });\n      }\n\n      fileResult.warnings.forEach(warning => {\n        let message = warning.text;\n        if (warning.rule === 'CssSyntaxError' && message.endsWith(` (${warning.rule})`)) {\n          message = message.substring(0, message.length - ` (${warning.rule})`.length);\n        } else if (warning.rule && message.includes(`(${warning.rule})`)) {\n           message = message.replace(` (${warning.rule})`, '');\n        }\n\n        lintIssues.push({\n          id: `css-lint-${warning.line}-${warning.column}-${warning.rule || 'unknown'}`,\n          type: warning.severity === 'error' ? 'error' : 'warning',\n          message: message, \n          line: warning.line,\n          column: warning.column,\n          rule: warning.rule,\n        });\n      });\n    } else if (results.errored && (!results.results || results.results.length === 0)) {\n      lintIssues.push({\n        id: `css-global-error-${Math.random().toString(36).substring(2, 9)}`,\n        type: 'error',\n        message: results.output || 'A global Stylelint error occurred. The CSS might be empty or critically malformed.',\n        rule: 'stylelint-global',\n      });\n    }\n\n    return new Response(JSON.stringify({ issues: lintIssues }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n\n  } catch (error: any) {\n    // This is the outermost catch, for truly unexpected server errors in the API handler itself.\n    console.error('Critical error in /api/lint-css POST handler:', error);\n    \n    const criticalErrorIssue: ValidationIssue = {\n        id: `css-critical-server-error-${Math.random().toString(36).substring(2, 9)}`,\n        type: 'error',\n        message: 'Failed to lint CSS due to a server-side exception.',\n        details: error.message || String(error) || 'An unknown server error occurred.',\n        rule: 'stylelint-server-exception',\n    };\n    return new Response(JSON.stringify({ issues: [criticalErrorIssue] }), { status: 500, headers: { 'Content-Type': 'application/json' } });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}