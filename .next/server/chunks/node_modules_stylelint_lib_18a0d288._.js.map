{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isWhitespace.mjs"],"sourcesContent":["/**\n * Check if a character is whitespace.\n *\n * @param {string} char\n * @returns {boolean}\n */\nexport default function isWhitespace(char) {\n\treturn [' ', '\\n', '\\t', '\\r', '\\f'].includes(char);\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACc,SAAS,aAAa,IAAI;IACxC,OAAO;QAAC;QAAK;QAAM;QAAM;QAAM;KAAK,CAAC,QAAQ,CAAC;AAC/C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/rules/comment-whitespace-inside/index.mjs"],"sourcesContent":["import isStandardSyntaxComment from '../../utils/isStandardSyntaxComment.mjs';\nimport isWhitespace from '../../utils/isWhitespace.mjs';\nimport report from '../../utils/report.mjs';\nimport ruleMessages from '../../utils/ruleMessages.mjs';\nimport validateOptions from '../../utils/validateOptions.mjs';\n\nconst ruleName = 'comment-whitespace-inside';\n\nconst messages = ruleMessages(ruleName, {\n\texpectedOpening: 'Expected whitespace after \"/*\"',\n\trejectedOpening: 'Unexpected whitespace after \"/*\"',\n\texpectedClosing: 'Expected whitespace before \"*/\"',\n\trejectedClosing: 'Unexpected whitespace before \"*/\"',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/comment-whitespace-inside',\n\tfixable: true,\n};\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceBefore(comment) {\n\tif (comment.text.startsWith('*')) {\n\t\tcomment.text = comment.text.replace(/^(\\*+)/, `$1 `);\n\t} else {\n\t\tcomment.raws.left = ' ';\n\t}\n}\n\n/**\n * @param {import('postcss').Comment} comment\n */\nfunction addWhitespaceAfter(comment) {\n\tif (comment.text[comment.text.length - 1] === '*') {\n\t\tcomment.text = comment.text.replace(/(\\*+)$/, ` $1`);\n\t} else {\n\t\tcomment.raws.right = ' ';\n\t}\n}\n\n/** @type {import('stylelint').CoreRules[ruleName]} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: ['always', 'never'],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkComments((comment) => {\n\t\t\tif (!isStandardSyntaxComment(comment)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rawComment = comment.toString();\n\t\t\tconst firstFourChars = rawComment.slice(0, 4);\n\n\t\t\t// Return early if sourcemap or copyright comment\n\t\t\tif (/^\\/\\*[#!]\\s/.test(firstFourChars)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst leftMatches = rawComment.match(/(^\\/\\*+)(\\s*)/);\n\n\t\t\tif (leftMatches == null || leftMatches[1] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst rightMatches = rawComment.match(/(\\s*)(\\*+\\/)$/);\n\n\t\t\tif (rightMatches == null || rightMatches[2] == null) {\n\t\t\t\tthrow new Error(`Invalid comment: \"${rawComment}\"`);\n\t\t\t}\n\n\t\t\tconst opener = leftMatches[1];\n\t\t\tconst leftWord = leftMatches[2] ?? '';\n\t\t\tconst leftSpace = leftWord.charAt(0);\n\t\t\tconst rightWord = rightMatches[1] ?? '';\n\t\t\tconst rightSpace = rightWord.charAt(0);\n\t\t\tconst closer = rightMatches[2];\n\n\t\t\tif (primary === 'never' && leftSpace !== '') {\n\t\t\t\tconst index = opener.length;\n\t\t\t\tconst endIndex = index + leftWord.length;\n\n\t\t\t\tcomplain(messages.rejectedOpening, index, endIndex);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(leftSpace)) {\n\t\t\t\tcomplain(messages.expectedOpening, opener.length);\n\t\t\t}\n\n\t\t\tif (primary === 'never' && rightSpace !== '') {\n\t\t\t\tconst endIndex = rawComment.length - closer.length;\n\t\t\t\tconst index = endIndex - rightWord.length;\n\n\t\t\t\tcomplain(messages.rejectedClosing, index, endIndex);\n\t\t\t}\n\n\t\t\tif (primary === 'always' && !isWhitespace(rightSpace)) {\n\t\t\t\tcomplain(messages.expectedClosing, rawComment.length - closer.length - 1);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string} message\n\t\t\t * @param {number} index\n\t\t\t * @param {number} endIndex\n\t\t\t */\n\t\t\tfunction complain(message, index, endIndex = index) {\n\t\t\t\tconst fix = () => {\n\t\t\t\t\tif (primary === 'never') {\n\t\t\t\t\t\tcomment.raws.left = '';\n\t\t\t\t\t\tcomment.raws.right = '';\n\t\t\t\t\t\tcomment.text = comment.text.replace(/^(\\*+)(\\s+)?/, '$1').replace(/(\\s+)?(\\*+)$/, '$2');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst mutate =\n\t\t\t\t\t\t\tmessage === messages.expectedClosing ? addWhitespaceAfter : addWhitespaceBefore;\n\n\t\t\t\t\t\tmutate(comment);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\treport({\n\t\t\t\t\tmessage,\n\t\t\t\t\tindex,\n\t\t\t\t\tendIndex,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tnode: comment,\n\t\t\t\t\tfix: {\n\t\t\t\t\t\tapply: fix,\n\t\t\t\t\t\tnode: comment,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nexport default rule;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}