module.exports = {

"[project]/node_modules/stylelint/lib/rules/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @type {import('stylelint').PublicApi['rules']} */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const rules = {
    get 'alpha-value-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/alpha-value-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'annotation-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/annotation-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-descriptor-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-descriptor-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-descriptor-value-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-descriptor-value-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-empty-line-before' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-no-deprecated' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-no-deprecated/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-no-vendor-prefix' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-no-vendor-prefix/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-prelude-no-invalid' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-prelude-no-invalid/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'at-rule-property-required-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/at-rule-property-required-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'block-no-empty' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/block-no-empty/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'color-function-alias-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/color-function-alias-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'color-function-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/color-function-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'color-hex-alpha' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/color-hex-alpha/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'color-hex-length' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/color-hex-length/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'color-named' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/color-named/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'color-no-hex' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/color-no-hex/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'color-no-invalid-hex' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/color-no-invalid-hex/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'comment-empty-line-before' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/comment-empty-line-before/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'comment-no-empty' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/comment-no-empty/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'comment-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/comment-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'comment-whitespace-inside' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/comment-whitespace-inside/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'comment-word-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/comment-word-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'container-name-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/container-name-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'custom-media-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/custom-media-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'custom-property-empty-line-before' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/custom-property-empty-line-before/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'custom-property-no-missing-var-function' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/custom-property-no-missing-var-function/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'custom-property-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/custom-property-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-block-no-duplicate-custom-properties' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-block-no-duplicate-custom-properties/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-block-no-duplicate-properties' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-block-no-redundant-longhand-properties' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-block-no-shorthand-property-overrides' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-block-single-line-max-declarations' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-empty-line-before' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-empty-line-before/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-no-important' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-no-important/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-property-max-values' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-property-max-values/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-property-unit-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-property-unit-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-property-unit-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-property-unit-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-property-value-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-property-value-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-property-value-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-property-value-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-property-value-keyword-no-deprecated' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-property-value-keyword-no-deprecated/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'declaration-property-value-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/declaration-property-value-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'font-family-name-quotes' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/font-family-name-quotes/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'font-family-no-duplicate-names' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/font-family-no-duplicate-names/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'font-family-no-missing-generic-family-keyword' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/font-family-no-missing-generic-family-keyword/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'font-weight-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/font-weight-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-calc-no-unspaced-operator' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-calc-no-unspaced-operator/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-linear-gradient-no-nonstandard-direction' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-name-case' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-name-case/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-url-no-scheme-relative' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-url-no-scheme-relative/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-url-quotes' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-url-quotes/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-url-scheme-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-url-scheme-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'function-url-scheme-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/function-url-scheme-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'hue-degree-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/hue-degree-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'import-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/import-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'keyframe-block-no-duplicate-selectors' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/keyframe-block-no-duplicate-selectors/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'keyframe-declaration-no-important' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/keyframe-declaration-no-important/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'keyframe-selector-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/keyframe-selector-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'keyframes-name-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/keyframes-name-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'layer-name-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/layer-name-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'length-zero-no-unit' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/length-zero-no-unit/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'lightness-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/lightness-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'max-nesting-depth' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/max-nesting-depth/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-name-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-name-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-name-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-name-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-name-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-name-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-name-no-vendor-prefix' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-name-unit-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-name-unit-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-name-value-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-name-value-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-name-value-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-name-value-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-feature-range-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-feature-range-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'media-query-no-invalid' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/media-query-no-invalid/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'named-grid-areas-no-invalid' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/named-grid-areas-no-invalid/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-descending-specificity' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-descending-specificity/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-duplicate-at-import-rules' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-duplicate-at-import-rules/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-duplicate-selectors' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-duplicate-selectors/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-empty-source' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-empty-source/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-invalid-double-slash-comments' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-invalid-double-slash-comments/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-invalid-position-at-import-rule' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-invalid-position-at-import-rule/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-irregular-whitespace' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-irregular-whitespace/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-unknown-animations' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-unknown-animations/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-unknown-custom-media' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-unknown-custom-media/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'no-unknown-custom-properties' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/no-unknown-custom-properties/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'number-max-precision' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/number-max-precision/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'property-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/property-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'property-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/property-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'property-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/property-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'property-no-vendor-prefix' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/property-no-vendor-prefix/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'rule-empty-line-before' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/rule-empty-line-before/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'rule-selector-property-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/rule-selector-property-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-anb-no-unmatchable' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-anb-no-unmatchable/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-attribute-name-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-attribute-name-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-attribute-operator-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-attribute-operator-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-attribute-operator-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-attribute-operator-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-attribute-quotes' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-attribute-quotes/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-class-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-class-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-combinator-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-combinator-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-combinator-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-combinator-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-id-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-id-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-attribute' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-attribute/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-class' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-class/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-combinators' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-combinators/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-compound-selectors' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-compound-selectors/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-id' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-id/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-pseudo-class' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-pseudo-class/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-specificity' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-specificity/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-type' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-type/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-max-universal' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-max-universal/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-nested-pattern' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-nested-pattern/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-no-qualifying-type' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-no-qualifying-type/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-no-vendor-prefix' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-no-vendor-prefix/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-not-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-not-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-pseudo-class-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-pseudo-class-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-pseudo-class-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-pseudo-class-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-pseudo-class-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-pseudo-element-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-pseudo-element-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-pseudo-element-colon-notation' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-pseudo-element-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-pseudo-element-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-pseudo-element-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-type-case' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-type-case/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'selector-type-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/selector-type-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'shorthand-property-no-redundant-values' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/shorthand-property-no-redundant-values/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'string-no-newline' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/string-no-newline/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'syntax-string-no-invalid' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/syntax-string-no-invalid/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'time-min-milliseconds' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/time-min-milliseconds/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'unit-allowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/unit-allowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'unit-disallowed-list' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/unit-disallowed-list/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'unit-no-unknown' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/unit-no-unknown/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'value-keyword-case' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/value-keyword-case/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get 'value-no-vendor-prefix' () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    }
};
const __TURBOPACK__default__export__ = rules;
}}),
"[project]/node_modules/stylelint/lib/utils/getStylelintRule.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getStylelintRule)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/rules/index.mjs [app-route] (ecmascript)");
;
function getStylelintRule(ruleName, config) {
    if (isBuiltInRule(ruleName)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"][ruleName];
    }
    return Promise.resolve(config?.pluginFunctions?.[ruleName]);
}
/**
 * @param {string} ruleName
 * @returns {ruleName is keyof rules}
 */ function isBuiltInRule(ruleName) {
    return ruleName in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"];
}
}}),
"[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assert": (()=>assert),
    "assertFunction": (()=>assertFunction),
    "assertNumber": (()=>assertNumber),
    "assertString": (()=>assertString),
    "isBoolean": (()=>isBoolean),
    "isFunction": (()=>isFunction),
    "isNullish": (()=>isNullish),
    "isNumber": (()=>isNumber),
    "isObject": (()=>isObject),
    "isPlainObject": (()=>isPlainObject),
    "isPosition": (()=>isPosition),
    "isRange": (()=>isRange),
    "isRegExp": (()=>isRegExp),
    "isString": (()=>isString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$plain$2d$object$2f$dist$2f$is$2d$plain$2d$object$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/is-plain-object/dist/is-plain-object.mjs [app-route] (ecmascript)");
;
function isBoolean(value) {
    return typeof value === 'boolean' || value instanceof Boolean;
}
function isFunction(value) {
    return typeof value === 'function' || value instanceof Function;
}
function isNullish(value) {
    return value == null;
}
function isNumber(value) {
    return typeof value === 'number' || value instanceof Number;
}
function isObject(value) {
    return value !== null && typeof value === 'object';
}
function isRegExp(value) {
    return value instanceof RegExp;
}
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
function isPlainObject(value) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$plain$2d$object$2f$dist$2f$is$2d$plain$2d$object$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(value);
}
function assert(value, message = undefined) {
    if (message) {
        // eslint-disable-next-line no-console
        console.assert(value, message);
    } else {
        // eslint-disable-next-line no-console
        console.assert(value);
    }
}
function assertFunction(value) {
    // eslint-disable-next-line no-console
    console.assert(isFunction(value), `"${value}" must be a function`);
}
function assertNumber(value) {
    // eslint-disable-next-line no-console
    console.assert(isNumber(value), `"${value}" must be a number`);
}
function assertString(value) {
    // eslint-disable-next-line no-console
    console.assert(isString(value), `"${value}" must be a string`);
}
function isPosition(value) {
    if (!isPlainObject(value)) return false;
    if (!isNumber(value.line)) return false;
    if (!isNumber(value.column)) return false;
    return true;
}
function isRange(value) {
    if (!isPlainObject(value)) return false;
    if (!isPosition(value.start)) return false;
    if (!isPosition(value.end)) return false;
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/normalizeRuleSettings.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>normalizeRuleSettings)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
;
function normalizeRuleSettings(rawSettings, rule) {
    if (rawSettings === null || rawSettings === undefined) {
        return null;
    }
    if (!Array.isArray(rawSettings)) {
        return [
            rawSettings
        ];
    }
    // Everything below is an array ...
    const [primary, secondary] = rawSettings;
    if (rawSettings.length > 0 && (primary === null || primary === undefined)) {
        return null;
    }
    if (rule && !rule.primaryOptionArray) {
        return rawSettings;
    }
    // Everything below is a rule that CAN have an array for a primary option ...
    // (they might also have something else, e.g. rule-properties-order can
    // have the string "alphabetical")
    if (rawSettings.length === 1 && Array.isArray(primary)) {
        return rawSettings;
    }
    if (rawSettings.length === 2 && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(primary) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(secondary)) {
        return rawSettings;
    }
    // `T` must be an array type, but TSC thinks it's probably invalid to
    // cast `[T]` to `T` so we cast through `any` first.
    return [
        rawSettings
    ];
}
}}),
"[project]/node_modules/stylelint/lib/utils/checkAgainstRule.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>checkAgainstRule)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$postcss$2f$lib$2f$result__$5b$external$5d$__$28$postcss$2f$lib$2f$result$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/postcss/lib/result [external] (postcss/lib/result, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getStylelintRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getStylelintRule.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/css-tree/lib/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/css-tree/lib/index.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$normalizeRuleSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/normalizeRuleSettings.mjs [app-route] (ecmascript)");
;
;
;
;
;
async function checkAgainstRule(options, callback) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(options)) throw new Error('Expected an options object');
    if (!callback) throw new Error('Expected a callback function');
    const { ruleName, ruleSettings, root, result, context = {
        lexer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["lexer"]
    } } = options;
    if (!ruleName) throw new Error('Expected a "ruleName" option');
    const rule = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getStylelintRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, result?.stylelint?.config);
    if (!rule) throw new Error(`Rule "${ruleName}" does not exist`);
    if (!ruleSettings) throw new Error('Expected a "ruleSettings" option');
    if (!root) throw new Error('Expected a "root" option');
    const settings = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$normalizeRuleSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleSettings, rule);
    if (!settings) {
        return;
    }
    const tmpPostcssResult = new __TURBOPACK__imported__module__$5b$externals$5d2f$postcss$2f$lib$2f$result__$5b$external$5d$__$28$postcss$2f$lib$2f$result$2c$__cjs$29$__["default"](// NOTE: The first argument is unused, so passing `undefined` raises no problems.
    //       But this PostCSS's behavior may change in the future.
    // @ts-expect-error -- TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Processor'.
    undefined, undefined, undefined);
    /** @type {import('stylelint').StylelintPostcssResult} */ const stylelint = result?.stylelint ?? {
        ruleSeverities: {},
        customMessages: {},
        customUrls: {},
        ruleMetadata: {},
        fixersData: {},
        rangesOfComputedEditInfos: [],
        disabledRanges: {}
    };
    // @ts-expect-error -- TS2339: Property 'stylelint' does not exist on type 'Result<undefined>'.
    tmpPostcssResult.stylelint = stylelint;
    const [primary, secondary] = settings;
    const ruleFunc = rule(primary, secondary || {}, context);
    await ruleFunc(root, // NOTE: This temporary PostCSS result doesn't have a property for Stylelint use.
    //       Problems may occur if some rules use the property.
    // @ts-expect-error -- TS2345: Argument of type 'Result' is not assignable to parameter of type 'PostcssResult'.
    tmpPostcssResult);
    for (const warning of tmpPostcssResult.warnings())callback(warning);
}
}}),
"[project]/node_modules/stylelint/lib/createPlugin.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @type {import('stylelint').PublicApi['createPlugin']}
 */ __turbopack_context__.s({
    "default": (()=>createPlugin)
});
function createPlugin(ruleName, rule) {
    return {
        ruleName,
        rule
    };
}
}}),
"[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CACHE_STRATEGY_CONTENT": (()=>CACHE_STRATEGY_CONTENT),
    "CACHE_STRATEGY_METADATA": (()=>CACHE_STRATEGY_METADATA),
    "DEFAULT_CACHE_LOCATION": (()=>DEFAULT_CACHE_LOCATION),
    "DEFAULT_CACHE_STRATEGY": (()=>DEFAULT_CACHE_STRATEGY),
    "DEFAULT_FIX_MODE": (()=>DEFAULT_FIX_MODE),
    "DEFAULT_FORMATTER": (()=>DEFAULT_FORMATTER),
    "DEFAULT_IGNORE_FILENAME": (()=>DEFAULT_IGNORE_FILENAME),
    "DEFAULT_SEVERITY": (()=>DEFAULT_SEVERITY),
    "EXIT_CODE_FATAL_ERROR": (()=>EXIT_CODE_FATAL_ERROR),
    "EXIT_CODE_INVALID_CONFIG": (()=>EXIT_CODE_INVALID_CONFIG),
    "EXIT_CODE_INVALID_USAGE": (()=>EXIT_CODE_INVALID_USAGE),
    "EXIT_CODE_LINT_PROBLEM": (()=>EXIT_CODE_LINT_PROBLEM),
    "EXIT_CODE_SUCCESS": (()=>EXIT_CODE_SUCCESS),
    "RULE_NAME_ALL": (()=>RULE_NAME_ALL),
    "SEVERITY_ERROR": (()=>SEVERITY_ERROR),
    "SEVERITY_WARNING": (()=>SEVERITY_WARNING)
});
const DEFAULT_CACHE_LOCATION = './.stylelintcache';
const CACHE_STRATEGY_METADATA = 'metadata';
const CACHE_STRATEGY_CONTENT = 'content';
const DEFAULT_CACHE_STRATEGY = CACHE_STRATEGY_METADATA;
const DEFAULT_IGNORE_FILENAME = '.stylelintignore';
const DEFAULT_FORMATTER = 'string';
const EXIT_CODE_SUCCESS = 0;
const EXIT_CODE_FATAL_ERROR = 1;
const EXIT_CODE_LINT_PROBLEM = 2;
const EXIT_CODE_INVALID_USAGE = 64;
const EXIT_CODE_INVALID_CONFIG = 78;
const RULE_NAME_ALL = 'all';
const SEVERITY_ERROR = 'error';
const SEVERITY_WARNING = 'warning';
const DEFAULT_SEVERITY = SEVERITY_ERROR;
const DEFAULT_FIX_MODE = 'lax';
}}),
"[project]/node_modules/stylelint/lib/utils/hash.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hash)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$imurmurhash$2f$imurmurhash$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/imurmurhash/imurmurhash.js [app-route] (ecmascript)");
;
function hash(str) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$imurmurhash$2f$imurmurhash$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(str).result().toString(36);
}
}}),
"[project]/node_modules/stylelint/lib/utils/getCacheFile.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getCacheFile)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs [external] (node:fs, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hash$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hash.mjs [app-route] (ecmascript)");
;
;
;
function getCacheFile(cacheFile, cwd) {
    /*
	 * Make sure path separators are normalized for environment/os.
	 * Also, keep trailing path separator if present.
	 */ cacheFile = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["normalize"])(cacheFile);
    const resolvedCacheFile = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["resolve"])(cwd, cacheFile);
    // If the last character passed is a path separator, we assume is a directory.
    const looksLikeADirectory = cacheFile[cacheFile.length - 1] === __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["sep"];
    /**
	 * Return the default cache file name when provided parameter is a directory.
	 * @returns {string} - Resolved path to the cacheFile
	 */ function getCacheFileForDirectory() {
        return (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["join"])(resolvedCacheFile, `.stylelintcache_${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hash$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(cwd)}`);
    }
    if (looksLikeADirectory || (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["lstatSync"])(resolvedCacheFile, {
        throwIfNoEntry: false
    })?.isDirectory()) {
        // Return path to provided directory with generated file name.
        return getCacheFileForDirectory();
    }
    // Return normalized path to cache file.
    return resolvedCacheFile;
}
}}),
"[project]/node_modules/stylelint/package.json (static in ecmascript)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.v("/server/assets/package.a40894a5.json");}}),
"[project]/node_modules/stylelint/lib/utils/FileCache.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>FileCache)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs [external] (node:fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$entry$2d$cache$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/file-entry-cache/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getCacheFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getCacheFile.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hash$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hash.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$entry$2d$cache$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__
]);
([__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$entry$2d$cache$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
const __TURBOPACK__import$2e$meta__ = {
    get url () {
        return `file://${__turbopack_context__.P("node_modules/stylelint/lib/utils/FileCache.mjs")}`;
    }
};
;
;
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('stylelint:file-cache');
const pkg = JSON.parse((0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["readFileSync"])(new URL(__turbopack_context__.R("[project]/node_modules/stylelint/package.json (static in ecmascript)")), 'utf8'));
class FileCache {
    constructor(cacheLocation = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_CACHE_LOCATION"], cacheStrategy = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_CACHE_STRATEGY"], cwd = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd()){
        if (![
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CACHE_STRATEGY_METADATA"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CACHE_STRATEGY_CONTENT"]
        ].includes(cacheStrategy)) {
            throw new Error(`"${cacheStrategy}" cache strategy is unsupported. Specify either "${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CACHE_STRATEGY_METADATA"]}" or "${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CACHE_STRATEGY_CONTENT"]}"`);
        }
        const cacheFile = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["resolve"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getCacheFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(cacheLocation, cwd));
        const useCheckSum = cacheStrategy === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CACHE_STRATEGY_CONTENT"];
        debug(`Cache file is created at ${cacheFile}`);
        try {
            this._fileCache = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$entry$2d$cache$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].createFromFile(cacheFile, useCheckSum, undefined);
        } catch  {
            debug(`Cache file might be corrupt, attempting to remove and recreate the cache file`);
            (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["rmSync"])(cacheFile, {
                force: true
            });
            this._fileCache = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$entry$2d$cache$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].createFromFile(cacheFile, useCheckSum, undefined);
        }
        this._hashOfConfig = '';
        this._useCheckSum = useCheckSum;
    }
    /**
	 * @param {import('stylelint').Config} config
	 */ calcHashOfConfig(config) {
        if (this._hashOfConfig) return;
        const stylelintVersion = pkg.version;
        const configString = JSON.stringify(config || {});
        this._hashOfConfig = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hash$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`${stylelintVersion}_${configString}`);
    }
    /**
	 * @param {string} absoluteFilepath
	 * @returns {boolean}
	 */ hasFileChanged(absoluteFilepath) {
        // Get file descriptor compares current metadata against cached
        // one and stores the result to "changed" prop.w
        /** @type {import('file-entry-cache').FileDescriptorMeta | undefined} */ const metaCache = this._fileCache.cache.getKey(this._fileCache.createFileKey(absoluteFilepath));
        const descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);
        /** @type {{ hashOfConfig?: string; }} */ const metadata = descriptor.meta.data ??= {};
        const configChanged = metadata.hashOfConfig !== this._hashOfConfig;
        let changed;
        if (this._useCheckSum) {
            changed = configChanged || !metaCache?.hash || metaCache.hash !== descriptor.meta.hash;
        } else {
            changed = configChanged || Boolean(descriptor.changed);
        }
        if (!changed) {
            debug(`Skip linting ${absoluteFilepath}. File hasn't changed.`);
        }
        // Mutate file descriptor object and store config hash to each file.
        // Running lint with different config should invalidate the cache.
        if (metadata.hashOfConfig !== this._hashOfConfig) {
            metadata.hashOfConfig = this._hashOfConfig;
        }
        return changed;
    }
    reconcile() {
        this._fileCache.reconcile();
    }
    destroy() {
        this._fileCache.destroy();
    }
    /**
	 * @param {string} absoluteFilepath
	 */ removeEntry(absoluteFilepath) {
        this._fileCache.removeEntry(absoluteFilepath);
    }
}
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),
"[project]/node_modules/stylelint/lib/utils/configurationError.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>configurationError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
;
function configurationError(text) {
    const err = new Error(text);
    err.code = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EXIT_CODE_INVALID_CONFIG"];
    return err;
}
}}),
"[project]/node_modules/stylelint/lib/utils/dynamicImport.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>dynamicImport)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:url [external] (node:url, cjs)");
;
;
function dynamicImport(path) {
    return Promise.resolve().then(()=>{
        const e = new Error("Cannot find module as expression is too dynamic");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    });
}
}}),
"[project]/node_modules/stylelint/lib/utils/emitDeprecationWarning.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "clearEmittedDeprecationWarnings": (()=>clearEmittedDeprecationWarnings),
    "default": (()=>emitDeprecationWarning)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
;
// Each code must be unique.
const CODES = {
    COMMONJS_PLUGINS: '001',
    COMMONJS_NODEJS_API: '002',
    RESULT_OUTPUT_PROPERTY: '003',
    GITHUB_FORMATTER: '004',
    CONTEXT_FIX: '005',
    RULE: '006',
    REPORT_AMBIGUOUS_POSITION: '007'
};
const emittedWarnings = new Set();
function emitDeprecationWarning(message, codeKey, detail) {
    const code = CODES[codeKey];
    const key = JSON.stringify({
        message,
        options: {
            type: 'DeprecationWarning',
            code: `stylelint:${code}`,
            detail
        }
    });
    if (emittedWarnings.has(key)) return;
    emittedWarnings.add(key);
    __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].emitWarning(message, {
        type: 'DeprecationWarning',
        code: `stylelint:${code}`,
        detail
    });
}
function clearEmittedDeprecationWarnings() {
    emittedWarnings.clear();
}
}}),
"[project]/node_modules/stylelint/lib/utils/resolveSilent.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>resolveSilent)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs [external] (node:fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:url [external] (node:url, cjs)");
// TODO: use pure ESM `import-meta-resolve` package in next major version
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dual$2d$bundle$2f$import$2d$meta$2d$resolve$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@dual-bundle/import-meta-resolve/index.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$resolve$2d$from$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/resolve-from/index.js [app-route] (ecmascript)");
;
;
;
;
;
/**
 * TODO: These suffixes are here for commonjs compatibility reason, we should remove these codes after migrating to pure ESM, because in ESM accurate paths are required
 */ const pathSuffixes = [
    '',
    '.js',
    '.json',
    `${__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["default"].sep}index.js`,
    `${__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["default"].sep}index.json`
];
const specifierSuffixes = [
    '',
    '.js',
    '.json',
    '/index.js',
    '/index.json'
];
/**
 * Checks whether the given file exists as a file.
 * @param {string} filename The file to check.
 * @returns {boolean} `true` if the file exists and is a file, otherwise `false`.
 */ function existsFile(filename) {
    return __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["default"].statSync(filename, {
        throwIfNoEntry: false
    })?.isFile() ?? false;
}
function resolveSilent(parent, lookup) {
    if (__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["default"].isAbsolute(lookup)) {
        for (const suffix of pathSuffixes){
            const filename = lookup + suffix;
            if (existsFile(filename)) {
                return filename;
            }
        }
        return;
    }
    const base = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__["pathToFileURL"])(__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["default"].resolve(parent, 'noop.js')).toString();
    for (const suffix of specifierSuffixes){
        try {
            const resolved = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__["fileURLToPath"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dual$2d$bundle$2f$import$2d$meta$2d$resolve$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["resolve"])(lookup + suffix, base));
            if (existsFile(resolved)) {
                return resolved;
            }
        } catch  {
        //
        }
    }
    /**
	 * Yarn P'n'P does not support pure ESM well by default, this is only a workaround for it
	 * @see https://github.com/wooorm/import-meta-resolve/issues/23
	 *
	 * TODO: this workaround is still necessary before native `import.meta.resolve` replacement
	 */ return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$resolve$2d$from$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].silent(parent, lookup);
}
}}),
"[project]/node_modules/stylelint/lib/utils/getModulePath.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getModulePath)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$global$2d$modules$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/global-modules/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/configurationError.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$resolveSilent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/resolveSilent.mjs [app-route] (ecmascript)");
;
;
;
;
function getModulePath(basedir, lookup, cwd = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd()) {
    // 1. Try to resolve from the provided directory
    // 2. Try to resolve from `cwd` or `process.cwd()`
    // 3. Try to resolve from global `node_modules` directory
    let path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$resolveSilent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basedir, lookup);
    if (!path) {
        path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$resolveSilent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(cwd, lookup);
    }
    if (!path) {
        path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$resolveSilent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$global$2d$modules$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"], lookup);
    }
    if (!path) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`Could not find "${lookup}". Do you need to install the package or use the "configBasedir" option?`);
    }
    return path;
}
}}),
"[project]/node_modules/stylelint/lib/normalizeAllRuleSettings.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>normalizeAllRuleSettings)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getStylelintRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getStylelintRule.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$normalizeRuleSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/normalizeRuleSettings.mjs [app-route] (ecmascript)");
;
;
async function normalizeAllRuleSettings(config) {
    if (!config.rules) return config;
    /** @type {StylelintConfig['rules']} */ const normalizedRules = {};
    for (const [ruleName, rawRuleSettings] of Object.entries(config.rules)){
        const rule = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getStylelintRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, config);
        if (rule) {
            normalizedRules[ruleName] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$normalizeRuleSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(rawRuleSettings, rule);
        } else {
            normalizedRules[ruleName] = [];
        }
    }
    config.rules = normalizedRules;
    return config;
}
}}),
"[project]/node_modules/stylelint/lib/augmentConfig.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "applyOverrides": (()=>applyOverrides),
    "augmentConfigExtended": (()=>augmentConfigExtended),
    "augmentConfigFull": (()=>augmentConfigFull)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$globjoin$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/globjoin/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$micromatch$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/micromatch/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$normalize$2d$path$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/normalize-path/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/configurationError.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$dynamicImport$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/dynamicImport.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/emitDeprecationWarning.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getModulePath$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getModulePath.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$normalizeAllRuleSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/normalizeAllRuleSettings.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
/** @import {Config as StylelintConfig, CosmiconfigResult as StylelintCosmiconfigResult, InternalApi as StylelintInternalApi} from 'stylelint' */ /**
 * @param {string} glob
 * @param {string} basedir
 * @returns {string}
 */ function absolutizeGlob(glob, basedir) {
    const result = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(glob.replace(/^!/, '')) ? glob : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$globjoin$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basedir, glob);
    // Glob patterns for micromatch should be in POSIX-style
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$normalize$2d$path$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result);
}
/**
 * - Merges config and stylelint options
 * - Makes all paths absolute
 * - Merges extends
 * @param {StylelintInternalApi} stylelint
 * @param {StylelintConfig} config
 * @param {string} configDir
 * @param {boolean} allowOverrides
 * @param {string} rootConfigDir
 * @param {string} [filePath]
 * @returns {Promise<StylelintConfig>}
 */ async function augmentConfigBasic(stylelint, config, configDir, allowOverrides, rootConfigDir, filePath) {
    let augmentedConfig = config;
    if (allowOverrides) {
        augmentedConfig = addOptions(stylelint, augmentedConfig);
    }
    if (filePath) {
        augmentedConfig = applyOverrides(augmentedConfig, rootConfigDir, filePath);
    }
    augmentedConfig = await extendConfig(stylelint, augmentedConfig, configDir, rootConfigDir, filePath);
    const cwd = stylelint._options.cwd;
    return absolutizePaths(augmentedConfig, configDir, cwd);
}
function augmentConfigExtended(cwd) {
    return async (cosmiconfigResult)=>{
        if (!cosmiconfigResult) {
            return null;
        }
        const configDir = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["dirname"])(cosmiconfigResult.filepath || '');
        const { config } = cosmiconfigResult;
        const augmentedConfig = absolutizePaths(config, configDir, cwd);
        return {
            config: augmentedConfig,
            filepath: cosmiconfigResult.filepath
        };
    };
}
async function augmentConfigFull(stylelint, filePath, cosmiconfigResult) {
    if (!cosmiconfigResult) {
        return null;
    }
    const config = cosmiconfigResult.config;
    const filepath = cosmiconfigResult.filepath;
    const configDir = stylelint._options.configBasedir || (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["dirname"])(filepath || '');
    let augmentedConfig = await augmentConfigBasic(stylelint, config, configDir, true, configDir, filePath);
    augmentedConfig = await addPluginFunctions(augmentedConfig, stylelint._options);
    augmentedConfig = await addProcessorFunctions(augmentedConfig);
    if (!augmentedConfig.rules) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('No rules found within configuration. Have you provided a "rules" property?');
    }
    augmentedConfig = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$normalizeAllRuleSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(augmentedConfig);
    return {
        config: augmentedConfig,
        filepath: cosmiconfigResult.filepath
    };
}
/**
 * Make all paths in the config absolute.
 *
 * @param {StylelintConfig} config
 * @param {string} configDir
 * @param {string} cwd
 * @returns {StylelintConfig}
 */ function absolutizePaths(config, configDir, cwd) {
    if (config.ignoreFiles) {
        config.ignoreFiles = [
            config.ignoreFiles
        ].flat().map((glob)=>absolutizeGlob(glob, configDir));
    }
    /** @type {<T>(lookup: T) => (string | T)} */ const toAbsolutePath = (lookup)=>{
        if (typeof lookup === 'string') {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getModulePath$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(configDir, lookup, cwd);
        }
        return lookup;
    };
    if (config.plugins) {
        config.plugins = [
            config.plugins
        ].flat().map(toAbsolutePath);
    }
    if (config.processors) {
        config.processors = config.processors.map(toAbsolutePath);
    }
    return config;
}
/**
 * @param {StylelintInternalApi} stylelint
 * @param {StylelintConfig} config
 * @param {string} configDir
 * @param {string} rootConfigDir
 * @param {string} [filePath]
 * @returns {Promise<StylelintConfig>}
 */ async function extendConfig(stylelint, config, configDir, rootConfigDir, filePath) {
    if (config.extends === undefined) {
        return config;
    }
    const { extends: configExtends, ...originalWithoutExtends } = config;
    const normalizedExtends = [
        configExtends
    ].flat();
    let resultConfig = originalWithoutExtends;
    for (const extendLookup of normalizedExtends){
        let extendResult;
        if (typeof extendLookup === 'string') {
            extendResult = await loadExtendedConfig(stylelint, configDir, extendLookup);
        } else if (typeof extendLookup === 'object' && extendLookup !== null) {
            extendResult = {
                config: extendLookup
            };
        }
        if (extendResult) {
            let extendResultConfig = extendResult.config;
            const extendConfigDir = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["dirname"])(extendResult.filepath || '');
            extendResultConfig = await augmentConfigBasic(stylelint, extendResultConfig, extendConfigDir, false, rootConfigDir, filePath);
            resultConfig = mergeConfigs(resultConfig, extendResultConfig);
        }
    }
    return mergeConfigs(resultConfig, originalWithoutExtends);
}
/**
 * @param {StylelintInternalApi} stylelint
 * @param {string} configDir
 * @param {string} extendLookup
 * @returns {Promise<StylelintCosmiconfigResult>}
 */ function loadExtendedConfig(stylelint, configDir, extendLookup) {
    const extendPath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getModulePath$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(configDir, extendLookup, stylelint._options.cwd);
    return stylelint._extendExplorer.load(extendPath);
}
/**
 * When merging configs (via extends)
 * - plugin, extends, overrides arrays are joined
 * - rules are merged via Object.assign, so there is no attempt made to
 *   merge any given rule's settings. If b contains the same rule as a,
 *   b's rule settings will override a's rule settings entirely.
 * - Everything else is merged via Object.assign
 * @param {StylelintConfig} a
 * @param {StylelintConfig} b
 * @returns {StylelintConfig}
 */ function mergeConfigs(a, b) {
    /** @type {Pick<StylelintConfig, 'plugins'>} */ const pluginMerger = {};
    if (a.plugins || b.plugins) {
        pluginMerger.plugins = [];
        if (a.plugins) {
            pluginMerger.plugins = pluginMerger.plugins.concat(a.plugins);
        }
        if (b.plugins) {
            pluginMerger.plugins = [
                ...new Set(pluginMerger.plugins.concat(b.plugins))
            ];
        }
    }
    /** @type {Pick<StylelintConfig, 'processors'>} */ const processorMerger = {};
    if (a.processors || b.processors) {
        processorMerger.processors = [];
        if (a.processors) {
            processorMerger.processors = processorMerger.processors.concat(a.processors);
        }
        if (b.processors) {
            processorMerger.processors = [
                ...new Set(processorMerger.processors.concat(b.processors))
            ];
        }
    }
    /** @type {Pick<StylelintConfig, 'overrides'>} */ const overridesMerger = {};
    if (a.overrides || b.overrides) {
        overridesMerger.overrides = [];
        if (a.overrides) {
            overridesMerger.overrides = overridesMerger.overrides.concat(a.overrides);
        }
        if (b.overrides) {
            overridesMerger.overrides = [
                ...new Set(overridesMerger.overrides.concat(b.overrides))
            ];
        }
    }
    /** @type {Pick<StylelintConfig, 'extends'>} */ const extendsMerger = {};
    if (a.extends || b.extends) {
        extendsMerger.extends = [];
        if (a.extends) {
            extendsMerger.extends = extendsMerger.extends.concat(a.extends);
        }
        if (b.extends) {
            extendsMerger.extends = extendsMerger.extends.concat(b.extends);
        }
        // Remove duplicates from the array, the last item takes precedence
        extendsMerger.extends = extendsMerger.extends.filter((item, index, arr)=>arr.lastIndexOf(item) === index);
    }
    const rulesMerger = {};
    if (a.rules || b.rules) {
        rulesMerger.rules = {
            ...a.rules,
            ...b.rules
        };
    }
    const result = {
        ...a,
        ...b,
        ...extendsMerger,
        ...pluginMerger,
        ...processorMerger,
        ...overridesMerger,
        ...rulesMerger
    };
    return result;
}
/**
 * @param {StylelintConfig} config
 * @param {import('stylelint').LinterOptions} options
 * @returns {Promise<StylelintConfig>}
 */ async function addPluginFunctions(config, { quietDeprecationWarnings }) {
    if (!config.plugins) {
        return config;
    }
    const normalizedPlugins = [
        config.plugins
    ].flat();
    /** @type {StylelintConfig['pluginFunctions']} */ const pluginFunctions = {};
    for (const pluginLookup of normalizedPlugins){
        let pluginImport;
        if (typeof pluginLookup === 'string') {
            pluginImport = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$dynamicImport$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(pluginLookup);
            // NOTE: This '.cjs' check is limited. Some CommonJS plugins may have the '.js' extension.
            if (!quietDeprecationWarnings && pluginLookup.endsWith('.cjs')) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`CommonJS plugins are deprecated ("${pluginLookup}").`, 'COMMONJS_PLUGINS', 'See https://stylelint.io/migration-guide/to-16');
            }
        } else {
            pluginImport = pluginLookup;
        }
        // Handle either ES6 or CommonJS modules
        pluginImport = pluginImport.default || pluginImport;
        // A plugin can export either a single rule definition
        // or an array of them
        const normalizedPluginImport = [
            pluginImport
        ].flat();
        for (const pluginRuleDefinition of normalizedPluginImport){
            if (!pluginRuleDefinition.ruleName) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`stylelint requires plugins to expose a ruleName. The plugin "${pluginLookup}" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`);
            }
            if (!pluginRuleDefinition.ruleName.includes('/')) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`stylelint requires plugin rules to be namespaced, i.e. only \`plugin-namespace/plugin-rule-name\` plugin rule names are supported. The plugin rule "${pluginRuleDefinition.ruleName}" does not do this, so will not work. Please file an issue with the plugin.`);
            }
            pluginFunctions[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule;
        }
    }
    config.pluginFunctions = pluginFunctions;
    return config;
}
/**
 * @param {StylelintConfig} config
 * @returns {Promise<StylelintConfig>}
 */ async function addProcessorFunctions(config) {
    if (!config.processors) {
        return config;
    }
    const processorPromises = config.processors.map(async (processorLookup)=>{
        let processor = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$dynamicImport$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(processorLookup);
        processor = processor.default ?? processor;
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isFunction"])(processor)) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`The processor "${processorLookup}" must be a function`);
        }
        const { name, postprocess } = processor();
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"])(name) || !name) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`The processor "${processorLookup}" must return an object with the "name" property`);
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isFunction"])(postprocess)) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`The processor "${processorLookup}" must return an object with the "postprocess" property`);
        }
        return {
            name,
            postprocess
        };
    });
    /** @type {StylelintConfig['_processorFunctions']} */ const processorFunctions = new Map();
    (await Promise.all(processorPromises)).forEach(({ name, postprocess })=>{
        if (name) {
            processorFunctions.set(name, postprocess);
        }
    });
    config._processorFunctions = processorFunctions;
    return config;
}
function applyOverrides(fullConfig, rootConfigDir, filePath) {
    let { overrides, ...config } = fullConfig;
    if (!overrides) {
        return config;
    }
    if (!Array.isArray(overrides)) {
        throw new TypeError('The `overrides` configuration property should be an array, e.g. { "overrides": [{ "files": "*.css", "rules": {} }] }.');
    }
    /** @type {(glob: string) => boolean} */ const nonegateGlob = (glob)=>!glob.startsWith('!');
    for (const override of overrides){
        const { files, ...configOverrides } = override;
        if (!files) {
            throw new Error('Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { "overrides": [{ "files": "*.css", "rules": {} }] }.');
        }
        const fileList = [
            files
        ].flat();
        const absoluteGlobs = fileList.map((glob)=>absolutizeGlob(glob, rootConfigDir));
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$micromatch$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].isMatch(filePath, absoluteGlobs, {
            dot: true
        }) || // E.g. `*.css` matches any CSS files in any directories.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$micromatch$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].isMatch(filePath, fileList.filter(nonegateGlob), {
            dot: true,
            basename: true
        })) {
            config = mergeConfigs(config, configOverrides);
        }
    }
    return config;
}
/**
 * Add options to the config
 *
 * @param {StylelintInternalApi} stylelint
 * @param {StylelintConfig} config
 *
 * @returns {StylelintConfig}
 */ function addOptions(stylelint, config) {
    const augmentedConfig = {
        ...config
    };
    const subset = [
        'customSyntax',
        'fix',
        'computeEditInfo',
        'ignoreDisables',
        'quiet',
        'reportDescriptionlessDisables',
        'reportInvalidScopeDisables',
        'reportNeedlessDisables',
        'reportUnscopedDisables',
        'validate'
    ];
    /** @type {Partial<StylelintConfig>} */ const options = {
        ...stylelint._options,
        // Override fix to match Config type.
        fix: stylelint._options.fix ? Boolean(stylelint._options.fix) : undefined
    };
    /**
	 * @template T
	 * @param {T extends typeof subset[number] ? T : never} key
	 */ const addOption = (key)=>{
        const value = options[key];
        if (value) {
            augmentedConfig[key] = value;
        }
    };
    subset.forEach((key)=>addOption(key));
    return augmentedConfig;
}
}}),
"[project]/node_modules/stylelint/lib/createStylelint.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>createStylelint)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cosmiconfig$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cosmiconfig/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$FileCache$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/FileCache.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$augmentConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/augmentConfig.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$FileCache$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__
]);
([__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$FileCache$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
;
;
;
;
const IS_TEST = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].env.NODE_ENV === 'test';
const STOP_DIR = IS_TEST ? __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd() : undefined;
function createStylelint(options = {}) {
    // [INSERT HERE] CommonJS deprecation code
    const cwd = options.cwd || __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd();
    return {
        _options: {
            ...options,
            cwd
        },
        _extendExplorer: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cosmiconfig$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["cosmiconfig"])('', {
            transform: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$augmentConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["augmentConfigExtended"])(cwd),
            stopDir: STOP_DIR,
            searchStrategy: 'global'
        }),
        _specifiedConfigCache: new Map(),
        _postcssResultCache: new Map(),
        _fileCache: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$FileCache$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"](options.cacheLocation, options.cacheStrategy, cwd)
    };
}
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),
"[project]/node_modules/stylelint/lib/formatters/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @type {import('stylelint').PublicApi['formatters']} */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const formatters = {
    get compact () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/formatters/compactFormatter.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get github () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/formatters/githubFormatter.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get json () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/formatters/jsonFormatter.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get string () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/formatters/stringFormatter.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get tap () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/formatters/tapFormatter.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get unix () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/formatters/unixFormatter.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    },
    get verbose () {
        return __turbopack_context__.r("[project]/node_modules/stylelint/lib/formatters/verboseFormatter.mjs [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default);
    }
};
const __TURBOPACK__default__export__ = formatters;
}}),
"[project]/node_modules/stylelint/lib/reference/properties.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @type {ReadonlySet<string>} */ __turbopack_context__.s({
    "acceptCustomIdentsProperties": (()=>acceptCustomIdentsProperties),
    "longhandSubPropertiesOfShorthandProperties": (()=>longhandSubPropertiesOfShorthandProperties),
    "longhandTimeProperties": (()=>longhandTimeProperties),
    "marginContextProperties": (()=>marginContextProperties),
    "pageContextProperties": (()=>pageContextProperties),
    "shorthandTimeProperties": (()=>shorthandTimeProperties),
    "shorthandToResetToInitialProperty": (()=>shorthandToResetToInitialProperty),
    "singleValueColorProperties": (()=>singleValueColorProperties)
});
const acceptCustomIdentsProperties = new Set([
    'animation',
    'animation-name',
    'font',
    'font-family',
    'counter-increment',
    'grid-row',
    'grid-column',
    'grid-area',
    'list-style',
    'list-style-type'
]);
const shorthandToResetToInitialProperty = new Map([
    [
        'border',
        new Set([
            'border-image',
            'border-image-outset',
            'border-image-repeat',
            'border-image-slice',
            'border-image-source',
            'border-image-width'
        ])
    ],
    [
        /** @see https://www.w3.org/TR/css-fonts-4/#font-prop */ 'font',
        new Set([
            // prettier-ignore
            'font-feature-settings',
            'font-kerning',
            'font-language-override',
            'font-optical-sizing',
            'font-size-adjust',
            'font-variant-alternates',
            'font-variant-caps',
            'font-variant-east-asian',
            'font-variant-emoji',
            'font-variant-ligatures',
            'font-variant-numeric',
            'font-variant-position',
            'font-variation-settings'
        ])
    ]
]);
const longhandSubPropertiesOfShorthandProperties = new Map([
    // Sort alphabetically
    [
        'animation',
        new Set([
            // prettier-ignore
            'animation-name',
            'animation-duration',
            'animation-timing-function',
            'animation-delay',
            'animation-iteration-count',
            'animation-direction',
            'animation-fill-mode',
            'animation-play-state'
        ])
    ],
    [
        'background',
        new Set([
            // prettier-ignore
            'background-image',
            'background-size',
            'background-position',
            'background-repeat',
            'background-origin',
            'background-clip',
            'background-attachment',
            'background-color'
        ])
    ],
    [
        'border',
        new Set([
            // prettier-ignore
            'border-top-width',
            'border-right-width',
            'border-bottom-width',
            'border-left-width',
            'border-top-style',
            'border-right-style',
            'border-bottom-style',
            'border-left-style',
            'border-top-color',
            'border-right-color',
            'border-bottom-color',
            'border-left-color',
            'border-width',
            'border-style',
            'border-color'
        ])
    ],
    [
        'border-block',
        new Set([
            // prettier-ignore
            'border-block-width',
            'border-block-style',
            'border-block-color'
        ])
    ],
    [
        'border-block-end',
        new Set([
            // prettier-ignore
            'border-block-end-width',
            'border-block-end-style',
            'border-block-end-color'
        ])
    ],
    [
        'border-block-start',
        new Set([
            // prettier-ignore
            'border-block-start-width',
            'border-block-start-style',
            'border-block-start-color'
        ])
    ],
    [
        'border-bottom',
        new Set([
            // prettier-ignore
            'border-bottom-width',
            'border-bottom-style',
            'border-bottom-color'
        ])
    ],
    [
        'border-color',
        new Set([
            // prettier-ignore
            'border-top-color',
            'border-right-color',
            'border-bottom-color',
            'border-left-color'
        ])
    ],
    [
        'border-image',
        new Set([
            // prettier-ignore
            'border-image-source',
            'border-image-slice',
            'border-image-width',
            'border-image-outset',
            'border-image-repeat'
        ])
    ],
    [
        'border-inline',
        new Set([
            // prettier-ignore
            'border-inline-width',
            'border-inline-style',
            'border-inline-color'
        ])
    ],
    [
        'border-inline-end',
        new Set([
            // prettier-ignore
            'border-inline-end-width',
            'border-inline-end-style',
            'border-inline-end-color'
        ])
    ],
    [
        'border-inline-start',
        new Set([
            // prettier-ignore
            'border-inline-start-width',
            'border-inline-start-style',
            'border-inline-start-color'
        ])
    ],
    [
        'border-left',
        new Set([
            // prettier-ignore
            'border-left-width',
            'border-left-style',
            'border-left-color'
        ])
    ],
    [
        'border-radius',
        new Set([
            // prettier-ignore
            'border-top-left-radius',
            'border-top-right-radius',
            'border-bottom-right-radius',
            'border-bottom-left-radius'
        ])
    ],
    [
        'border-right',
        new Set([
            // prettier-ignore
            'border-right-width',
            'border-right-style',
            'border-right-color'
        ])
    ],
    [
        'border-style',
        new Set([
            // prettier-ignore
            'border-top-style',
            'border-right-style',
            'border-bottom-style',
            'border-left-style'
        ])
    ],
    [
        'border-top',
        new Set([
            // prettier-ignore
            'border-top-width',
            'border-top-style',
            'border-top-color'
        ])
    ],
    [
        'border-width',
        new Set([
            // prettier-ignore
            'border-top-width',
            'border-right-width',
            'border-bottom-width',
            'border-left-width'
        ])
    ],
    [
        'column-rule',
        new Set([
            // prettier-ignore
            'column-rule-width',
            'column-rule-style',
            'column-rule-color'
        ])
    ],
    [
        'columns',
        new Set([
            // prettier-ignore
            'column-width',
            'column-count'
        ])
    ],
    [
        'flex',
        new Set([
            // prettier-ignore
            'flex-grow',
            'flex-shrink',
            'flex-basis'
        ])
    ],
    [
        'flex-flow',
        new Set([
            // prettier-ignore
            'flex-direction',
            'flex-wrap'
        ])
    ],
    [
        'font',
        new Set([
            // prettier-ignore
            'font-style',
            /**
			 * reset explicitly: normal | small-caps
			 * reset implicitly: all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps
			 * i.e. either way it will be reset
			 * {@link https://www.w3.org/TR/css-fonts-4/#font-variant-prop World Wide Web Consortium}
			 */ 'font-variant',
            'font-weight',
            'font-stretch',
            'font-size',
            'line-height',
            'font-family'
        ])
    ],
    [
        'font-synthesis',
        new Set([
            // prettier-ignore
            'font-synthesis-weight',
            'font-synthesis-style',
            'font-synthesis-small-caps'
        ])
    ],
    [
        'font-variant',
        new Set([
            // prettier-ignore
            'font-variant-ligatures',
            'font-variant-position',
            'font-variant-caps',
            'font-variant-numeric',
            'font-variant-alternates',
            'font-variant-east-asian',
            'font-variant-emoji'
        ])
    ],
    [
        'gap',
        new Set([
            // prettier-ignore
            'row-gap',
            'column-gap'
        ])
    ],
    [
        'grid',
        new Set([
            // prettier-ignore
            'grid-template-rows',
            'grid-template-columns',
            'grid-template-areas',
            'grid-auto-rows',
            'grid-auto-columns',
            'grid-auto-flow',
            'grid-column-gap',
            'grid-row-gap'
        ])
    ],
    [
        'grid-area',
        new Set([
            // prettier-ignore
            'grid-row-start',
            'grid-column-start',
            'grid-row-end',
            'grid-column-end'
        ])
    ],
    [
        'grid-column',
        new Set([
            // prettier-ignore
            'grid-column-start',
            'grid-column-end'
        ])
    ],
    [
        'grid-gap',
        new Set([
            // prettier-ignore
            'grid-row-gap',
            'grid-column-gap'
        ])
    ],
    [
        'grid-row',
        new Set([
            // prettier-ignore
            'grid-row-start',
            'grid-row-end'
        ])
    ],
    [
        'grid-template',
        new Set([
            // prettier-ignore
            'grid-template-columns',
            'grid-template-rows',
            'grid-template-areas'
        ])
    ],
    [
        'inset',
        new Set([
            // prettier-ignore
            'top',
            'right',
            'bottom',
            'left'
        ])
    ],
    [
        'inset-block',
        new Set([
            // prettier-ignore
            'inset-block-start',
            'inset-block-end'
        ])
    ],
    [
        'inset-inline',
        new Set([
            // prettier-ignore
            'inset-inline-start',
            'inset-inline-end'
        ])
    ],
    [
        'list-style',
        new Set([
            // prettier-ignore
            'list-style-type',
            'list-style-position',
            'list-style-image'
        ])
    ],
    [
        'margin',
        new Set([
            // prettier-ignore
            'margin-top',
            'margin-right',
            'margin-bottom',
            'margin-left'
        ])
    ],
    [
        'margin-block',
        new Set([
            // prettier-ignore
            'margin-block-start',
            'margin-block-end'
        ])
    ],
    [
        'margin-inline',
        new Set([
            // prettier-ignore
            'margin-inline-start',
            'margin-inline-end'
        ])
    ],
    [
        'mask',
        new Set([
            // prettier-ignore
            'mask-image',
            'mask-mode',
            'mask-position',
            'mask-size',
            'mask-repeat',
            'mask-origin',
            'mask-clip',
            'mask-composite'
        ])
    ],
    [
        'outline',
        new Set([
            // prettier-ignore
            'outline-color',
            'outline-style',
            'outline-width'
        ])
    ],
    [
        'overflow',
        new Set([
            // prettier-ignore
            'overflow-x',
            'overflow-y'
        ])
    ],
    [
        'overscroll-behavior',
        new Set([
            // prettier-ignore
            'overscroll-behavior-x',
            'overscroll-behavior-y'
        ])
    ],
    [
        'padding',
        new Set([
            // prettier-ignore
            'padding-top',
            'padding-right',
            'padding-bottom',
            'padding-left'
        ])
    ],
    [
        'padding-block',
        new Set([
            // prettier-ignore
            'padding-block-start',
            'padding-block-end'
        ])
    ],
    [
        'padding-inline',
        new Set([
            // prettier-ignore
            'padding-inline-start',
            'padding-inline-end'
        ])
    ],
    [
        'place-content',
        new Set([
            // prettier-ignore
            'align-content',
            'justify-content'
        ])
    ],
    [
        'place-items',
        new Set([
            // prettier-ignore
            'align-items',
            'justify-items'
        ])
    ],
    [
        'place-self',
        new Set([
            // prettier-ignore
            'align-self',
            'justify-self'
        ])
    ],
    [
        'scroll-margin',
        new Set([
            // prettier-ignore
            'scroll-margin-top',
            'scroll-margin-right',
            'scroll-margin-bottom',
            'scroll-margin-left'
        ])
    ],
    [
        'scroll-margin-block',
        new Set([
            // prettier-ignore
            'scroll-margin-block-start',
            'scroll-margin-block-end'
        ])
    ],
    [
        'scroll-margin-inline',
        new Set([
            // prettier-ignore
            'scroll-margin-inline-start',
            'scroll-margin-inline-end'
        ])
    ],
    [
        'scroll-padding',
        new Set([
            // prettier-ignore
            'scroll-padding-top',
            'scroll-padding-right',
            'scroll-padding-bottom',
            'scroll-padding-left'
        ])
    ],
    [
        'scroll-padding-block',
        new Set([
            // prettier-ignore
            'scroll-padding-block-start',
            'scroll-padding-block-end'
        ])
    ],
    [
        'scroll-padding-inline',
        new Set([
            // prettier-ignore
            'scroll-padding-inline-start',
            'scroll-padding-inline-end'
        ])
    ],
    [
        'text-decoration',
        new Set([
            // prettier-ignore
            'text-decoration-line',
            'text-decoration-style',
            'text-decoration-color',
            'text-decoration-thickness'
        ])
    ],
    [
        'text-emphasis',
        new Set([
            // prettier-ignore
            'text-emphasis-style',
            'text-emphasis-color'
        ])
    ],
    [
        'transition',
        new Set([
            // prettier-ignore
            'transition-property',
            'transition-duration',
            'transition-timing-function',
            'transition-delay'
        ])
    ]
]);
const singleValueColorProperties = new Set([
    'accent-color',
    'background-color',
    'border-block-color',
    'border-block-end-color',
    'border-block-start-color',
    'border-bottom-color',
    'border-inline-color',
    'border-inline-end-color',
    'border-inline-start-color',
    'border-left-color',
    'border-right-color',
    'border-top-color',
    'caret-color',
    'color',
    'column-rule-color',
    'outline-color',
    'text-decoration-color',
    'text-emphasis-color',
    // SVG
    'flood-color',
    'lighting-color',
    'stop-color'
]);
const longhandTimeProperties = new Set([
    'transition-duration',
    'transition-delay',
    'animation-duration',
    'animation-delay'
]);
const shorthandTimeProperties = new Set([
    'transition',
    'animation'
]);
const pageContextProperties = new Set([
    'direction',
    'background-color',
    'background-image',
    'background-repeat',
    'background-attachment',
    'background-position',
    'background',
    'border-top-width',
    'border-right-width',
    'border-bottom-width',
    'border-left-width',
    'border-width',
    'border-top-color',
    'border-right-color',
    'border-bottom-color',
    'border-left-color',
    'border-color',
    'border-top-style',
    'border-right-style',
    'border-bottom-style',
    'border-left-style',
    'border-style',
    'border-top',
    'border-right',
    'border-bottom',
    'border-left',
    'border',
    'counter-reset',
    'counter-increment',
    'color',
    'font-family',
    'font-size',
    'font-style',
    'font-variant',
    'font-weight',
    'font',
    'height',
    'min-height',
    'max-height',
    'line-height',
    'margin-top',
    'margin-right',
    'margin-bottom',
    'margin-left',
    'margin',
    'outline-width',
    'outline-style',
    'outline-color',
    'outline',
    'padding-top',
    'padding-right',
    'padding-bottom',
    'padding-left',
    'padding',
    'quotes',
    'letter-spacing',
    'text-align',
    'text-decoration',
    'text-indent',
    'text-transform',
    'white-space',
    'word-spacing',
    'visibility',
    'width',
    'min-width',
    'max-width'
]);
const marginContextProperties = new Set([
    'direction',
    'unicode-bidi',
    'background-color',
    'background-image',
    'background-repeat',
    'background-attachment',
    'background-position',
    'background',
    'border-top-width',
    'border-right-width',
    'border-bottom-width',
    'border-left-width',
    'border-width',
    'border-top-color',
    'border-right-color',
    'border-bottom-color',
    'border-left-color',
    'border-color',
    'border-top-style',
    'border-right-style',
    'border-bottom-style',
    'border-left-style',
    'border-style',
    'border-top',
    'border-right',
    'border-bottom',
    'border-left',
    'border',
    'counter-reset',
    'counter-increment',
    'content',
    'color',
    'font-family',
    'font-size',
    'font-style',
    'font-variant',
    'font-weight',
    'font',
    'height',
    'min-height',
    'max-height',
    'line-height',
    'margin-top',
    'margin-right',
    'margin-bottom',
    'margin-left',
    'margin',
    'outline-width',
    'outline-style',
    'outline-color',
    'outline',
    'overflow',
    'padding-top',
    'padding-right',
    'padding-bottom',
    'padding-left',
    'padding',
    'quotes',
    'letter-spacing',
    'text-align',
    'text-decoration',
    'text-indent',
    'text-transform',
    'white-space',
    'word-spacing',
    'vertical-align',
    'visibility',
    'width',
    'min-width',
    'max-width',
    'z-index'
]);
}}),
"[project]/node_modules/stylelint/lib/utils/matchesStringOrRegExp.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Compares a string to a second value that, if it fits a certain convention,
 * is converted to a regular expression before the comparison.
 * If it doesn't fit the convention, then two strings are compared.
 *
 * Any strings starting and ending with `/` are interpreted
 * as regular expressions.
 *
 * @typedef {{match: string, pattern: (string | RegExp), substring: string} | false} MatchResult
 *
 * @param {string | Array<string>} input
 * @param {string | RegExp | Array<string | RegExp>} comparison
 * @returns {MatchResult}
 */ __turbopack_context__.s({
    "default": (()=>matchesStringOrRegExp)
});
function matchesStringOrRegExp(input, comparison) {
    if (!Array.isArray(input)) {
        return testAgainstStringOrRegExpOrArray(input, comparison);
    }
    for (const inputItem of input){
        const testResult = testAgainstStringOrRegExpOrArray(inputItem, comparison);
        if (testResult) {
            return testResult;
        }
    }
    return false;
}
/**
 * @param {string} value
 * @param {string | RegExp | Array<string | RegExp>} comparison
 * @returns {MatchResult}
 */ function testAgainstStringOrRegExpOrArray(value, comparison) {
    if (!Array.isArray(comparison)) {
        return testAgainstStringOrRegExp(value, comparison);
    }
    for (const comparisonItem of comparison){
        const testResult = testAgainstStringOrRegExp(value, comparisonItem);
        if (testResult) {
            return testResult;
        }
    }
    return false;
}
/**
 * @param {string} value
 * @param {RegExp} pattern
 * @returns {MatchResult}
 */ function matchValue(value, pattern) {
    const match = value.match(pattern);
    return match ? {
        match: value,
        pattern,
        substring: match[0] ?? ''
    } : false;
}
/**
 * @param {string} value
 * @param {string | RegExp} comparison
 * @returns {MatchResult}
 */ function testAgainstStringOrRegExp(value, comparison) {
    // If it's a RegExp, test directly
    if (comparison instanceof RegExp) {
        return matchValue(value, comparison);
    }
    // Check if it's RegExp in a string
    const regexFlag = 'i';
    const comparisonIsRegex = comparison.startsWith('/') && (comparison.endsWith('/') || comparison.endsWith(`/${regexFlag}`));
    // If so, create a new RegExp from it
    if (comparisonIsRegex) {
        const pattern = comparison.endsWith(regexFlag) ? new RegExp(comparison.slice(1, -2), regexFlag) : new RegExp(comparison.slice(1, -1));
        const result = matchValue(value, pattern);
        if (result) {
            result.pattern = comparison;
        }
        return result;
    }
    // Otherwise, it's a string. Do a strict comparison
    return value === comparison ? {
        match: value,
        pattern: comparison,
        substring: value
    } : false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>optionsMatches)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$matchesStringOrRegExp$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/matchesStringOrRegExp.mjs [app-route] (ecmascript)");
;
function optionsMatches(options, propertyName, input) {
    return Boolean(options && options[propertyName] && typeof input === 'string' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$matchesStringOrRegExp$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(input, options[propertyName]));
}
}}),
"[project]/node_modules/stylelint/lib/utils/reportCommentProblem.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>reportCommentProblem)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
;
function reportCommentProblem({ rule, message, severity, node, postcssResult }) {
    const { source } = node;
    // If the comment doesn't have a location, we can't report a useful error.
    // In practice we expect all comments to have locations, though.
    if (!source?.start) return;
    postcssResult.warn(message, {
        rule,
        severity,
        node,
        start: source.start,
        end: source.end
    });
    switch(severity){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_ERROR"]:
            postcssResult.stylelint.stylelintError = true;
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_WARNING"]:
            postcssResult.stylelint.stylelintWarning = true;
            break;
        default:
            break;
    }
}
}}),
"[project]/node_modules/stylelint/lib/utils/arrayEqual.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Tests if two arrays are equal.
 *
 * @param {unknown} a
 * @param {unknown} b
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>arrayEqual)
});
function arrayEqual(a, b) {
    if (!Array.isArray(a) || !Array.isArray(b)) return false;
    if (a.length !== b.length) return false;
    return a.every((elem, index)=>elem === b[index]);
}
}}),
"[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>validateOptions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$arrayEqual$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/arrayEqual.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
;
;
const IGNORED_OPTIONS = new Set([
    'severity',
    'message',
    'url',
    'reportDisables',
    'disableFix'
]);
const REPORT_OPTIONS = new Set([
    'reportDescriptionlessDisables',
    'reportInvalidScopeDisables',
    'reportNeedlessDisables',
    'reportUnscopedDisables'
]);
function validateOptions(result, ruleName, ...optionDescriptions) {
    const mustValidate = result.stylelint.config?.validate;
    if (!mustValidate) return true;
    let noErrors = true;
    for (const optionDescription of optionDescriptions){
        validate(optionDescription, ruleName, complain);
    }
    /**
	 * @param {string} message
	 */ function complain(message) {
        noErrors = false;
        result.warn(message, {
            stylelintType: 'invalidOption'
        });
        result.stylelint.stylelintError = true;
    }
    return noErrors;
}
/**
 * @param {RuleOptions} opts
 * @param {string} ruleName
 * @param {(message: string) => void} complain
 */ function validate({ possible, actual, optional }, ruleName, complain) {
    if (actual === false && !REPORT_OPTIONS.has(ruleName)) {
        return complain(`Invalid option value "false" for rule "${ruleName}". Are you trying to disable this rule? If so use "null" instead`);
    }
    // `null` means to turn off a rule.
    if (actual === null || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$arrayEqual$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(actual, [
        null
    ])) {
        return;
    }
    const nothingPossible = possible === undefined || possible === null || Array.isArray(possible) && possible.length === 0 || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(possible) && Object.keys(possible).length === 0;
    if (nothingPossible && actual === true) {
        return;
    }
    if (actual === undefined) {
        if (nothingPossible || optional) {
            return;
        }
        complain(`Expected option value for rule "${ruleName}"`);
        return;
    }
    if (nothingPossible) {
        if (optional) {
            complain(`Incorrect configuration for rule "${ruleName}". Rule should have "possible" values for options validation`);
            return;
        }
        complain(`Unexpected option value ${stringify(actual)} for rule "${ruleName}"`);
        return;
    }
    if (typeof possible === 'function') {
        if (!possible(actual)) {
            complain(`Invalid option ${stringify(actual)} for rule "${ruleName}"`);
        }
        return;
    }
    // If `possible` is an array instead of an object ...
    if (Array.isArray(possible)) {
        for (const a of [
            actual
        ].flat()){
            if (isValid(possible, a)) {
                continue;
            }
            complain(`Invalid option value ${stringify(a)} for rule "${ruleName}"`);
        }
        return;
    }
    // If actual is NOT an object ...
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(actual) || typeof actual !== 'object' || actual === null) {
        complain(`Invalid option value ${stringify(actual)} for rule "${ruleName}": should be an object`);
        return;
    }
    for (const [optionName, optionValue] of Object.entries(actual)){
        if (IGNORED_OPTIONS.has(optionName)) {
            continue;
        }
        const possibleValue = possible && possible[optionName];
        if (!possibleValue) {
            complain(`Invalid option name "${optionName}" for rule "${ruleName}"`);
            continue;
        }
        for (const a of [
            optionValue
        ].flat()){
            if (isValid(possibleValue, a)) {
                continue;
            }
            complain(`Invalid value ${stringify(a)} for option "${optionName}" of rule "${ruleName}"`);
        }
    }
}
/**
 * @param {RuleOptionsPossible | RuleOptionsPossible[]} possible
 * @param {unknown} actual
 * @returns {boolean}
 */ function isValid(possible, actual) {
    for (const possibility of [
        possible
    ].flat()){
        if (typeof possibility === 'function' && possibility(actual)) {
            return true;
        }
        if (actual === possibility) {
            return true;
        }
    }
    return false;
}
/**
 * @param {unknown} value
 * @returns {string}
 */ function stringify(value) {
    if (typeof value === 'string') {
        return `"${value}"`;
    }
    return `"${JSON.stringify(value)}"`;
}
}}),
"[project]/node_modules/stylelint/lib/validateDisableSettings.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>validateDisableSettings)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
;
;
;
function validateDisableSettings(result, field) {
    const stylelintResult = result.stylelint;
    // Files with linting errors may not have configs associated with them.
    if (!stylelintResult.config) return [];
    const rawSettings = stylelintResult.config[field];
    /** @type {boolean} */ let enabled;
    /** @type {DisableOptions} */ let options;
    if (Array.isArray(rawSettings)) {
        enabled = rawSettings[0];
        options = rawSettings[1] || {};
    } else {
        enabled = rawSettings || false;
        options = {};
    }
    const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, field, {
        actual: enabled,
        possible: [
            true,
            false
        ]
    }, {
        actual: options,
        possible: {
            except: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"],
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRegExp"]
            ]
        }
    });
    if (!validOptions) return [];
    // If the check is disabled with no exceptions, there's no reason to run
    // it at all.
    if (!enabled && !options.except) return [];
    return [
        enabled,
        {
            except: options.except || [],
            severity: options.severity || stylelintResult.config.defaultSeverity || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_SEVERITY"]
        }
    ];
}
}}),
"[project]/node_modules/stylelint/lib/descriptionlessDisables.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>descriptionlessDisables)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/reportCommentProblem.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/validateDisableSettings.mjs [app-route] (ecmascript)");
;
;
;
;
function descriptionlessDisables(postcssResult) {
    const [enabled, options] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(postcssResult, 'reportDescriptionlessDisables');
    if (!options) return;
    /** @type {Set<import('postcss').Node>} */ const alreadyReported = new Set();
    for (const [rule, ruleRanges] of Object.entries(postcssResult.stylelint.disabledRanges)){
        for (const range of ruleRanges){
            if (range.description) continue;
            const node = range.node;
            if (alreadyReported.has(node)) continue;
            if (enabled === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(options, 'except', rule)) {
                // An 'all' rule will get copied for each individual rule. If the
                // configuration is `[false, {except: ['specific-rule']}]`, we
                // don't want to report the copies that match except, so we record
                // the comment as already reported.
                if (!enabled && rule === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]) alreadyReported.add(node);
                continue;
            }
            alreadyReported.add(node);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                rule: '--report-descriptionless-disables',
                message: `Disable for "${rule}" is missing a description`,
                severity: options.severity,
                node,
                postcssResult
            });
        }
    }
}
}}),
"[project]/node_modules/stylelint/lib/getConfigForFile.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getConfigForFile)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cosmiconfig$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cosmiconfig/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$augmentConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/augmentConfig.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/configurationError.mjs [app-route] (ecmascript)");
;
;
;
;
;
const IS_TEST = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].env.NODE_ENV === 'test';
const STOP_DIR = IS_TEST ? __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd() : undefined;
async function getConfigForFile(stylelint, searchPath = stylelint._options.cwd, filePath) {
    const optionsConfig = stylelint._options.config;
    const cwd = stylelint._options.cwd;
    if (optionsConfig) {
        const filePathAsCacheKey = filePath ?? '';
        /** @type {Map<string, StylelintCosmiconfigResult>} */ const cachedForFiles = stylelint._specifiedConfigCache.get(optionsConfig) ?? new Map();
        const cached = cachedForFiles.get(filePathAsCacheKey);
        if (cached) {
            return cached;
        }
        const augmentedResult = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$augmentConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["augmentConfigFull"])(stylelint, filePath, {
            config: optionsConfig,
            // Add the extra path part so that we can get the directory without being
            // confused
            filepath: (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["join"])(cwd, 'argument-config')
        });
        cachedForFiles.set(filePathAsCacheKey, augmentedResult);
        stylelint._specifiedConfigCache.set(optionsConfig, cachedForFiles);
        return augmentedResult;
    }
    const configExplorer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cosmiconfig$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["cosmiconfig"])('stylelint', {
        transform: (cosmiconfigResult)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$augmentConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["augmentConfigFull"])(stylelint, filePath, cosmiconfigResult),
        stopDir: STOP_DIR,
        searchStrategy: 'global'
    });
    let config = stylelint._options.configFile ? await configExplorer.load(stylelint._options.configFile) : await configExplorer.search(searchPath);
    if (!config) {
        config = await configExplorer.search(cwd);
    }
    if (!config) {
        return Promise.reject((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`No configuration provided${searchPath ? ` for ${searchPath}` : ''}`));
    }
    return config;
}
}}),
"[project]/node_modules/stylelint/lib/utils/normalizeFixMode.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>normalizeFixMode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
;
function normalizeFixMode(fix) {
    if (fix === true || fix === 'true' || fix === '' || fix === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_FIX_MODE"]) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_FIX_MODE"];
    }
    if (fix === 'strict') {
        return 'strict';
    }
    return undefined;
}
}}),
"[project]/node_modules/stylelint/lib/getPostcssResult.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>getPostcssResult)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__ = __turbopack_context__.i("[externals]/postcss [external] (postcss, esm_import)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$dynamicImport$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/dynamicImport.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getModulePath$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getModulePath.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$normalizeFixMode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/normalizeFixMode.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__
]);
([__TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
;
;
;
;
;
/** @import {Result, Syntax} from 'postcss' */ /** @import {CustomSyntax, GetPostcssOptions, InternalApi as StylelintInternalApi} from 'stylelint' */ const postcssProcessor = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__["default"])();
async function getPostcssResult(stylelint, { customSyntax, filePath, code } = {}) {
    const cached = filePath ? stylelint._postcssResultCache.get(filePath) : undefined;
    if (cached) {
        return cached;
    }
    const fix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$normalizeFixMode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint._options.fix);
    const syntax = await (customSyntax ? getCustomSyntax(customSyntax, stylelint._options.configBasedir) : cssSyntax(fix === 'lax'));
    const postcssOptions = {
        from: filePath,
        syntax
    };
    /** @type {string | undefined} */ let getCode;
    if (code !== undefined) {
        getCode = code;
    } else if (filePath) {
        getCode = await (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__["readFile"])(filePath, 'utf8');
    }
    if (getCode === undefined) {
        throw new Error('code or filePath required');
    }
    const postcssResult = await postcssProcessor.process(getCode, postcssOptions).async();
    if (filePath) {
        stylelint._postcssResultCache.set(filePath, postcssResult);
    }
    return postcssResult;
}
/**
 * @param {CustomSyntax} customSyntax
 * @param {string | undefined} basedir
 * @returns {Promise<Syntax>}
 */ async function getCustomSyntax(customSyntax, basedir) {
    if (typeof customSyntax === 'string') {
        const customSyntaxLookup = basedir ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getModulePath$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basedir, customSyntax) : customSyntax;
        let resolved;
        try {
            resolved = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$dynamicImport$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(customSyntaxLookup);
            resolved = resolved.default ?? resolved;
        } catch (error) {
            if (error && typeof error === 'object' && 'code' in error && // TODO: Remove 'MODULE_NOT_FOUND' when we drop the CommonJS support.
            // See https://nodejs.org/api/errors.html#module_not_found
            (error.code === 'MODULE_NOT_FOUND' || error.code === 'ERR_MODULE_NOT_FOUND') && 'message' in error && typeof error.message === 'string' && error.message.includes(customSyntax)) {
                throw new Error(`Cannot resolve custom syntax module "${customSyntax}". Check that module "${customSyntax}" is available and spelled correctly.\n\nCaused by: ${error}`);
            }
            throw error;
        }
        /*
		 * PostCSS allows for syntaxes that only contain a parser, however,
		 * it then expects the syntax to be set as the `parse` option.
		 */ if (!resolved.parse) {
            resolved = {
                parse: resolved,
                stringify: __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__["default"].stringify
            };
        }
        return resolved;
    }
    if (typeof customSyntax === 'object') {
        if (typeof customSyntax.parse === 'function') {
            return {
                ...customSyntax
            };
        }
        throw new TypeError('An object provided to the "customSyntax" option must have a "parse" property. Ensure the "parse" property exists and its value is a function.');
    }
    throw new Error('Custom syntax must be a string or a Syntax object');
}
/**
 * @param {boolean} fix
 * @returns {Promise<Syntax>}
 */ async function cssSyntax(fix) {
    const parse = await (fix ? __turbopack_context__.r("[project]/node_modules/postcss-safe-parser/lib/safe-parse.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i).then((m)=>m.default) : __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__["default"].parse);
    return {
        parse,
        stringify: __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__["default"].stringify
    };
}
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),
"[project]/node_modules/stylelint/lib/invalidScopeDisables.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>invalidScopeDisables)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/reportCommentProblem.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/validateDisableSettings.mjs [app-route] (ecmascript)");
;
;
;
;
function invalidScopeDisables(postcssResult) {
    const [enabled, options] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(postcssResult, 'reportInvalidScopeDisables');
    if (!options) return;
    const configRules = postcssResult.stylelint.config?.rules;
    if (!configRules) return;
    const usedRules = new Set(Object.keys(configRules));
    usedRules.add(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]);
    for (const [rule, ruleRanges] of Object.entries(postcssResult.stylelint.disabledRanges)){
        if (usedRules.has(rule)) continue;
        if (enabled === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(options, 'except', rule)) continue;
        for (const range of ruleRanges){
            if (!range.strictStart && !range.strictEnd) continue;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                rule: '--report-invalid-scope-disables',
                message: `Rule "${rule}" isn't enabled`,
                severity: options.severity,
                node: range.node,
                postcssResult
            });
        }
    }
}
}}),
"[project]/node_modules/stylelint/lib/utils/filterFilePaths.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>filterFilePaths)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ignore$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ignore/index.js [app-route] (ecmascript)");
;
function filterFilePaths(ignorer, filePaths) {
    const validForIgnore = filePaths.filter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ignore$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].isPathValid);
    // Paths which starts with `..` are not valid for `ignore`, e. g. `../style.css`
    const notValidForIgnore = new Set(filePaths.filter((p)=>!validForIgnore.includes(p)));
    const filteredByIgnore = new Set(ignorer.filter(validForIgnore));
    // Preserving files order, while removing paths which were filtered by `ignore`
    return filePaths.filter((p)=>notValidForIgnore.has(p) || filteredByIgnore.has(p));
}
}}),
"[project]/node_modules/stylelint/lib/utils/getFileIgnorer.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getFileIgnorer)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs [external] (node:fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ignore$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ignore/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
;
;
;
;
function getFileIgnorer({ ignorePath, ignorePattern, cwd }) {
    const ignorer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ignore$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])();
    const ignorePaths = [
        ignorePath || []
    ].flat();
    if (ignorePaths.length === 0) {
        ignorePaths.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_IGNORE_FILENAME"]);
    }
    for (const ignoreFilePath of ignorePaths){
        const absoluteIgnoreFilePath = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(ignoreFilePath) ? ignoreFilePath : (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["resolve"])(cwd, ignoreFilePath);
        if (!(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["existsSync"])(absoluteIgnoreFilePath)) continue;
        const ignoreText = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["readFileSync"])(absoluteIgnoreFilePath, {
            // utf must remain lowercased to hit the fast path
            // see nodejs/node#49888
            encoding: 'utf8',
            flag: 'r'
        });
        ignorer.add(ignoreText);
    }
    if (ignorePattern) ignorer.add(ignorePattern);
    return ignorer;
}
}}),
"[project]/node_modules/stylelint/lib/isPathIgnored.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isPathIgnored)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/path [external] (path, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$micromatch$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/micromatch/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$filterFilePaths$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/filterFilePaths.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/getConfigForFile.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFileIgnorer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getFileIgnorer.mjs [app-route] (ecmascript)");
;
;
;
;
;
async function isPathIgnored(stylelint, filePath) {
    if (!filePath) {
        return false;
    }
    const cwd = stylelint._options.cwd;
    const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, filePath, filePath);
    if (!result) {
        return true;
    }
    const ignoreFiles = result.config.ignoreFiles || [];
    const absoluteFilePath = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__["isAbsolute"])(filePath) ? filePath : (0, __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__["resolve"])(cwd, filePath);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$micromatch$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])([
        absoluteFilePath
    ], ignoreFiles).length > 0) {
        return true;
    }
    const ignorer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFileIgnorer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint._options);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$filterFilePaths$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ignorer, [
        (0, __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__["relative"])(cwd, absoluteFilePath)
    ]).length === 0) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isPathNotFoundError.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isPathNotFoundError)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$util__$5b$external$5d$__$28$node$3a$util$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:util [external] (node:util, cjs)");
;
function isPathNotFoundError(error) {
    return __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$util__$5b$external$5d$__$28$node$3a$util$2c$__cjs$29$__["types"].isNativeError(error) && 'code' in error && error.code === 'ENOENT';
}
}}),
"[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @typedef {import('postcss').Node} Node */ /** @typedef {import('postcss').Source} NodeSource */ /**
 * @param {Node} node
 * @returns {node is import('postcss').Root}
 */ __turbopack_context__.s({
    "hasSource": (()=>hasSource),
    "isAtRule": (()=>isAtRule),
    "isComment": (()=>isComment),
    "isDeclaration": (()=>isDeclaration),
    "isDocument": (()=>isDocument),
    "isRoot": (()=>isRoot),
    "isRule": (()=>isRule),
    "isValueDiv": (()=>isValueDiv),
    "isValueFunction": (()=>isValueFunction),
    "isValueSpace": (()=>isValueSpace),
    "isValueWord": (()=>isValueWord)
});
function isRoot(node) {
    return node.type === 'root';
}
function isRule(node) {
    return node.type === 'rule';
}
function isAtRule(node) {
    return node.type === 'atrule';
}
function isComment(node) {
    return node.type === 'comment';
}
function isDeclaration(node) {
    return node.type === 'decl';
}
function isDocument(node) {
    return node.type === 'document';
}
function isValueDiv(node) {
    return node.type === 'div';
}
function isValueFunction(node) {
    return node.type === 'function';
}
function isValueSpace(node) {
    return node.type === 'space';
}
function isValueWord({ type }) {
    return type === 'word';
}
function hasSource(node) {
    return Boolean(node.source);
}
}}),
"[project]/node_modules/stylelint/lib/utils/configurationComment.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DEFAULT_CONFIGURATION_COMMENT": (()=>DEFAULT_CONFIGURATION_COMMENT),
    "DISABLE_COMMAND": (()=>DISABLE_COMMAND),
    "DISABLE_LINE_COMMAND": (()=>DISABLE_LINE_COMMAND),
    "DISABLE_NEXT_LINE_COMMAND": (()=>DISABLE_NEXT_LINE_COMMAND),
    "ENABLE_COMMAND": (()=>ENABLE_COMMAND),
    "extractConfigurationComment": (()=>extractConfigurationComment),
    "getConfigurationComment": (()=>getConfigurationComment),
    "isConfigurationComment": (()=>isConfigurationComment)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
;
const DISABLE_COMMAND = '-disable';
const DISABLE_LINE_COMMAND = '-disable-line';
const DISABLE_NEXT_LINE_COMMAND = '-disable-next-line';
const ENABLE_COMMAND = '-enable';
const ALL_COMMANDS = new Set([
    DISABLE_COMMAND,
    DISABLE_LINE_COMMAND,
    DISABLE_NEXT_LINE_COMMAND,
    ENABLE_COMMAND
]);
const DEFAULT_CONFIGURATION_COMMENT = 'stylelint';
function extractConfigurationComment(commentText, configurationComment = DEFAULT_CONFIGURATION_COMMENT) {
    if (!commentText) return commentText;
    const [command] = commentText.split(/\s/, 1);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertString"])(command);
    return command.replace(configurationComment, '');
}
function isConfigurationComment(textOrNode, configurationComment = DEFAULT_CONFIGURATION_COMMENT) {
    const commentText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"])(textOrNode) ? textOrNode : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(textOrNode) ? textOrNode.text : undefined;
    if (!commentText) return false;
    const command = extractConfigurationComment(commentText, configurationComment);
    return command !== undefined && ALL_COMMANDS.has(command);
}
function getConfigurationComment(command, configurationComment = DEFAULT_CONFIGURATION_COMMENT) {
    return `${configurationComment}${command}`;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxComment.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @param {import('postcss').Comment} comment
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isStandardSyntaxComment)
});
function isStandardSyntaxComment(comment) {
    // We check both here because the Sass parser uses `raws.inline` to indicate
    // inline comments, while the Less parser uses `inline`.
    if ('inline' in comment) return false;
    if ('inline' in comment.raws) return false;
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/assignDisabledRanges.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>assignDisabledRanges)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/configurationComment.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxComment.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$csstools$2f$css$2d$tokenizer$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@csstools/css-tokenizer/dist/index.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
/** @import {Node as PostcssNode, Comment as PostcssComment, Document as PostcssDocument, Root as PostcssRoot, Source as PostcssSource} from 'postcss' */ /** @import {DisabledRange, DisabledRangeObject, PostcssResult} from 'stylelint' */ /** @typedef {Pick<PostcssSource, 'start' | 'end'>} Source */ /**
 * @param {PostcssNode} node
 * @param {number} start
 * @param {boolean} strictStart
 * @param {string|undefined} description
 * @param {number} [end]
 * @param {boolean} [strictEnd]
 * @returns {DisabledRange}
 */ function createDisableRange(node, start, strictStart, description, end, strictEnd) {
    return {
        node,
        start,
        end: end || undefined,
        strictStart,
        strictEnd: typeof strictEnd === 'boolean' ? strictEnd : undefined,
        description
    };
}
function assignDisabledRanges(root, result) {
    /**
	 * Most of the functions below work via side effects mutating this object
	 * @type {DisabledRangeObject}
	 */ const disabledRanges = result.stylelint.disabledRanges;
    /** @type {DisabledRange[]} */ const disabledRangesAll = [];
    disabledRanges[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]] = disabledRangesAll;
    // Work around postcss/postcss-scss#109 by merging adjacent `//` comments
    // into a single node before passing to `checkComment`.
    /** @type {PostcssComment?} */ let inlineEnd;
    const configurationComment = result.stylelint.config?.configurationComment;
    root.walk((node)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(node)) {
            if (inlineEnd) {
                // Ignore comments already processed by grouping with a previous one.
                if (inlineEnd === node) inlineEnd = null;
                return;
            }
            const nextComment = node.next();
            // If any of these conditions are not met, do not merge comments.
            if (!(!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isConfigurationComment"])(node.text, configurationComment) && nextComment && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(nextComment) && (node.text.includes('--') || nextComment.text.startsWith('--')))) {
                checkComment(node, node.source, node.text);
                return;
            }
            let lastLine = node.source?.end?.line ?? 0;
            const fullComment = node.clone();
            let current = nextComment;
            while(!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(current) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isConfigurationComment"])(current.text, configurationComment)){
                const currentLine = current.source?.end?.line ?? 0;
                if (lastLine + 1 !== currentLine) break;
                fullComment.text += `\n${current.text}`;
                if (fullComment.source && current.source) {
                    fullComment.source.end = current.source.end;
                }
                inlineEnd = current;
                const next = current.next();
                if (!next || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(next)) break;
                current = next;
                lastLine = currentLine;
            }
            checkComment(fullComment, fullComment.source, fullComment.text);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(node)) {
            let offset = 0;
            const selector = node.raws?.selector?.raw;
            checkCommentsInNode(node, selector, offset);
            offset += selector?.length ?? node.selector.length;
            const between = node.raws?.between;
            checkCommentsInNode(node, between, offset);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(node)) {
            let offset = node.name.length + 1; // `@` + name
            const afterName = node.raws?.afterName;
            checkCommentsInNode(node, afterName, offset);
            offset += afterName?.length ?? 0;
            const params = node.raws?.params?.raw;
            checkCommentsInNode(node, params, offset);
            offset += params?.length ?? node.params.length;
            const between = node.raws?.between;
            checkCommentsInNode(node, between, offset);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isDeclaration"])(node)) {
            let offset = node.prop.length;
            const between = node.raws?.between;
            checkCommentsInNode(node, between, offset);
            offset += between?.length ?? 0;
            const value = node.raws?.value?.raw;
            checkCommentsInNode(node, value, offset);
        }
    });
    return result;
    "TURBOPACK unreachable";
    /**
	 * @param {PostcssNode} node
	 * @param {Source} source
	 * @param {string} text
	 */ function processDisableLineCommand(node, source, text) {
        if (source.start) {
            const line = source.start.line;
            const description = getDescription(text);
            for (const ruleName of getCommandRules(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DISABLE_LINE_COMMAND"], text)){
                disableLine(node, line, ruleName, description);
            }
        }
    }
    /**
	 * @param {PostcssNode} node
	 * @param {Source} source
	 * @param {string} text
	 */ function processDisableNextLineCommand(node, source, text) {
        if (source.end) {
            const line = source.end.line;
            const description = getDescription(text);
            for (const ruleName of getCommandRules(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DISABLE_NEXT_LINE_COMMAND"], text)){
                disableLine(node, line + 1, ruleName, description);
            }
        }
    }
    /**
	 * @param {PostcssNode} node
	 * @param {number} line
	 * @param {string} ruleName
	 * @param {string|undefined} description
	 */ function disableLine(node, line, ruleName, description) {
        if (ruleIsDisabled(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"])) {
            throw node.error('All rules have already been disabled', {
                plugin: 'stylelint'
            });
        }
        if (ruleName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]) {
            for (const disabledRuleName of Object.keys(disabledRanges)){
                if (ruleIsDisabled(disabledRuleName)) continue;
                const strict = disabledRuleName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"];
                startDisabledRange(node, line, disabledRuleName, strict, description);
                endDisabledRange(line, disabledRuleName, strict);
            }
        } else {
            if (ruleIsDisabled(ruleName)) {
                throw node.error(`"${ruleName}" has already been disabled`, {
                    plugin: 'stylelint'
                });
            }
            startDisabledRange(node, line, ruleName, true, description);
            endDisabledRange(line, ruleName, true);
        }
    }
    /**
	 * @param {PostcssNode} node
	 * @param {Source} source
	 * @param {string} text
	 */ function processDisableCommand(node, source, text) {
        const description = getDescription(text);
        for (const ruleToDisable of getCommandRules(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DISABLE_COMMAND"], text)){
            const isAllRules = ruleToDisable === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"];
            if (ruleIsDisabled(ruleToDisable)) {
                throw node.error(isAllRules ? 'All rules have already been disabled' : `"${ruleToDisable}" has already been disabled`, {
                    plugin: 'stylelint'
                });
            }
            if (source.start) {
                const line = source.start.line;
                if (isAllRules) {
                    for (const ruleName of Object.keys(disabledRanges)){
                        startDisabledRange(node, line, ruleName, ruleName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"], description);
                    }
                } else {
                    startDisabledRange(node, line, ruleToDisable, true, description);
                }
            }
        }
    }
    /**
	 * @param {PostcssNode} node
	 * @param {Source} source
	 * @param {string} text
	 */ function processEnableCommand(node, source, text) {
        for (const ruleToEnable of getCommandRules(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ENABLE_COMMAND"], text)){
            // need fallback if endLine will be undefined
            const endLine = source.end?.line;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertNumber"])(endLine);
            if (ruleToEnable === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]) {
                if (Object.values(disabledRanges).every((ranges)=>{
                    if (ranges.length === 0) return true;
                    const lastRange = ranges[ranges.length - 1];
                    return lastRange && typeof lastRange.end === 'number';
                })) {
                    throw node.error('No rules have been disabled', {
                        plugin: 'stylelint'
                    });
                }
                for (const [ruleName, ranges] of Object.entries(disabledRanges)){
                    const lastRange = ranges[ranges.length - 1];
                    if (!lastRange || !lastRange.end) {
                        endDisabledRange(endLine, ruleName, ruleName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]);
                    }
                }
                continue;
            }
            if (ruleIsDisabled(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]) && disabledRanges[ruleToEnable] === undefined) {
                // Get a starting point from the where all rules were disabled
                disabledRanges[ruleToEnable] = disabledRangesAll.map(({ start, end, description })=>createDisableRange(node, start, false, description, end, false));
                endDisabledRange(endLine, ruleToEnable, true);
                continue;
            }
            if (ruleIsDisabled(ruleToEnable)) {
                endDisabledRange(endLine, ruleToEnable, true);
                continue;
            }
            throw node.error(`"${ruleToEnable}" has not been disabled`, {
                plugin: 'stylelint'
            });
        }
    }
    /**
	 * @param {PostcssNode} node
	 * @param {string | undefined} part
	 * @param {number} offset
	 */ function checkCommentsInNode(node, part, offset) {
        if (!(part && part.includes('/*') && part.includes('*/'))) return;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$csstools$2f$css$2d$tokenizer$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["tokenize"])({
            css: part
        }).forEach((token)=>{
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$csstools$2f$css$2d$tokenizer$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isTokenComment"])(token)) return;
            const [, text, start, end] = token;
            const source = node.rangeBy({
                index: start + offset,
                endIndex: end + 1 + offset
            });
            checkComment(node, source, text.slice(2, -2).trim());
        });
    }
    /**
	 * @param {PostcssNode} node
	 * @param {Source | undefined} source
	 * @param {string} text
	 */ function checkComment(node, source, text) {
        if (!source) return;
        // Ignore comments that are not relevant commands
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isConfigurationComment"])(text, configurationComment)) {
            return;
        }
        switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["extractConfigurationComment"])(text, configurationComment)){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DISABLE_LINE_COMMAND"]:
                processDisableLineCommand(node, source, text);
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DISABLE_NEXT_LINE_COMMAND"]:
                processDisableNextLineCommand(node, source, text);
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DISABLE_COMMAND"]:
                processDisableCommand(node, source, text);
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ENABLE_COMMAND"]:
                processEnableCommand(node, source, text);
                break;
        }
    }
    /**
	 * @param {string} command
	 * @param {string} fullText
	 * @returns {string[]}
	 */ function getCommandRules(command, fullText) {
        // Allow for description (f.e. /* stylelint-disable a, b -- Description */).
        const fullCommand = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getConfigurationComment"])(command, configurationComment);
        const rulesText = fullText.slice(fullCommand.length).split(/\s-{2,}\s/u)[0];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertString"])(rulesText);
        const rules = rulesText.trim().split(',').filter(Boolean).map((r)=>r.trim());
        if (rules.length === 0) {
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]
            ];
        }
        return rules;
    }
    /**
	 * @param {string} fullText
	 * @returns {string|undefined}
	 */ function getDescription(fullText) {
        const descriptionStart = fullText.indexOf('--');
        if (descriptionStart === -1) return;
        return fullText.slice(descriptionStart + 2).trim();
    }
    /**
	 * @param {PostcssNode} node
	 * @param {number} line
	 * @param {string} ruleName
	 * @param {boolean} strict
	 * @param {string|undefined} description
	 */ function startDisabledRange(node, line, ruleName, strict, description) {
        const rangeObj = createDisableRange(node, line, strict, description);
        ensureRuleRanges(ruleName);
        const range = disabledRanges[ruleName];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assert"])(range);
        range.push(rangeObj);
    }
    /**
	 * @param {number} line
	 * @param {string} ruleName
	 * @param {boolean} strict
	 */ function endDisabledRange(line, ruleName, strict) {
        const ranges = disabledRanges[ruleName];
        const lastRangeForRule = ranges ? ranges[ranges.length - 1] : null;
        if (!lastRangeForRule) {
            return;
        }
        // Add an `end` prop to the last range of that rule
        lastRangeForRule.end = line;
        lastRangeForRule.strictEnd = strict;
    }
    /**
	 * @param {string} ruleName
	 */ function ensureRuleRanges(ruleName) {
        if (!disabledRanges[ruleName]) {
            disabledRanges[ruleName] = disabledRangesAll.map(({ node, start, end, description })=>createDisableRange(node, start, false, description, end, false));
        }
    }
    /**
	 * @param {string} ruleName
	 * @returns {boolean}
	 */ function ruleIsDisabled(ruleName) {
        const ranges = disabledRanges[ruleName];
        if (!ranges) return false;
        const lastRange = ranges[ranges.length - 1];
        if (!lastRange) return false;
        if (!lastRange.end) return true;
        return false;
    }
}
}}),
"[project]/node_modules/stylelint/lib/reportUnknownRuleNames.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>reportUnknownRuleNames)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fastest$2d$levenshtein$2f$esm$2f$mod$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/fastest-levenshtein/esm/mod.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/rules/index.mjs [app-route] (ecmascript)");
;
;
;
const MAX_LEVENSHTEIN_DISTANCE = 6;
const MAX_SUGGESTIONS_COUNT = 3;
/**
 * @param {string} ruleName
 * @returns {string[]}
 */ function extractSuggestions(ruleName) {
    const suggestions = Array.from({
        length: MAX_LEVENSHTEIN_DISTANCE
    });
    for(let i = 0; i < suggestions.length; i++){
        suggestions[i] = [];
    }
    for (const existRuleName of Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])){
        const dist = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fastest$2d$levenshtein$2f$esm$2f$mod$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["distance"])(existRuleName, ruleName);
        if (dist <= MAX_LEVENSHTEIN_DISTANCE) {
            suggestions[dist - 1].push(existRuleName);
        }
    }
    /** @type {string[]} */ let result = [];
    for (const [i, suggestion] of suggestions.entries()){
        if (suggestion.length > 0) {
            if (i < 3) {
                return suggestion.slice(0, MAX_SUGGESTIONS_COUNT);
            }
            result = result.concat(suggestion);
        }
    }
    return result.slice(0, MAX_SUGGESTIONS_COUNT);
}
/**
 * @param {string} ruleName
 * @param {string[]} [suggestions]
 * @returns {string}
 */ function rejectMessage(ruleName, suggestions = []) {
    return `Unknown rule ${ruleName}.${suggestions.length > 0 ? ` Did you mean ${suggestions.join(', ')}?` : ''}`;
}
/** @type {Map<string, string[]>} */ const cache = new Map();
function reportUnknownRuleNames(unknownRuleName, postcssRoot, postcssResult) {
    const suggestions = cache.has(unknownRuleName) ? cache.get(unknownRuleName) : extractSuggestions(unknownRuleName);
    cache.set(unknownRuleName, suggestions);
    postcssResult.warn(rejectMessage(unknownRuleName, suggestions), {
        severity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_ERROR"],
        rule: unknownRuleName,
        node: postcssRoot,
        index: 0
    });
}
}}),
"[project]/node_modules/stylelint/lib/timing.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$table$2f$dist$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/table/dist/src/index.js [app-route] (ecmascript)");
;
;
// Inspired by ESLint's timing.js
// https://github.com/eslint/eslint/blob/09bc2a88c00aa9a93c7de505795fc4e85b2e6357/lib/linter/timing.js
/**
 * Start time measurement.
 * @returns {bigint} Variable for tracking time in nanoseconds.
 */ function startTime() {
    return __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].hrtime.bigint();
}
/**
 * End time measurement.
 * @param {bigint} start Variable for tracking time in nanoseconds.
 * @returns {number} The measured time in milliseconds.
 */ function endTime(start) {
    const diff = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].hrtime.bigint() - start;
    return Number(diff) / 1e6;
}
const HEADERS = [
    '#',
    'Rule',
    'Time (ms)',
    'Relative'
];
/**
 * Decide how many rules to show in the output list.
 * @returns {number} The number of rules to show.
 */ function getListSize() {
    const TIMING = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].env.TIMING;
    if (typeof TIMING === 'undefined') {
        return 0;
    }
    if (TIMING.toLowerCase() === 'all') {
        return Number.POSITIVE_INFINITY;
    }
    const parsed = Number.parseInt(TIMING, 10);
    if (!Number.isNaN(parsed) && parsed >= 1) {
        return parsed;
    }
    return 0;
}
const listSize = getListSize();
const enabled = listSize !== 0;
/** @type {import('table').TableUserConfig}  */ const tableConfig = {
    columns: [
        {
            alignment: 'right'
        },
        {
            alignment: 'left'
        },
        {
            alignment: 'right'
        },
        {
            alignment: 'right'
        }
    ]
};
/**
 * Display the timing data.
 * @param {{ [key: string]: number }} data Data object to be displayed.
 * @returns {void}
 * @private
 */ function display(data) {
    let total = 0;
    /** @type {Array<[string, number]>} */ const rows = Object.keys(data).map((key)=>{
        const t = data[key] ?? 0;
        total += t;
        return [
            key,
            t
        ];
    });
    rows.sort((a, b)=>b[1] - a[1]);
    const limitedRows = rows.slice(0, listSize);
    // Format rows with percentages
    const formattedRows = limitedRows.map((row, index)=>{
        const percentage = total > 0 ? `${(row[1] * 100 / total).toFixed(1)}%` : '0.0%';
        const timeStr = row[1].toFixed(3);
        return [
            index + 1,
            row[0],
            timeStr,
            percentage
        ];
    });
    formattedRows.unshift(HEADERS);
    // eslint-disable-next-line no-console
    console.log((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$table$2f$dist$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["table"])(formattedRows, tableConfig));
}
/** @type {{ [key: string]: number }} */ const data = Object.create(null);
/**
 * Time the execution of a function.
 * @param {string} key Key from the data object.
 * @param {Function} fn Function to be called.
 * @returns {Function} Function to be executed.
 * @private
 */ function time(key, fn) {
    return function timedFunction(/** @type {any} */ ...args) {
        const t = startTime();
        const result = fn(...args);
        const timeDiff = endTime(t);
        data[key] = (data[key] ?? 0) + timeDiff;
        return result;
    };
}
if (enabled) {
    __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].on('exit', ()=>{
        display(data);
    });
}
const __TURBOPACK__default__export__ = {
    display,
    enabled,
    getListSize,
    tableConfig,
    time
};
}}),
"[project]/node_modules/stylelint/lib/lintPostcssResult.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>lintPostcssResult)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:os [external] (node:os, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/configurationComment.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$assignDisabledRanges$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/assignDisabledRanges.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/emitDeprecationWarning.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/css-tree/lib/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/css-tree/lib/index.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getStylelintRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getStylelintRule.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reportUnknownRuleNames$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reportUnknownRuleNames.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/rules/index.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$timing$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/timing.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
async function lintPostcssResult(stylelintOptions, postcssResult, config) {
    postcssResult.stylelint.stylelintError = false;
    postcssResult.stylelint.stylelintWarning = false;
    postcssResult.stylelint.quiet = config.quiet;
    postcssResult.stylelint.quietDeprecationWarnings = stylelintOptions.quietDeprecationWarnings;
    postcssResult.stylelint.config = config;
    const postcssDoc = postcssResult.root;
    if (!('type' in postcssDoc)) {
        throw new Error('Unexpected Postcss root object!');
    }
    const newlineMatch = postcssDoc.source?.input.css.match(/\r?\n/);
    const newline = newlineMatch ? newlineMatch[0] : __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__["EOL"];
    const configurationComment = config.configurationComment || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_CONFIGURATION_COMMENT"];
    const ctx = {
        configurationComment,
        newline
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$assignDisabledRanges$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(postcssDoc, postcssResult);
    const postcssRoots = postcssDoc && postcssDoc.constructor.name === 'Document' ? postcssDoc.nodes : [
        postcssDoc
    ];
    // Promises for the rules. Although the rule code runs synchronously now,
    // the use of Promises makes it compatible with the possibility of async
    // rules down the line.
    /** @type {Array<Promise<any>>} */ const performRules = [];
    const rulesOrder = Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]);
    const ruleNames = config.rules ? Object.keys(config.rules).sort((a, b)=>rulesOrder.indexOf(a) - rulesOrder.indexOf(b)) : [];
    for (const ruleName of ruleNames){
        const ruleFunction = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getStylelintRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, config);
        if (ruleFunction === undefined) {
            performRules.push(Promise.all(postcssRoots.map((postcssRoot)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reportUnknownRuleNames$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, postcssRoot, postcssResult))));
            continue;
        }
        const ruleSettings = config.rules?.[ruleName];
        if (ruleSettings === null || ruleSettings[0] === null) continue;
        if (ruleFunction.meta?.deprecated && !stylelintOptions.quietDeprecationWarnings) {
            warnDeprecatedRule(postcssResult, ruleName);
        }
        const primaryOption = ruleSettings[0];
        const secondaryOptions = ruleSettings[1];
        // Log the rule's severity in the PostCSS result
        const defaultSeverity = config.defaultSeverity || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_SEVERITY"];
        postcssResult.stylelint.ruleSeverities[ruleName] = secondaryOptions && secondaryOptions.severity || defaultSeverity;
        postcssResult.stylelint.customMessages[ruleName] = secondaryOptions && secondaryOptions.message;
        postcssResult.stylelint.customUrls[ruleName] = secondaryOptions && secondaryOptions.url;
        postcssResult.stylelint.ruleMetadata[ruleName] = ruleFunction.meta || {};
        const shouldWarn = ruleFunction.meta?.fixable && !stylelintOptions.quietDeprecationWarnings;
        const disableFix = secondaryOptions?.disableFix === true;
        const fix = !disableFix && config.fix && isFixCompatible(postcssResult, ruleName);
        const lexer = getCachedLexer(config);
        const context = {
            ...ctx,
            lexer,
            // context.fix is unlikely to be removed in the foreseeable future
            // due to the sheer number of rules in the wild that rely on it
            get fix () {
                if (shouldWarn) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('`context.fix` is being deprecated.', 'CONTEXT_FIX', `Please pass a \`fix\` callback to the \`report\` utility of "${ruleName}" instead.`);
                }
                return fix;
            }
        };
        const ruleFn = ruleFunction(primaryOption, secondaryOptions, context);
        /**
		 * @param {import('postcss').Root} postcssRoot
		 */ async function runRule(postcssRoot) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$timing$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].enabled) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$timing$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].time(ruleName, ()=>ruleFn(postcssRoot, postcssResult))();
            }
            return ruleFn(postcssRoot, postcssResult);
        }
        performRules.push(Promise.all(postcssRoots.map(runRule)));
    }
    return Promise.all(performRules);
}
/**
 * using context.fix instead of the fix callback has the drawback
 * of not honouring the configuration comments in subtle ways
 * @see file://./../docs/user-guide/options.md#fix for details
 * @param {PostcssResult} postcssResult
 * @param {string} name
 * @returns {boolean}
 */ function isFixCompatible({ stylelint: { disabledRanges } }, name) {
    return !disabledRanges[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]]?.length && !disabledRanges[name];
}
/**
 * @param {PostcssResult} result
 * @param {string} ruleName
 * @returns {void}
 */ function warnDeprecatedRule(result, ruleName) {
    const message = `The "${ruleName}" rule is deprecated.`;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(message, 'RULE', `Please be aware that the "${ruleName}" rule will soon be either removed or renamed.`);
    result.warn(message, {
        stylelintType: 'deprecation'
    });
}
const lexerCache = new Map();
/**
 * @param {Config} config
 * @returns {import('css-tree').Lexer}
 * */ function getCachedLexer(config) {
    const cacheKey = JSON.stringify(config.languageOptions?.syntax || {});
    if (lexerCache.has(cacheKey)) {
        return lexerCache.get(cacheKey);
    }
    const newLexer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fork"])({
        atrules: config.languageOptions?.syntax?.atRules || {},
        properties: config.languageOptions?.syntax?.properties || {},
        types: config.languageOptions?.syntax?.types || {},
        cssWideKeywords: config.languageOptions?.syntax?.cssWideKeywords || []
    }).lexer;
    lexerCache.set(cacheKey, newLexer);
    return newLexer;
}
}}),
"[project]/node_modules/stylelint/lib/utils/putIfAbsent.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * If `map` already has the given `key`, returns its value. Otherwise, calls
 * `callback`, adds the result to `map` at `key`, and then returns it.
 *
 * @template K
 * @template V
 * @param {Map<K, V>} map
 * @param {K} key
 * @param {() => V} callback
 * @returns {V}
 */ __turbopack_context__.s({
    "default": (()=>putIfAbsent)
});
function putIfAbsent(map, key, callback) {
    if (map.has(key)) return map.get(key);
    const value = callback();
    map.set(key, value);
    return value;
}
}}),
"[project]/node_modules/stylelint/lib/needlessDisables.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>needlessDisables)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$putIfAbsent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/putIfAbsent.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/reportCommentProblem.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/validateDisableSettings.mjs [app-route] (ecmascript)");
;
;
;
;
;
function needlessDisables(postcssResult) {
    const [enabled, options] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(postcssResult, 'reportNeedlessDisables');
    if (!options) return;
    const { disabledRanges, disabledRanges: { [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]]: disabledRangesAll = [] }, disabledWarnings = [] } = postcssResult.stylelint;
    // A map from `stylelint-disable` comments to the set of rules that
    // are usefully disabled by each comment. We track this
    // comment-by-comment rather than range-by-range because ranges that
    // disable *all* rules are duplicated for each rule they apply to in
    // practice.
    /** @type {Map<import('postcss').Node, Set<string>>}} */ const usefulDisables = new Map();
    for (const warning of disabledWarnings){
        const rule = warning.rule;
        const ruleRanges = disabledRanges[rule];
        if (ruleRanges) {
            for (const range of ruleRanges){
                if (isWarningInRange(warning, range)) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$putIfAbsent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(usefulDisables, range.node, ()=>new Set()).add(rule);
                }
            }
        }
        for (const range of disabledRangesAll){
            if (isWarningInRange(warning, range)) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$putIfAbsent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(usefulDisables, range.node, ()=>new Set()).add(rule);
            }
        }
    }
    const allRangeNodes = new Set(disabledRangesAll.map((range)=>range.node));
    for (const [rule, ranges] of Object.entries(disabledRanges)){
        for (const range of ranges){
            const node = range.node;
            if (rule !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"] && allRangeNodes.has(node)) continue;
            if (enabled === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(options, 'except', rule)) continue;
            const useful = usefulDisables.get(node) || new Set();
            // Only emit a warning if this range's comment isn't useful for this rule.
            // For the special rule "all", only emit a warning if it's not useful for
            // *any* rules, because it covers all of them.
            if (rule === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"] ? useful.size !== 0 : useful.has(rule)) continue;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                rule: '--report-needless-disables',
                message: `Needless disable for "${rule}"`,
                severity: options.severity,
                node,
                postcssResult
            });
        }
    }
}
/**
 * @param {import('stylelint').DisabledWarning} warning
 * @param {import('stylelint').DisabledRange} range
 * @returns {boolean}
 */ function isWarningInRange(warning, range) {
    const line = warning.line;
    // Need to check if range.end exist, because line number type cannot be compared to undefined
    return range.start <= line && (range.end !== undefined && range.end >= line || range.end === undefined);
}
}}),
"[project]/node_modules/stylelint/lib/reportDisables.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>reportDisables)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/reportCommentProblem.mjs [app-route] (ecmascript)");
;
;
function reportDisables(postcssResult) {
    const rangeData = postcssResult.stylelint.disabledRanges;
    const configRules = postcssResult.stylelint.config?.rules;
    if (!configRules) return;
    // If no rules actually disallow disables, don't bother looking for ranges
    // that correspond to disabled rules.
    if (!Object.values(configRules).some((rule)=>reportDisablesForRule(rule))) {
        return;
    }
    for (const [rule, ranges] of Object.entries(rangeData)){
        for (const range of ranges){
            if (!configRules[rule]) continue;
            if (!reportDisablesForRule(configRules[rule])) continue;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                rule: 'reportDisables',
                message: `Rule "${rule}" may not be disabled`,
                severity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_ERROR"],
                node: range.node,
                postcssResult
            });
        }
    }
}
/**
 * @param {import('stylelint').ConfigRuleSettings<any, object>} options
 * @returns {boolean}
 */ function reportDisablesForRule(options) {
    if (!options || !options[1]) return false;
    return Boolean(options[1].reportDisables);
}
}}),
"[project]/node_modules/stylelint/lib/unscopedDisables.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>reportUnscopedDisables)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/reportCommentProblem.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/validateDisableSettings.mjs [app-route] (ecmascript)");
;
;
;
;
function reportUnscopedDisables(postcssResult) {
    const [enabled, options] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$validateDisableSettings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(postcssResult, 'reportUnscopedDisables');
    if (!options) return;
    const isDisabled = !enabled && !options.except.length;
    if (isDisabled) return;
    const stylelint = postcssResult.stylelint;
    const unscopedComments = stylelint.disabledRanges[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]];
    if (!unscopedComments) return;
    /** @param {Node} node */ const report = (node)=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$reportCommentProblem$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
            rule: '--report-unscoped-disables',
            message: `Configuration comment must be scoped`,
            severity: options.severity,
            node,
            postcssResult
        });
    };
    const hasExceptions = options.except.length;
    if (hasExceptions && !enabled) {
        const configRules = stylelint.config?.rules;
        if (!configRules) return;
        const warnings = stylelint.disabledWarnings;
        if (!warnings) return;
        /** @type {Set<Node>} */ const alreadyReported = new Set();
        for (const { line, rule } of warnings){
            const isException = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(options, 'except', rule);
            if (!isException) continue;
            for (const { start, end, node } of unscopedComments){
                if (alreadyReported.has(node)) continue;
                if (start <= line && (end === undefined || end >= line)) {
                    report(node);
                    alreadyReported.add(node);
                }
            }
        }
    } else if (enabled) {
        for (const { node } of unscopedComments)report(node);
    }
}
}}),
"[project]/node_modules/stylelint/lib/lintSource.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>lintSource)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__ = __turbopack_context__.i("[externals]/postcss [external] (postcss, esm_import)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$descriptionlessDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/descriptionlessDisables.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/getConfigForFile.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getPostcssResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/getPostcssResult.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$invalidScopeDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/invalidScopeDisables.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$isPathIgnored$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/isPathIgnored.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isPathNotFoundError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isPathNotFoundError.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintPostcssResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/lintPostcssResult.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$needlessDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/needlessDisables.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reportDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reportDisables.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$unscopedDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/unscopedDisables.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getPostcssResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__
]);
([__TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getPostcssResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
;
;
;
;
;
;
;
;
;
;
;
;
async function lintSource(stylelint, options = {}) {
    if (!options.filePath && options.code === undefined && !options.existingPostcssResult) {
        return Promise.reject(new Error('You must provide filePath, code, or existingPostcssResult'));
    }
    const isCodeNotFile = options.code !== undefined;
    const inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;
    if (inputFilePath !== undefined && !(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(inputFilePath)) {
        if (isCodeNotFile) {
            return Promise.reject(new Error('codeFilename must be an absolute path'));
        }
        return Promise.reject(new Error('filePath must be an absolute path'));
    }
    const isIgnored = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$isPathIgnored$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, inputFilePath).catch((err)=>{
        if (isCodeNotFile && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isPathNotFoundError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(err)) return false;
        throw err;
    });
    if (isIgnored) {
        return createEmptyPostcssResult(inputFilePath, options.existingPostcssResult);
    }
    const configSearchPath = stylelint._options.configFile || inputFilePath;
    const cwd = stylelint._options.cwd;
    let configForFile;
    try {
        configForFile = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, configSearchPath, inputFilePath);
    } catch (err) {
        if (isCodeNotFile && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isPathNotFoundError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(err)) {
            configForFile = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, cwd);
        } else {
            throw err;
        }
    }
    if (!configForFile) {
        return Promise.reject(new Error('Config file not found'));
    }
    const config = configForFile.config;
    const existingPostcssResult = options.existingPostcssResult;
    if (options.cache) {
        stylelint._fileCache.calcHashOfConfig(config);
        if (options.filePath && !stylelint._fileCache.hasFileChanged(options.filePath)) {
            return createEmptyPostcssResult(inputFilePath, existingPostcssResult);
        }
    }
    const postcssResult = existingPostcssResult || await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getPostcssResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, {
        code: options.code,
        codeFilename: options.codeFilename,
        filePath: inputFilePath,
        customSyntax: config.customSyntax
    });
    const stylelintPostcssResult = Object.assign(postcssResult, {
        stylelint: {
            ruleSeverities: {},
            customMessages: {},
            customUrls: {},
            ruleMetadata: {},
            fixersData: {},
            rangesOfComputedEditInfos: [],
            disabledRanges: {}
        }
    });
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintPostcssResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint._options, stylelintPostcssResult, config);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reportDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelintPostcssResult);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$needlessDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelintPostcssResult);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$invalidScopeDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelintPostcssResult);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$descriptionlessDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelintPostcssResult);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$unscopedDisables$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelintPostcssResult);
    return stylelintPostcssResult;
}
/**
 * @returns {StylelintPostcssResult}
 */ function createEmptyStylelintPostcssResult() {
    return {
        ruleSeverities: {},
        customMessages: {},
        customUrls: {},
        ruleMetadata: {},
        fixersData: {},
        rangesOfComputedEditInfos: [],
        disabledRanges: {},
        ignored: true,
        stylelintError: false,
        stylelintWarning: false
    };
}
/**
 * @param {string | undefined} filePath
 * @param {Options['existingPostcssResult']} existingPostcssResult
 * @returns {PostcssResult}
 */ function createEmptyPostcssResult(filePath, existingPostcssResult) {
    return Object.assign(existingPostcssResult ?? (0, __TURBOPACK__imported__module__$5b$externals$5d2f$postcss__$5b$external$5d$__$28$postcss$2c$__esm_import$29$__["default"])().process('', {
        from: filePath
    }).sync(), {
        stylelint: createEmptyStylelintPostcssResult()
    });
}
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),
"[project]/node_modules/stylelint/lib/postcssPlugin.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>postcssPlugin)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/createStylelint.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/lintSource.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__
]);
([__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
;
;
;
;
;
function postcssPlugin(options = {}) {
    const [cwd, tailoredOptions] = isConfig(options) ? [
        __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd(),
        {
            config: options
        }
    ] : [
        'cwd' in options && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"])(options.cwd) && options.cwd || __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd(),
        options
    ];
    const stylelint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(tailoredOptions);
    return {
        postcssPlugin: 'stylelint',
        /**
		 * @param {import('postcss').Root} root
		 * @param {import('postcss').Helpers} helpers
		 * @returns {Promise<void>}
		 */ async Once (root, { result }) {
            let filePath = root.source && root.source.input.file;
            if (filePath && !(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(filePath)) {
                filePath = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["join"])(cwd, filePath);
            }
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, {
                filePath,
                existingPostcssResult: result
            });
        }
    };
}
postcssPlugin.postcss = true;
/**
 * @param {PostcssPluginOptions} options
 * @returns {options is StylelintConfig}
 */ function isConfig(options) {
    return 'rules' in options;
}
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),
"[project]/node_modules/stylelint/lib/utils/addSemicolonForEditInfo.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @import { Node as PostcssNode } from 'postcss' */ __turbopack_context__.s({
    "default": (()=>addSemicolonForEditInfo)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
function addSemicolonForEditInfo(node, fixData) {
    const { parent } = node;
    if (!parent) return fixData;
    if (node.type === 'decl') {
        if (parent.raws.semicolon || parent.last !== node) {
            return {
                ...fixData,
                text: `${fixData.text};`
            };
        }
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(node)) {
        if (!node.nodes && (parent.raws.semicolon || parent.last !== node)) {
            return {
                ...fixData,
                text: `${fixData.text};`
            };
        }
    }
    return fixData;
}
}}),
"[project]/node_modules/stylelint/lib/utils/narrowFixRange.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @import { Node as PostcssNode } from 'postcss' */ /**
 * Make a fix range as narrow as possible by trimming common prefixes and suffixes
 *
 * @param {PostcssNode} node
 * @param {{range: [number, number], text: string}} fixData
 * @returns {{range: [number, number], text: string}}
 */ __turbopack_context__.s({
    "default": (()=>narrowFixRange)
});
function narrowFixRange(node, fixData) {
    if (!node.source) {
        return fixData;
    }
    let startOffset = fixData.range[0];
    let endOffset = fixData.range[1];
    const stringRepresentation = node.source.input.css.slice(startOffset, endOffset);
    let replacementStartOffset = 0;
    for(let i = 0; i < stringRepresentation.length; i++){
        const a = stringRepresentation[i];
        const b = fixData.text[i];
        if (a !== b) break;
        startOffset++;
        replacementStartOffset++;
    }
    let replacementEndOffset = fixData.text.length;
    for(let i = 0; i < stringRepresentation.length; i++){
        const ia = stringRepresentation.length - 1 - i;
        if (ia < replacementStartOffset) break;
        const a = stringRepresentation[ia];
        const ib = fixData.text.length - 1 - i;
        if (ib < replacementStartOffset) break;
        const b = fixData.text[ib];
        if (a !== b) break;
        endOffset--;
        replacementEndOffset--;
    }
    // Try to have a context size of at least 1
    if (startOffset === endOffset) {
        if (startOffset > fixData.range[0]) {
            startOffset--;
            replacementStartOffset--;
        } else if (endOffset < fixData.range[1]) {
            endOffset++;
            replacementEndOffset++;
        }
    }
    return {
        text: fixData.text.slice(replacementStartOffset, replacementEndOffset),
        range: [
            startOffset,
            endOffset
        ]
    };
}
}}),
"[project]/node_modules/stylelint/lib/utils/rangesOverlap.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check if two ranges of source offsets overlap.
 * This function assumes that the provided ranges have a width of at least one column.
 *
 * @param {[number, number]} a
 * @param {[number, number]} b
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>rangesOverlap)
});
function rangesOverlap(a, b) {
    // a: ----
    // b:      ----
    if (a[1] <= b[0]) return false;
    // a:      ----
    // b: ----
    if (a[0] >= b[1]) return false;
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>report)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$addSemicolonForEditInfo$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/addSemicolonForEditInfo.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/emitDeprecationWarning.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$narrowFixRange$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/narrowFixRange.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$rangesOverlap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/rangesOverlap.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
function report(problem) {
    const { node, index, endIndex, line, start, end, result, ruleName, word, fix, ...rest } = problem;
    checkProblemRangeDeprecations(problem);
    const { disabledRanges, quiet, ruleSeverities, config: { defaultSeverity, ignoreDisables } = {}, customMessages: { [ruleName]: message = rest.message }, customUrls: { [ruleName]: customUrl }, ruleMetadata: { [ruleName]: metadata } } = result.stylelint;
    const { messageArgs = [], severity = ruleSeverities[ruleName] } = rest;
    const ruleSeverity = ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isFunction"])(severity) ? severity(...messageArgs) : severity) ?? defaultSeverity ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_SEVERITY"];
    // In quiet mode, mere warnings are ignored
    if (quiet && ruleSeverity === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_WARNING"]) return;
    if (((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isFunction"])(fix) || isFixObject(fix)) && metadata && !metadata.fixable) {
        throw new Error(`The "${ruleName}" rule requires "meta.fixable" to be truthy if the "fix" callback is being passed`);
    }
    // If a line is not passed, use the node.rangeBy method to get the
    // line number that the complaint pertains to
    const startLine = line ?? node?.rangeBy({
        index,
        endIndex
    }).start.line;
    if (!startLine) {
        throw new Error(`The "${ruleName}" rule failed to pass either a node or a line number to the \`report()\` function.`);
    }
    if (isFixApplied({
        ...problem,
        line: startLine
    })) return;
    if (isDisabledOnLine(ruleName, startLine, disabledRanges)) {
        // Collect disabled warnings
        // Used to report `needlessDisables` in subsequent processing.
        const disabledWarnings = result.stylelint.disabledWarnings ||= [];
        disabledWarnings.push({
            rule: ruleName,
            line: startLine
        });
        if (!ignoreDisables) return;
    }
    if (!result.stylelint.stylelintError && ruleSeverity === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_ERROR"]) {
        result.stylelint.stylelintError = true;
    }
    if (!result.stylelint.stylelintWarning && ruleSeverity === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_WARNING"]) {
        result.stylelint.stylelintWarning = true;
    }
    /** @type {WarningOptions} */ const warningProperties = {
        severity: ruleSeverity,
        rule: ruleName
    };
    if (node) {
        warningProperties.node = node;
    }
    if (start) {
        warningProperties.start = start;
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(index)) {
        warningProperties.index = index;
    }
    if (end) {
        warningProperties.end = end;
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(endIndex)) {
        warningProperties.endIndex = endIndex;
    }
    if (word) {
        warningProperties.word = word;
    }
    if (customUrl) {
        warningProperties.url = customUrl;
    }
    warningProperties.fix = computeEditInfo({
        ...problem,
        line: startLine
    });
    const warningMessage = buildWarningMessage(message, messageArgs);
    result.warn(warningMessage, warningProperties);
}
/**
 * @param {Problem} problem
 */ function checkProblemRangeDeprecations(problem) {
    if (problem.result.stylelint.quietDeprecationWarnings) return;
    if (!problem.node) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`Omitting the \`node\` argument in the \`utils.report()\` function is deprecated ("${problem.ruleName}").`, 'REPORT_AMBIGUOUS_POSITION', `Please pass a \`node\` argument in the \`utils.report()\` function of "${problem.ruleName}".`);
    }
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRange"])(problem) && ('start' in problem || 'end' in problem)) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`Partial position information in the \`utils.report()\` function is deprecated ("${problem.ruleName}").`, 'REPORT_AMBIGUOUS_POSITION', `Please pass both a valid \`start\` and \`end\` argument in the \`utils.report()\` function of "${problem.ruleName}".`);
    }
    if (!hasIndices(problem) && ('index' in problem || 'endIndex' in problem)) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`Partial position information in the \`utils.report()\` function is deprecated ("${problem.ruleName}").`, 'REPORT_AMBIGUOUS_POSITION', `Please pass both \`index\` and \`endIndex\` as arguments in the \`utils.report()\` function of "${problem.ruleName}".`);
    }
    if ('line' in problem) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(`Providing the \`line\` argument in the \`utils.report()\` function is deprecated ("${problem.ruleName}").`, 'REPORT_AMBIGUOUS_POSITION', `Please pass both \`index\` and \`endIndex\` as arguments in the \`utils.report()\` function of "${problem.ruleName}" instead.`);
    }
}
/**
 * @param {RuleMessage} message
 * @param {NonNullable<Problem['messageArgs']>} messageArgs
 * @returns {string}
 */ function buildWarningMessage(message, messageArgs) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"])(message)) {
        return printfLike(message, ...messageArgs);
    }
    return message(...messageArgs);
}
/**
 * @param {string} format
 * @param {Array<unknown>} args
 * @returns {string}
 */ function printfLike(format, ...args) {
    return args.reduce((/** @type {string} */ result, arg)=>{
        return result.replace(/%[ds]/, String(arg));
    }, format);
}
/**
 * Check whether a rule is disabled for a given line
 * @param {string} ruleName
 * @param {number} startLine
 * @param {DisabledRangeObject} disabledRanges
 */ function isDisabledOnLine(ruleName, startLine, disabledRanges) {
    const ranges = disabledRanges[ruleName] ?? disabledRanges[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RULE_NAME_ALL"]] ?? [];
    for (const range of ranges){
        if (// If the problem is within a disabledRange,
        // and that disabledRange's rules include this one
        range.start <= startLine && (range.end === undefined || range.end >= startLine) && /** @todo populate rules in assignDisabledRanges util */ (!range.rules || range.rules.includes(ruleName))) {
            return true;
        }
    }
    return false;
}
/**
 * @param {Problem & { line: number }} problem
 * @returns {boolean}
 */ function isFixApplied({ fix, line, result: { stylelint }, ruleName }) {
    if (!fix) return false;
    const { disabledRanges, config = {}, fixersData } = stylelint;
    if (!config.fix) return false;
    if (isFixDisabled(line, ruleName, config, disabledRanges)) return false;
    const apply = isFixObject(fix) ? fix.apply : fix;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isFunction"])(apply)) return false;
    apply();
    incrementFixCounter({
        fixersData,
        ruleName
    });
    return true;
}
/**
 * @param {Problem & { line: number }} problem
 * @returns {{range: [number, number], text: string} | undefined}
 */ function computeEditInfo({ fix, line, result: { stylelint }, ruleName }) {
    if (!fix) return;
    const { disabledRanges, config = {}, rangesOfComputedEditInfos } = stylelint;
    if (!config.computeEditInfo || config.fix) return;
    if (isFixDisabled(line, ruleName, config, disabledRanges)) return;
    if (!isFixObject(fix) || !fix.apply || !fix.node) return;
    const { apply, node } = fix;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(node.source?.start?.offset) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(node.source?.end?.offset)) return;
    /** @type [number, number] */ const fixedNodeRange = [
        node.source.start.offset,
        node.source.end.offset
    ];
    // When recording edit info we want to ensure that there is no overlap with any other fix.
    // We only record the first fix for each node.
    if (rangesOfComputedEditInfos.some((range)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$rangesOverlap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(range, fixedNodeRange))) {
        return;
    }
    // Apply the fix
    apply();
    let fixData = {
        range: fixedNodeRange,
        text: node.toString()
    };
    fixData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$addSemicolonForEditInfo$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node, fixData);
    // Compute the smallest range and text of the fix
    fixData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$narrowFixRange$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node, fixData);
    // Mark the fixed range as mutated
    rangesOfComputedEditInfos.push(fixData.range);
    return fixData;
}
/**
 * @param {number} line
 * @param {string} ruleName
 * @param {Config} config
 * @param {DisabledRangeObject} disabledRanges
 * @returns {boolean}
 */ function isFixDisabled(line, ruleName, config, disabledRanges) {
    if (config.rules?.[ruleName][1]?.disableFix) return true;
    if (!config.ignoreDisables && isDisabledOnLine(ruleName, line, disabledRanges)) return true;
    return false;
}
/**
 * @param {object} o
 * @param {StylelintPostcssResult['fixersData']} o.fixersData
 * @param {string} o.ruleName
 */ function incrementFixCounter({ fixersData, ruleName }) {
    fixersData[ruleName] ??= 0;
    fixersData[ruleName]++;
}
/**
 * @param {unknown} value
 * @returns {value is { index: number, endIndex: number }}
 */ function hasIndices(value) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(value)) return false;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(value.index)) return false;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(value.endIndex)) return false;
    return true;
}
/**
 * @param {unknown} value
 * @returns {value is FixObject}
 */ function isFixObject(value) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPlainObject"])(value)) return false;
    if (!value.node) return false;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isFunction"])(value.apply)) return false;
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/resolveConfig.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>resolveConfig)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/createStylelint.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/getConfigForFile.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__
]);
([__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
;
;
;
;
async function resolveConfig(filePath, { cwd = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd(), config = undefined, configBasedir = undefined, configFile = undefined } = {}) {
    if (!filePath) {
        return undefined;
    }
    const stylelint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
        config,
        configFile,
        configBasedir,
        cwd
    });
    const absoluteFilePath = !(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(filePath) ? (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["join"])(cwd, filePath) : (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["normalize"])(filePath);
    const configSearchPath = stylelint._options.configFile || absoluteFilePath;
    const resolved = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, configSearchPath, absoluteFilePath);
    if (!resolved) {
        return undefined;
    }
    return resolved.config;
}
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),
"[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @type {import('stylelint').Utils['ruleMessages']}
 */ __turbopack_context__.s({
    "default": (()=>ruleMessages)
});
function ruleMessages(ruleName, messages) {
    /** @type {import('stylelint').RuleMessages} */ const newMessages = {};
    for (const [messageId, messageText] of Object.entries(messages)){
        if (typeof messageText === 'string') {
            newMessages[messageId] = `${messageText} (${ruleName})`;
        } else {
            newMessages[messageId] = (...args)=>`${messageText(...args)} (${ruleName})`;
        }
    }
    // @ts-expect-error -- TS2322: Type 'RuleMessages' is not assignable to type 'R'.
    return newMessages;
}
}}),
"[project]/node_modules/stylelint/lib/utils/allFilesIgnoredError.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>AllFilesIgnoredError)
});
class AllFilesIgnoredError extends Error {
    constructor(){
        super();
        this.message = 'All input files were ignored because of the ignore pattern. Either change your input, ignore pattern or use "--allow-empty-input" to allow no inputs';
    }
}
}}),
"[project]/node_modules/stylelint/lib/utils/noFilesFoundError.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>NoFilesFoundError)
});
class NoFilesFoundError extends Error {
    /**
	 * @param {string|string[]} fileList
	 */ constructor(fileList){
        super();
        if (typeof fileList === 'string') {
            fileList = [
                fileList
            ];
        }
        const pattern = fileList.filter((i)=>!i.startsWith('!')).join(', ');
        this.message = `No files matching the pattern "${pattern}" were found.`;
    }
}
}}),
"[project]/node_modules/stylelint/lib/createPartialStylelintResult.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>createPartialStylelintResult)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
;
;
function createPartialStylelintResult(postcssResult, cssSyntaxError) {
    /** @type {StylelintResult} */ let stylelintResult;
    /** @type {string | undefined} */ let source;
    if (postcssResult && postcssResult.root) {
        if (postcssResult.root.source) {
            source = postcssResult.root.source.input.file;
            if (!source && 'id' in postcssResult.root.source.input) {
                source = postcssResult.root.source.input.id;
            }
        }
        // @ts-expect-error -- TS2339: Property 'noDeprecation' does not exist on type 'Process'.
        // https://github.com/nodejs/node/blob/main/doc/api/process.md#processnodeprecation
        const includeDeprecations = !__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].noDeprecation;
        const deprecationMessages = includeDeprecations ? postcssResult.messages.filter((message)=>message.stylelintType === 'deprecation') : [];
        const deprecations = deprecationMessages.map((deprecationMessage)=>{
            return {
                text: deprecationMessage.text,
                reference: deprecationMessage.stylelintReference
            };
        });
        const invalidOptionMessages = postcssResult.messages.filter((message)=>message.stylelintType === 'invalidOption');
        const invalidOptionWarnings = invalidOptionMessages.map((invalidOptionMessage)=>{
            return {
                text: invalidOptionMessage.text
            };
        });
        const parseErrors = postcssResult.messages.filter((message)=>message.stylelintType === 'parseError');
        // Remove deprecation warnings, invalid options, and parse errors from the messages
        postcssResult.messages = postcssResult.messages.filter((message)=>message.stylelintType !== 'deprecation' && message.stylelintType !== 'invalidOption' && message.stylelintType !== 'parseError');
        // This defines the stylelint result object that formatters receive
        stylelintResult = {
            source,
            deprecations,
            invalidOptionWarnings,
            // @ts-expect-error -- TS2322: Type 'Message[]' is not assignable to type '(Warning & { stylelintType: string; })[]'.
            parseErrors,
            errored: postcssResult.stylelint.stylelintError,
            warnings: postcssResult.messages.map((message)=>{
                return {
                    line: message.line,
                    column: message.column,
                    endLine: message.endLine,
                    endColumn: message.endColumn,
                    fix: message.fix,
                    rule: message.rule,
                    severity: message.severity,
                    text: message.text,
                    url: message.url
                };
            }),
            ignored: postcssResult.stylelint.ignored,
            _postcssResult: postcssResult
        };
    } else if (cssSyntaxError) {
        if (cssSyntaxError.name !== 'CssSyntaxError') {
            throw cssSyntaxError;
        }
        stylelintResult = {
            source: cssSyntaxError.file || '<input css 1>',
            deprecations: [],
            invalidOptionWarnings: [],
            parseErrors: [],
            errored: true,
            warnings: [
                {
                    line: cssSyntaxError.line,
                    column: cssSyntaxError.column,
                    endLine: cssSyntaxError.endLine,
                    endColumn: cssSyntaxError.endColumn,
                    rule: cssSyntaxError.name,
                    severity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_ERROR"],
                    text: `${cssSyntaxError.reason} (${cssSyntaxError.name})`
                }
            ]
        };
    } else {
        throw new Error('createPartialStylelintResult must be called with either postcssResult or CssSyntaxError');
    }
    return stylelintResult;
}
}}),
"[project]/node_modules/stylelint/lib/utils/getFormatterOptionsText.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getFormatterOptionsText)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/formatters/index.mjs [app-route] (ecmascript)");
;
function getFormatterOptionsText(separator, quote = '') {
    return Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]).map((name)=>`${quote}${name}${quote}`).join(separator);
}
}}),
"[project]/node_modules/stylelint/lib/utils/getFormatter.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getFormatter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$dynamicImport$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/dynamicImport.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs [external] (node:fs, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/formatters/index.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/getConfigForFile.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFormatterOptionsText$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getFormatterOptionsText.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
;
;
;
;
;
;
;
async function getFormatter(stylelint) {
    const cwd = stylelint._options.cwd;
    const configPath = stylelint._options.configFile || cwd;
    let formatter = stylelint._options.formatter;
    if (!formatter) {
        let configForFile;
        try {
            configForFile = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, configPath);
        } catch (err) {
            if (err instanceof Error && 'code' in err && err.code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EXIT_CODE_INVALID_CONFIG"]) {
                configForFile = undefined;
            } else {
                throw err;
            }
        }
        formatter = configForFile?.config.formatter;
    }
    if (typeof formatter === 'string') {
        let formatterFunction = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"][formatter];
        if (formatterFunction === undefined) {
            if ((0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["existsSync"])(formatter)) {
                formatterFunction = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$dynamicImport$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])((0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["resolve"])(formatter)).then((m)=>m.default);
            } else {
                const formattersText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFormatterOptionsText$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(', ', '"');
                throw new Error(`You must use a valid formatter option: ${formattersText} or a function`);
            }
        }
        return formatterFunction;
    }
    // Assume a function or a promise of a function.
    if (typeof formatter === 'function' || formatter) {
        return Promise.resolve(formatter);
    }
    formatter ??= stylelint._options._defaultFormatter ?? 'json';
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"][formatter];
}
}}),
"[project]/node_modules/stylelint/lib/prepareReturnValue.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>prepareReturnValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/emitDeprecationWarning.mjs [app-route] (ecmascript)");
;
;
function prepareReturnValue({ results, maxWarnings, quietDeprecationWarnings, formatter, cwd }) {
    let errored = false;
    for (const result of results){
        if (result.errored || result.parseErrors.length > 0 || result.warnings.some((warning)=>warning.severity === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_ERROR"])) {
            errored = true;
            result.errored = true;
        }
    }
    /** @type {LinterResult} */ const returnValue = {
        cwd,
        errored,
        results: [],
        report: '',
        /**
		 * @deprecated
		 * @todo Remove in the next major version.
		 */ get output () {
            if (!quietDeprecationWarnings && !this._outputWarned) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('`output` is deprecated.', 'RESULT_OUTPUT_PROPERTY', 'Use `report` or `code` instead.');
                this._outputWarned = true;
            }
            return this._output ?? '';
        },
        reportedDisables: [],
        ruleMetadata: getRuleMetadata(results)
    };
    // TODO: Deprecated. Remove in the next major version.
    Object.defineProperty(returnValue, '_output', {
        value: '',
        writable: true
    });
    Object.defineProperty(returnValue, '_outputWarned', {
        value: false,
        writable: true
    });
    if (maxWarnings !== undefined) {
        const foundWarnings = results.reduce((count, file)=>count + file.warnings.length, 0);
        if (foundWarnings > maxWarnings) {
            returnValue.maxWarningsExceeded = {
                maxWarnings,
                foundWarnings
            };
        }
    }
    returnValue.report = formatter(results, returnValue);
    returnValue._output = returnValue.report; // TODO: Deprecated. Remove in the next major version.
    returnValue.results = results;
    return returnValue;
}
/**
 * @param {LintResult[]} lintResults
 */ function getRuleMetadata(lintResults) {
    const [lintResult] = lintResults;
    if (lintResult === undefined) return {};
    if (lintResult._postcssResult === undefined) return {};
    return lintResult._postcssResult.stylelint.ruleMetadata;
}
}}),
"[project]/node_modules/stylelint/lib/standalone.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>standalone)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:path [external] (node:path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:fs [external] (node:fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fast$2d$glob$2f$out$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/fast-glob/out/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$globby$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/globby/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$normalize$2d$path$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/normalize-path/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$node_modules$2f$write$2d$file$2d$atomic$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/node_modules/write-file-atomic/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$allFilesIgnoredError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/allFilesIgnoredError.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$noFilesFoundError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/noFilesFoundError.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createPartialStylelintResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/createPartialStylelintResult.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/createStylelint.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/emitDeprecationWarning.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$filterFilePaths$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/filterFilePaths.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/getConfigForFile.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFileIgnorer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getFileIgnorer.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFormatter$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getFormatter.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/lintSource.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$normalizeFixMode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/normalizeFixMode.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$prepareReturnValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/prepareReturnValue.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__
]);
([__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('stylelint:standalone');
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const ALWAYS_IGNORED_GLOBS = [
    '**/node_modules/**'
];
async function standalone({ allowEmptyInput, cache, cacheLocation, cacheStrategy, code, codeFilename, config, configBasedir, configFile, customSyntax, cwd = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__["default"].cwd(), disableDefaultIgnores, files, fix, computeEditInfo, formatter, _defaultFormatter, globbyOptions, ignoreDisables, ignorePath, ignorePattern, maxWarnings, quiet, quietDeprecationWarnings = false, reportDescriptionlessDisables, reportInvalidScopeDisables, reportNeedlessDisables, reportUnscopedDisables, validate = true }) {
    const startTime = Date.now();
    const hasOneValidInput = files && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"])(code) || !files && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"])(code);
    if (!hasOneValidInput) {
        return Promise.reject(new Error('You must pass stylelint a `files` glob or a `code` string, though not both'));
    }
    // The ignorer will be used to filter file paths after the glob is checked,
    // before any files are actually read
    /** @type {import('ignore').Ignore} */ let ignorer;
    try {
        ignorer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFileIgnorer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
            cwd,
            ignorePath,
            ignorePattern
        });
    } catch (error) {
        return Promise.reject(error);
    }
    const stylelint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
        cacheLocation,
        cacheStrategy,
        config,
        configFile,
        configBasedir,
        cwd,
        formatter,
        _defaultFormatter,
        ignoreDisables,
        ignorePath,
        reportNeedlessDisables,
        reportInvalidScopeDisables,
        reportDescriptionlessDisables,
        reportUnscopedDisables,
        customSyntax,
        fix,
        computeEditInfo,
        quiet,
        quietDeprecationWarnings,
        validate
    });
    /** @type {Formatter} */ /** @see https://github.com/stylelint/stylelint/issues/7447 */ if (!quietDeprecationWarnings && formatter === 'github') {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$emitDeprecationWarning$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('"github" formatter is deprecated.', 'GITHUB_FORMATTER', 'See https://stylelint.io/awesome-stylelint#formatters for alternative formatters.');
    }
    const formatterFunction = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getFormatter$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint);
    if (!files) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertString"])(code);
        const absoluteCodeFilename = codeFilename !== undefined && !(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(codeFilename) ? (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["join"])(cwd, codeFilename) : codeFilename;
        // if file is ignored, return nothing
        if (absoluteCodeFilename && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$filterFilePaths$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ignorer, [
            (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["relative"])(cwd, absoluteCodeFilename)
        ]).length) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$prepareReturnValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                results: [],
                maxWarnings,
                quietDeprecationWarnings,
                formatter: formatterFunction,
                cwd
            });
        }
        let stylelintResult;
        try {
            const postcssResult = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, {
                code,
                codeFilename: absoluteCodeFilename
            });
            stylelintResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createPartialStylelintResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(postcssResult);
        } catch (error) {
            stylelintResult = handleError(error);
        }
        await postProcessStylelintResult(stylelint, stylelintResult, absoluteCodeFilename);
        const postcssResult = stylelintResult._postcssResult;
        const returnValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$prepareReturnValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
            results: [
                stylelintResult
            ],
            maxWarnings,
            quietDeprecationWarnings,
            formatter: formatterFunction,
            cwd
        });
        const autofix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$normalizeFixMode$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint._options.fix) ?? config?.fix ?? false;
        if (autofix && postcssResult && !postcssResult.stylelint.ignored) {
            returnValue.code = postcssResult.opts ? postcssResult.root.toString(postcssResult.opts.syntax) : code;
            returnValue._output = returnValue.code; // TODO: Deprecated. Remove in the next major version.
        }
        return returnValue;
    }
    let fileList = [
        files
    ].flat().map((entry)=>{
        const globCWD = globbyOptions && globbyOptions.cwd || cwd;
        const absolutePath = !(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(entry) ? (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["join"])(globCWD, entry) : (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["normalize"])(entry);
        if ((0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs__$5b$external$5d$__$28$node$3a$fs$2c$__cjs$29$__["existsSync"])(absolutePath)) {
            // This path points to a file. Return an escaped path to avoid globbing
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fast$2d$glob$2f$out$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].escapePath((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$normalize$2d$path$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(entry));
        }
        return entry;
    });
    if (!disableDefaultIgnores) {
        fileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map((glob)=>`!${glob}`));
    }
    // do not cache if config is explicitly overridden by option
    const useCache = cache ?? config?.cache ?? false;
    if (!useCache) {
        stylelint._fileCache.destroy();
    }
    const effectiveGlobbyOptions = {
        cwd,
        ...globbyOptions || {},
        absolute: true
    };
    const globCWD = effectiveGlobbyOptions.cwd;
    let filePaths = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$globby$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(fileList, effectiveGlobbyOptions);
    // Record the length of filePaths before ignore operation
    // Prevent prompting "No files matching the pattern 'xx' were found." when .stylelintignore ignore all input files
    const filePathsLengthBeforeIgnore = filePaths.length;
    // The ignorer filter needs to check paths relative to cwd
    filePaths = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$filterFilePaths$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ignorer, filePaths.map((p)=>(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["relative"])(globCWD, p)));
    let stylelintResults;
    if (filePaths.length) {
        let absoluteFilePaths = filePaths.map((filePath)=>{
            const absoluteFilepath = !(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["isAbsolute"])(filePath) ? (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["join"])(globCWD, filePath) : (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__["normalize"])(filePath);
            return absoluteFilepath;
        });
        const getStylelintResults = absoluteFilePaths.map(async (absoluteFilepath)=>{
            debug(`Processing ${absoluteFilepath}`);
            try {
                const postcssResult = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$lintSource$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, {
                    filePath: absoluteFilepath,
                    cache: useCache
                });
                if ((postcssResult.stylelint.stylelintError || postcssResult.stylelint.stylelintWarning) && useCache) {
                    debug(`${absoluteFilepath} contains linting errors and will not be cached.`);
                    stylelint._fileCache.removeEntry(absoluteFilepath);
                }
                /**
				 * If we're fixing, save the file with changed code
				 */ if (postcssResult.root && postcssResult.opts && !postcssResult.stylelint.ignored && fix) {
                    const fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);
                    if (postcssResult.root && postcssResult.root.source && postcssResult.root.source.input.css !== fixedCss) {
                        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$node_modules$2f$write$2d$file$2d$atomic$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(absoluteFilepath, fixedCss);
                    }
                }
                const stylelintResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createPartialStylelintResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(postcssResult);
                await postProcessStylelintResult(stylelint, stylelintResult, absoluteFilepath);
                return stylelintResult;
            } catch (error) {
                // On any error, we should not cache the lint result
                stylelint._fileCache.removeEntry(absoluteFilepath);
                const stylelintResult = handleError(error);
                await postProcessStylelintResult(stylelint, stylelintResult, absoluteFilepath);
                return stylelintResult;
            }
        });
        stylelintResults = await Promise.all(getStylelintResults);
    } else if (allowEmptyInput || config?.allowEmptyInput || await canAllowEmptyInput(stylelint)) {
        stylelintResults = await Promise.all([]);
    } else if (filePathsLengthBeforeIgnore) {
        // All input files ignored
        stylelintResults = await Promise.reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$allFilesIgnoredError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]());
    } else {
        stylelintResults = await Promise.reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$noFilesFoundError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"](fileList));
    }
    if (useCache) {
        stylelint._fileCache.reconcile();
    }
    const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$prepareReturnValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
        results: stylelintResults,
        maxWarnings,
        quietDeprecationWarnings,
        formatter: formatterFunction,
        cwd
    });
    debug(`Linting complete in ${Date.now() - startTime}ms`);
    return result;
}
/**
 * @import {CssSyntaxError} from 'stylelint'
 *
 * @param {unknown} error
 * @returns {import('stylelint').LintResult}
 */ function handleError(error) {
    if (error instanceof Error && error.name === 'CssSyntaxError') {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createPartialStylelintResult$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(undefined, error);
    }
    throw error;
}
/**
 * @param {import('stylelint').InternalApi} stylelint
 * @returns {Promise<boolean>}
 */ async function canAllowEmptyInput(stylelint) {
    const config = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint);
    return Boolean(config?.config?.allowEmptyInput);
}
/**
 * @param {import('stylelint').InternalApi} stylelint
 * @param {import('stylelint').LintResult} stylelintResult
 * @param {string} [filePath]
 * @returns {Promise<void>}
 */ async function postProcessStylelintResult(stylelint, stylelintResult, filePath) {
    const configForFile = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$getConfigForFile$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(stylelint, filePath, filePath);
    const config = configForFile === null ? {} : configForFile.config;
    if (!config._processorFunctions) {
        return;
    }
    for (let postprocess of config._processorFunctions.values()){
        postprocess?.(stylelintResult, stylelintResult._postcssResult?.root);
    }
}
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),
"[project]/node_modules/stylelint/lib/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$checkAgainstRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/checkAgainstRule.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createPlugin$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/createPlugin.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/createStylelint.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/formatters/index.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reference/properties.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$postcssPlugin$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/postcssPlugin.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$resolveConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/resolveConfig.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/rules/index.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$standalone$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/standalone.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
var __turbopack_async_dependencies__ = __turbopack_handle_async_dependencies__([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$postcssPlugin$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$resolveConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$standalone$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__
]);
([__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$postcssPlugin$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$resolveConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$standalone$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__] = __turbopack_async_dependencies__.then ? (await __turbopack_async_dependencies__)() : __turbopack_async_dependencies__);
;
;
;
;
;
;
;
;
;
;
;
;
/** @type {import('stylelint').PublicApi} */ const stylelint = Object.assign(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$postcssPlugin$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"], {
    lint: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$standalone$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
    rules: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$rules$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
    formatters: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
    createPlugin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createPlugin$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
    resolveConfig: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$resolveConfig$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
    _createLinter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$createStylelint$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
    utils: {
        report: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
        ruleMessages: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
        validateOptions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"],
        checkAgainstRule: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$checkAgainstRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]
    },
    reference: {
        longhandSubPropertiesOfShorthandProperties: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["longhandSubPropertiesOfShorthandProperties"]
    }
});
const __TURBOPACK__default__export__ = stylelint;
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, false);}),

};

//# sourceMappingURL=node_modules_stylelint_e787321d._.js.map