module.exports = {

"[project]/node_modules/postcss-value-parser/lib/unit.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var minus = "-".charCodeAt(0);
var plus = "+".charCodeAt(0);
var dot = ".".charCodeAt(0);
var exp = "e".charCodeAt(0);
var EXP = "E".charCodeAt(0);
// Check if three code points would start a number
// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
function likeNumber(value) {
    var code = value.charCodeAt(0);
    var nextCode;
    if (code === plus || code === minus) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) {
            return true;
        }
        var nextNextCode = value.charCodeAt(2);
        if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
            return true;
        }
        return false;
    }
    if (code === dot) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) {
            return true;
        }
        return false;
    }
    if (code >= 48 && code <= 57) {
        return true;
    }
    return false;
}
// Consume a number
// https://www.w3.org/TR/css-syntax-3/#consume-number
module.exports = function(value) {
    var pos = 0;
    var length = value.length;
    var code;
    var nextCode;
    var nextNextCode;
    if (length === 0 || !likeNumber(value)) {
        return false;
    }
    code = value.charCodeAt(pos);
    if (code === plus || code === minus) {
        pos++;
    }
    while(pos < length){
        code = value.charCodeAt(pos);
        if (code < 48 || code > 57) {
            break;
        }
        pos += 1;
    }
    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    if (code === dot && nextCode >= 48 && nextCode <= 57) {
        pos += 2;
        while(pos < length){
            code = value.charCodeAt(pos);
            if (code < 48 || code > 57) {
                break;
            }
            pos += 1;
        }
    }
    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    nextNextCode = value.charCodeAt(pos + 2);
    if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {
        pos += nextCode === plus || nextCode === minus ? 3 : 2;
        while(pos < length){
            code = value.charCodeAt(pos);
            if (code < 48 || code > 57) {
                break;
            }
            pos += 1;
        }
    }
    return {
        number: value.slice(0, pos),
        unit: value.slice(pos)
    };
};
}}),
"[project]/node_modules/postcss-value-parser/lib/parse.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var openParentheses = "(".charCodeAt(0);
var closeParentheses = ")".charCodeAt(0);
var singleQuote = "'".charCodeAt(0);
var doubleQuote = '"'.charCodeAt(0);
var backslash = "\\".charCodeAt(0);
var slash = "/".charCodeAt(0);
var comma = ",".charCodeAt(0);
var colon = ":".charCodeAt(0);
var star = "*".charCodeAt(0);
var uLower = "u".charCodeAt(0);
var uUpper = "U".charCodeAt(0);
var plus = "+".charCodeAt(0);
var isUnicodeRange = /^[a-f0-9?-]+$/i;
module.exports = function(input) {
    var tokens = [];
    var value = input;
    var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;
    var pos = 0;
    var code = value.charCodeAt(pos);
    var max = value.length;
    var stack = [
        {
            nodes: tokens
        }
    ];
    var balanced = 0;
    var parent;
    var name = "";
    var before = "";
    var after = "";
    while(pos < max){
        // Whitespaces
        if (code <= 32) {
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            }while (code <= 32)
            token = value.slice(pos, next);
            prev = tokens[tokens.length - 1];
            if (code === closeParentheses && balanced) {
                after = token;
            } else if (prev && prev.type === "div") {
                prev.after = token;
                prev.sourceEndIndex += token.length;
            } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === "function" && parent.value !== "calc")) {
                before = token;
            } else {
                tokens.push({
                    type: "space",
                    sourceIndex: pos,
                    sourceEndIndex: next,
                    value: token
                });
            }
            pos = next;
        // Quotes
        } else if (code === singleQuote || code === doubleQuote) {
            next = pos;
            quote = code === singleQuote ? "'" : '"';
            token = {
                type: "string",
                sourceIndex: pos,
                quote: quote
            };
            do {
                escape = false;
                next = value.indexOf(quote, next + 1);
                if (~next) {
                    escapePos = next;
                    while(value.charCodeAt(escapePos - 1) === backslash){
                        escapePos -= 1;
                        escape = !escape;
                    }
                } else {
                    value += quote;
                    next = value.length - 1;
                    token.unclosed = true;
                }
            }while (escape)
            token.value = value.slice(pos + 1, next);
            token.sourceEndIndex = token.unclosed ? next : next + 1;
            tokens.push(token);
            pos = next + 1;
            code = value.charCodeAt(pos);
        // Comments
        } else if (code === slash && value.charCodeAt(pos + 1) === star) {
            next = value.indexOf("*/", pos);
            token = {
                type: "comment",
                sourceIndex: pos,
                sourceEndIndex: next + 2
            };
            if (next === -1) {
                token.unclosed = true;
                next = value.length;
                token.sourceEndIndex = next;
            }
            token.value = value.slice(pos + 2, next);
            tokens.push(token);
            pos = next + 2;
            code = value.charCodeAt(pos);
        // Operation within calc
        } else if ((code === slash || code === star) && parent && parent.type === "function" && parent.value === "calc") {
            token = value[pos];
            tokens.push({
                type: "word",
                sourceIndex: pos - before.length,
                sourceEndIndex: pos + token.length,
                value: token
            });
            pos += 1;
            code = value.charCodeAt(pos);
        // Dividers
        } else if (code === slash || code === comma || code === colon) {
            token = value[pos];
            tokens.push({
                type: "div",
                sourceIndex: pos - before.length,
                sourceEndIndex: pos + token.length,
                value: token,
                before: before,
                after: ""
            });
            before = "";
            pos += 1;
            code = value.charCodeAt(pos);
        // Open parentheses
        } else if (openParentheses === code) {
            // Whitespaces after open parentheses
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            }while (code <= 32)
            parenthesesOpenPos = pos;
            token = {
                type: "function",
                sourceIndex: pos - name.length,
                value: name,
                before: value.slice(parenthesesOpenPos + 1, next)
            };
            pos = next;
            if (name === "url" && code !== singleQuote && code !== doubleQuote) {
                next -= 1;
                do {
                    escape = false;
                    next = value.indexOf(")", next + 1);
                    if (~next) {
                        escapePos = next;
                        while(value.charCodeAt(escapePos - 1) === backslash){
                            escapePos -= 1;
                            escape = !escape;
                        }
                    } else {
                        value += ")";
                        next = value.length - 1;
                        token.unclosed = true;
                    }
                }while (escape)
                // Whitespaces before closed
                whitespacePos = next;
                do {
                    whitespacePos -= 1;
                    code = value.charCodeAt(whitespacePos);
                }while (code <= 32)
                if (parenthesesOpenPos < whitespacePos) {
                    if (pos !== whitespacePos + 1) {
                        token.nodes = [
                            {
                                type: "word",
                                sourceIndex: pos,
                                sourceEndIndex: whitespacePos + 1,
                                value: value.slice(pos, whitespacePos + 1)
                            }
                        ];
                    } else {
                        token.nodes = [];
                    }
                    if (token.unclosed && whitespacePos + 1 !== next) {
                        token.after = "";
                        token.nodes.push({
                            type: "space",
                            sourceIndex: whitespacePos + 1,
                            sourceEndIndex: next,
                            value: value.slice(whitespacePos + 1, next)
                        });
                    } else {
                        token.after = value.slice(whitespacePos + 1, next);
                        token.sourceEndIndex = next;
                    }
                } else {
                    token.after = "";
                    token.nodes = [];
                }
                pos = next + 1;
                token.sourceEndIndex = token.unclosed ? next : pos;
                code = value.charCodeAt(pos);
                tokens.push(token);
            } else {
                balanced += 1;
                token.after = "";
                token.sourceEndIndex = pos + 1;
                tokens.push(token);
                stack.push(token);
                tokens = token.nodes = [];
                parent = token;
            }
            name = "";
        // Close parentheses
        } else if (closeParentheses === code && balanced) {
            pos += 1;
            code = value.charCodeAt(pos);
            parent.after = after;
            parent.sourceEndIndex += after.length;
            after = "";
            balanced -= 1;
            stack[stack.length - 1].sourceEndIndex = pos;
            stack.pop();
            parent = stack[balanced];
            tokens = parent.nodes;
        // Words
        } else {
            next = pos;
            do {
                if (code === backslash) {
                    next += 1;
                }
                next += 1;
                code = value.charCodeAt(next);
            }while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === "function" && parent.value === "calc" || code === slash && parent.type === "function" && parent.value === "calc" || code === closeParentheses && balanced))
            token = value.slice(pos, next);
            if (openParentheses === code) {
                name = token;
            } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {
                tokens.push({
                    type: "unicode-range",
                    sourceIndex: pos,
                    sourceEndIndex: next,
                    value: token
                });
            } else {
                tokens.push({
                    type: "word",
                    sourceIndex: pos,
                    sourceEndIndex: next,
                    value: token
                });
            }
            pos = next;
        }
    }
    for(pos = stack.length - 1; pos; pos -= 1){
        stack[pos].unclosed = true;
        stack[pos].sourceEndIndex = value.length;
    }
    return stack[0].nodes;
};
}}),
"[project]/node_modules/postcss-value-parser/lib/walk.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = function walk(nodes, cb, bubble) {
    var i, max, node, result;
    for(i = 0, max = nodes.length; i < max; i += 1){
        node = nodes[i];
        if (!bubble) {
            result = cb(node, i, nodes);
        }
        if (result !== false && node.type === "function" && Array.isArray(node.nodes)) {
            walk(node.nodes, cb, bubble);
        }
        if (bubble) {
            cb(node, i, nodes);
        }
    }
};
}}),
"[project]/node_modules/postcss-value-parser/lib/stringify.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
function stringifyNode(node, custom) {
    var type = node.type;
    var value = node.value;
    var buf;
    var customResult;
    if (custom && (customResult = custom(node)) !== undefined) {
        return customResult;
    } else if (type === "word" || type === "space") {
        return value;
    } else if (type === "string") {
        buf = node.quote || "";
        return buf + value + (node.unclosed ? "" : buf);
    } else if (type === "comment") {
        return "/*" + value + (node.unclosed ? "" : "*/");
    } else if (type === "div") {
        return (node.before || "") + value + (node.after || "");
    } else if (Array.isArray(node.nodes)) {
        buf = stringify(node.nodes, custom);
        if (type !== "function") {
            return buf;
        }
        return value + "(" + (node.before || "") + buf + (node.after || "") + (node.unclosed ? "" : ")");
    }
    return value;
}
function stringify(nodes, custom) {
    var result, i;
    if (Array.isArray(nodes)) {
        result = "";
        for(i = nodes.length - 1; ~i; i -= 1){
            result = stringifyNode(nodes[i], custom) + result;
        }
        return result;
    }
    return stringifyNode(nodes, custom);
}
module.exports = stringify;
}}),
"[project]/node_modules/postcss-value-parser/lib/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var parse = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/parse.js [app-route] (ecmascript)");
var walk = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/walk.js [app-route] (ecmascript)");
var stringify = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/stringify.js [app-route] (ecmascript)");
function ValueParser(value) {
    if (this instanceof ValueParser) {
        this.nodes = parse(value);
        return this;
    }
    return new ValueParser(value);
}
ValueParser.prototype.toString = function() {
    return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
};
ValueParser.prototype.walk = function(cb, bubble) {
    walk(this.nodes, cb, bubble);
    return this;
};
ValueParser.unit = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/unit.js [app-route] (ecmascript)");
ValueParser.walk = walk;
ValueParser.stringify = stringify;
module.exports = ValueParser;
}}),
"[project]/node_modules/stylelint/lib/reference/prefixes.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * used by value-no-vendor-prefix and selector-no-vendor-prefix
 * i.e. this list is deliberately not exhaustive
 *
 * @see https://www.w3.org/TR/CSS22/syndata.html#vendor-keyword-history
 * @type {ReadonlySet<string>}
 */ __turbopack_context__.s({
    "prefixes": (()=>prefixes)
});
const prefixes = new Set([
    '-webkit-',
    '-moz-',
    '-ms-',
    '-o-',
    '-xv-',
    '-apple-',
    '-wap-',
    '-khtml-'
]);
}}),
"[project]/node_modules/stylelint/lib/utils/hasPrefix.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasPrefix)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$prefixes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reference/prefixes.mjs [app-route] (ecmascript)");
;
const HAS_PREFIX_REGEX = new RegExp(`(?:${[
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$prefixes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prefixes"]
].join('|')})`, 'i');
function hasPrefix(string) {
    return HAS_PREFIX_REGEX.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Contains helpers for working with vendor prefixes.
 *
 * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2
 *
 * @namespace vendor
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    /**
	 * Returns the vendor prefix extracted from an input string.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} vendor prefix or empty string
	 *
	 * @example
	 * vendor.prefix('-moz-tab-size') //=> '-moz-'
	 * vendor.prefix('tab-size')      //=> ''
	 */ prefix (prop) {
        const match = prop.match(/^(-\w+-)/);
        if (match) {
            return match[0] || '';
        }
        return '';
    },
    /**
	 * Returns the input string stripped of its vendor prefix.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} String name without vendor prefixes.
	 *
	 * @example
	 * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
	 */ unprefixed (prop) {
        return prop.replace(/^-\w+-/, '');
    }
};
}}),
"[project]/node_modules/stylelint/lib/utils/isAutoprefixable.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)");
;
/**
 * Extract each list using the internal API of Autoprefixer 10.2.5.
 *
 * @see https://github.com/postcss/autoprefixer/tree/10.2.5
 *
 * @example
 * const autoprefixer = require('autoprefixer');
 * const Browsers = require('autoprefixer/lib/browsers');
 * const Prefixes = require('autoprefixer/lib/prefixes');
 * const utils = require('autoprefixer/lib/utils');
 *
 * const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));
 */ /**
 * @example
 * Object.keys(prefixes.remove).filter((s) => s.startsWith('@'));
 */ const AT_RULES = new Set([
    '@-moz-keyframes',
    '@-moz-document',
    '@-ms-keyframes',
    '@-ms-viewport',
    '@-o-keyframes',
    '@-o-viewport',
    '@-webkit-keyframes',
    '@-webkit-viewport'
]);
/**
 * @example
 * prefixes.remove.selectors.map((s) => s.prefixed);
 */ const SELECTORS = new Set([
    ':-moz-any-link',
    ':-moz-full-screen',
    ':-moz-placeholder',
    ':-moz-placeholder-shown',
    ':-moz-read-only',
    ':-moz-read-write',
    ':-ms-fullscreen',
    ':-ms-input-placeholder',
    ':-webkit-any-link',
    ':-webkit-full-screen',
    '::-moz-placeholder',
    '::-moz-selection',
    '::-ms-input-placeholder',
    '::-webkit-backdrop',
    '::-webkit-input-placeholder'
]);
/**
 * @example
 * Object.entries(autoprefixer.data.prefixes)
 *   .filter(([key, value]) => !value.selector && !value.props && !key.startsWith('@'))
 *   .map(([key, value]) => key);
 */ const PROPERTIES = new Set([
    'align-content',
    'align-items',
    'align-self',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'appearance',
    'backdrop-filter',
    'backface-visibility',
    'background-clip',
    'background-origin',
    'background-size',
    'border-block-end',
    'border-block-start',
    'border-bottom-left-radius',
    'border-bottom-right-radius',
    'border-image',
    'border-inline-end',
    'border-inline-start',
    'border-radius',
    'border-top-left-radius',
    'border-top-right-radius',
    'box-decoration-break',
    'box-shadow',
    'box-sizing',
    'break-after',
    'break-before',
    'break-inside',
    'clip-path',
    'color-adjust',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'columns',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'flow-from',
    'flow-into',
    'font-feature-settings',
    'font-kerning',
    'font-language-override',
    'font-variant-ligatures',
    'grid-area',
    'grid-column',
    'grid-column-align',
    'grid-column-end',
    'grid-column-start',
    'grid-row',
    'grid-row-align',
    'grid-row-end',
    'grid-row-start',
    'grid-template',
    'grid-template-areas',
    'grid-template-columns',
    'grid-template-rows',
    'hyphens',
    'image-rendering',
    'justify-content',
    'margin-block-end',
    'margin-block-start',
    'margin-inline-end',
    'margin-inline-start',
    'mask',
    'mask-border',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-border-slice',
    'mask-border-source',
    'mask-border-width',
    'mask-clip',
    'mask-composite',
    'mask-image',
    'mask-origin',
    'mask-position',
    'mask-repeat',
    'mask-size',
    'object-fit',
    'object-position',
    'order',
    'overscroll-behavior',
    'padding-block-end',
    'padding-block-start',
    'padding-inline-end',
    'padding-inline-start',
    'perspective',
    'perspective-origin',
    'place-self',
    'region-fragment',
    'scroll-snap-coordinate',
    'scroll-snap-destination',
    'scroll-snap-points-x',
    'scroll-snap-points-y',
    'scroll-snap-type',
    'shape-image-threshold',
    'shape-margin',
    'shape-outside',
    'tab-size',
    'text-align-last',
    'text-decoration',
    'text-decoration-color',
    'text-decoration-line',
    'text-decoration-skip',
    'text-decoration-skip-ink',
    'text-decoration-style',
    'text-emphasis',
    'text-emphasis-color',
    'text-emphasis-position',
    'text-emphasis-style',
    'text-orientation',
    'text-overflow',
    'text-size-adjust',
    'text-spacing',
    'touch-action',
    'transform',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'user-select',
    'writing-mode'
]);
/**
 * This list is currently being used to compile all the prefixed values that can safely be unprefixed.
 * i.e. value-no-vendor-prefix autofix ought to be able to handle it appropriately
 * It was initially populated using the following example:
 * @example
 * Object.values(prefixes.remove)
 *   .filter((p) => Array.isArray(p.values))
 *   .flatMap((p) => p.values)
 *   .map((p) => utils.removeNote(p.prefixed)) // normalize '-webkit- old'
 *   .filter((p) => !p.endsWith('-'));         // remove '-webkit-' only
 *
 * @see https://github.com/stylelint/stylelint/pull/5312/files#r636018013
 */ const PROPERTY_VALUES = new Set([
    '-moz-all',
    '-moz-calc',
    '-moz-crisp-edges',
    '-moz-element',
    '-moz-fit-content',
    '-moz-grab',
    '-moz-grabbing',
    '-moz-initial',
    '-moz-isolate',
    '-moz-isolate-override',
    '-moz-linear-gradient',
    '-moz-max-content',
    '-moz-min-content',
    '-moz-pre-wrap',
    '-moz-plaintext',
    '-moz-radial-gradient',
    '-moz-repeating-linear-gradient',
    '-moz-repeating-radial-gradient',
    '-moz-zoom-in',
    '-moz-zoom-out',
    '-ms-flexbox',
    '-ms-grid',
    '-ms-inline-grid',
    '-ms-linear-gradient',
    '-ms-radial-gradient',
    '-ms-repeating-linear-gradient',
    '-ms-repeating-radial-gradient',
    '-o-crisp-edges',
    '-o-linear-gradient',
    '-o-pre-wrap',
    '-o-radial-gradient',
    '-o-repeating-linear-gradient',
    '-o-repeating-radial-gradient',
    '-webkit-calc',
    '-webkit-cross-fade',
    '-webkit-filter',
    '-webkit-fit-content',
    '-webkit-flex',
    '-webkit-grab',
    '-webkit-grabbing',
    '-webkit-image-set',
    '-webkit-inline-flex',
    '-webkit-isolate',
    '-webkit-linear-gradient',
    '-webkit-max-content',
    '-webkit-min-content',
    '-webkit-plaintext',
    '-webkit-radial-gradient',
    '-webkit-repeating-linear-gradient',
    '-webkit-repeating-radial-gradient',
    '-webkit-sticky',
    '-webkit-zoom-in',
    '-webkit-zoom-out',
    '-xv-digits',
    '-xv-literal-punctuation',
    '-xv-no-punctuation',
    // Firefox does not support
    // ethiopic-halehame, ethiopic-halehame-am, ethiopic-halehame-ti-er and ethiopic-halehame-ti-et
    // without a -moz- prefix
    // see https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type
    '-moz-arabic-indic',
    '-moz-bengali',
    '-moz-cjk-earthly-branch',
    '-moz-cjk-heavenly-stem',
    '-moz-devanagari',
    '-moz-ethiopic-numeric',
    '-moz-gujarati',
    '-moz-gurmukhi',
    '-moz-hangul',
    '-moz-hangul-consonant',
    '-moz-japanese-formal',
    '-moz-japanese-informal',
    '-moz-kannada',
    '-moz-khmer',
    '-moz-lao',
    '-moz-malayalam',
    '-moz-myanmar',
    '-moz-oriya',
    '-moz-persian',
    '-moz-simp-chinese-formal',
    '-moz-simp-chinese-informal',
    '-moz-tamil',
    '-moz-telugu',
    '-moz-thai',
    '-moz-trad-chinese-formal',
    '-moz-trad-chinese-informal'
]);
const __TURBOPACK__default__export__ = {
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ atRuleName (identifier) {
        return AT_RULES.has(`@${identifier.toLowerCase()}`);
    },
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ selector (identifier) {
        return SELECTORS.has(identifier.toLowerCase());
    },
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ mediaFeatureName (identifier) {
        return identifier.toLowerCase().includes('device-pixel-ratio');
    },
    /**
	 * @param {string} identifier
	 * @returns {boolean}
	 */ property (identifier) {
        const ident = identifier.toLowerCase();
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].prefix(ident).length === 0) {
            return false;
        }
        return PROPERTIES.has(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefixed(ident));
    },
    /**
	 * @param {string} value
	 * @returns {boolean}
	 */ propertyValue (value) {
        return PROPERTY_VALUES.has(value.toLowerCase());
    },
    /**
	 * @param {string} value
	 * @returns {string}
	 */ unprefix (value) {
        return value.replace(/-\w+-/, '');
    }
};
}}),
"[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check whether a property is SCSS variable
 *
 * @param {string} property
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isScssVariable)
});
function isScssVariable(property) {
    // SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))
    if (property.startsWith('$')) {
        return true;
    }
    // SCSS var within a namespace (e.g. namespace.$var: x)
    if (property.includes('.$')) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isStandardSyntaxDeclaration)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)");
;
;
function isStandardSyntaxDeclaration(decl) {
    const prop = decl.prop;
    const parent = decl.parent;
    // SCSS var; covers map and list declarations
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prop)) {
        return false;
    }
    // Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})
    if (prop[0] === '@' && prop[1] !== '{') {
        return false;
    }
    // Less map declaration
    if (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {
        return false;
    }
    // Less map (e.g. #my-map() { myprop: red; })
    if (parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(parent) && parent.selector && parent.selector.startsWith('#') && parent.selector.endsWith('()')) {
        return false;
    }
    // Sass nested properties (e.g. border: { style: solid; color: red; })
    if (parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(parent) && parent.selector && parent.selector[parent.selector.length - 1] === ':' && parent.selector.substring(0, 2) !== '--') {
        return false;
    }
    // Less &:extend
    if ('extend' in decl && decl.extend) {
        return false;
    }
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasLessInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasLessInterpolation)
});
const HAS_LESS_INTERPOLATION = /@\{.+?\}/;
function hasLessInterpolation(string) {
    return HAS_LESS_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasPsvInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasPsvInterpolation)
});
const HAS_PSV_INTERPOLATION = /\$\(.+?\)/;
function hasPsvInterpolation(string) {
    return HAS_PSV_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasScssInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasScssInterpolation)
});
const HAS_SCSS_INTERPOLATION = /#\{.+?\}/s;
function hasScssInterpolation(string) {
    return HAS_SCSS_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasTplInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasTplInterpolation)
});
const HAS_TPL_INTERPOLATION = /\{.+?\}/s;
function hasTplInterpolation(string) {
    return HAS_TPL_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasInterpolation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasLessInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasLessInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasPsvInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasPsvInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasScssInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasScssInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasTplInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasTplInterpolation.mjs [app-route] (ecmascript)");
;
;
;
;
function hasInterpolation(string) {
    // SCSS or Less interpolation
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasLessInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasScssInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasTplInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasPsvInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string)) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxProperty.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isStandardSyntaxProperty)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)");
;
;
function isStandardSyntaxProperty(property) {
    // SCSS var
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(property)) {
        return false;
    }
    // Less var (e.g. @var: x)
    if (property.startsWith('@')) {
        return false;
    }
    // Less append property value with space (e.g. transform+_: scale(2))
    if (property.endsWith('+') || property.endsWith('+_')) {
        return false;
    }
    // SCSS or Less interpolation
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(property)) {
        return false;
    }
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/utils/setDeclarationValue.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/** @typedef {import('postcss').Declaration} Declaration */ /**
 * @param {Declaration} decl
 * @param {string} value
 * @returns {Declaration} The declaration that was passed in.
 */ __turbopack_context__.s({
    "default": (()=>setDeclarationValue)
});
function setDeclarationValue(decl, value) {
    const raws = decl.raws;
    if (raws.value) {
        raws.value.raw = value;
    } else {
        decl.value = value;
    }
    return decl;
}
}}),
"[project]/node_modules/stylelint/lib/rules/value-no-vendor-prefix/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$postcss$2d$value$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/postcss-value-parser/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasPrefix$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasPrefix.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAutoprefixable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isAutoprefixable.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxProperty.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$setDeclarationValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/setDeclarationValue.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
const ruleName = 'value-no-vendor-prefix';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    rejected: (value)=>`Unexpected vendor-prefixed value "${value}"`
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/value-no-vendor-prefix',
    fixable: true
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary, secondaryOptions)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary
        }, {
            optional: true,
            actual: secondaryOptions,
            possible: {
                ignoreValues: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"],
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRegExp"]
                ]
            }
        });
        if (!validOptions) {
            return;
        }
        /**
		 * @typedef {string | RegExp} IgnoreValue
		 * @type {{ raw: IgnoreValue[], unprefixed: IgnoreValue[] }}
		 * @todo use Object.groupBy once Node v20 support is dropped
		 */ const groups = {
            raw: [],
            unprefixed: []
        };
        [
            secondaryOptions?.ignoreValues ?? []
        ].flat().forEach((value)=>{
            const useRawValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRegExp"])(value) || value.startsWith('/') && value.match(/\/i?$/);
            const group = useRawValue ? 'raw' : 'unprefixed';
            groups[group].push(value);
        });
        root.walkDecls((decl)=>{
            const { value } = decl;
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasPrefix$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(value)) return;
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl.prop)) {
                return;
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(groups, 'raw', value)) {
                return;
            }
            /**
			 * @todo consolidate in the next major
			 * @see stylelint/stylelint#7542
			 */ if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(groups, 'unprefixed', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefixed(value))) {
                return;
            }
            const parsedValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$postcss$2d$value$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(value);
            parsedValue.walk((node)=>{
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAutoprefixable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].propertyValue(node.value)) {
                    return;
                }
                const index = decl.prop.length + (decl.raws.between || '').length + node.sourceIndex;
                const fix = ()=>{
                    node.value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isAutoprefixable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefix(node.value);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$setDeclarationValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl, parsedValue.toString());
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                    message: messages.rejected,
                    messageArgs: [
                        node.value
                    ],
                    node: decl,
                    index,
                    endIndex: index + node.value.length,
                    result,
                    ruleName,
                    fix: {
                        apply: fix,
                        node: decl
                    }
                });
            });
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_8c07a62f._.js.map