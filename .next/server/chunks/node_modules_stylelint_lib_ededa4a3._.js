module.exports = {

"[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Unite two or more sets
 *
 * @param {Iterable<string>[]} args
 * @see {@link https://github.com/microsoft/TypeScript/issues/57228|GitHub}
 */ __turbopack_context__.s({
    "default": (()=>uniteSets)
});
function uniteSets(...args) {
    return new Set([
        ...args
    ].reduce((result, set)=>[
            ...result,
            ...set
        ], []));
}
}}),
"[project]/node_modules/stylelint/lib/reference/atKeywords.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atKeywords": (()=>atKeywords),
    "deprecatedAtKeywords": (()=>deprecatedAtKeywords),
    "nestingSupportedAtKeywords": (()=>nestingSupportedAtKeywords),
    "pageMarginAtKeywords": (()=>pageMarginAtKeywords)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)");
;
const deprecatedAtKeywords = new Set([
    'apply',
    'document',
    'nest',
    'viewport'
]);
const nestingSupportedAtKeywords = new Set([
    'container',
    'layer',
    'media',
    'scope',
    'starting-style',
    'supports'
]);
const pageMarginAtKeywords = new Set([
    'top-left-corner',
    'top-left',
    'top-center',
    'top-right',
    'top-right-corner',
    'bottom-left-corner',
    'bottom-left',
    'bottom-center',
    'bottom-right',
    'bottom-right-corner',
    'left-top',
    'left-middle',
    'left-bottom',
    'right-top',
    'right-middle',
    'right-bottom'
]);
/**
 * @see https://www.w3.org/TR/css-fonts-4/#font-feature-values-font-feature-value-type
 * @type {ReadonlySet<string>}
 */ const fontFeatureValueTypes = new Set([
    'annotation',
    'character-variant',
    'historical-forms',
    'ornaments',
    'styleset',
    'stylistic',
    'swash'
]);
const atKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(deprecatedAtKeywords, nestingSupportedAtKeywords, pageMarginAtKeywords, fontFeatureValueTypes, [
    'counter-style',
    'custom-media',
    'custom-selector',
    'font-face',
    'font-feature-values',
    'font-palette-values',
    'import',
    'keyframes',
    'namespace',
    'page',
    'position-try',
    'property',
    'scroll-timeline',
    'view-transition'
]);
}}),
"[project]/node_modules/stylelint/lib/utils/regexes.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atRuleRegexes": (()=>atRuleRegexes),
    "descriptorRegexes": (()=>descriptorRegexes),
    "functionRegexes": (()=>functionRegexes),
    "propertyRegexes": (()=>propertyRegexes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$atKeywords$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reference/atKeywords.mjs [app-route] (ecmascript)");
;
const atRuleRegexes = {
    mediaName: /^media$/i,
    keyframesName: /^(-(o|moz|ms|webkit)-)?keyframes$/i,
    propertyName: /^property$/i,
    importName: /^import$/i,
    unsupportedNestingNames: new RegExp(`^((?!${[
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$atKeywords$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["nestingSupportedAtKeywords"].values()
    ].join('|')}).)*$`, 'i'),
    layerName: /^layer$/i,
    containerName: /^container$/i
};
const descriptorRegexes = {
    syntaxName: /^syntax$/i
};
const functionRegexes = {
    layer: /layer\((.*?)\)/i
};
const propertyRegexes = {
    containerNameAndShorthandName: /^container(-name)?$/i
};
}}),
"[project]/node_modules/stylelint/lib/utils/getAtRuleParams.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @param {import('postcss').AtRule} atRule
 * @returns {string}
 */ __turbopack_context__.s({
    "default": (()=>getAtRuleParams)
});
function getAtRuleParams(atRule) {
    return atRule.raws.params?.raw ?? atRule.params;
}
}}),
"[project]/node_modules/stylelint/lib/utils/getRuleSelector.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @param {import('postcss').Rule} ruleNode
 * @returns {string}
 */ __turbopack_context__.s({
    "default": (()=>getRuleSelector)
});
function getRuleSelector(ruleNode) {
    const raws = ruleNode.raws;
    return raws.selector && raws.selector.raw || ruleNode.selector;
}
}}),
"[project]/node_modules/stylelint/lib/utils/nodeFieldIndices.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "atRuleAfterIndex": (()=>atRuleAfterIndex),
    "atRuleAfterNameIndex": (()=>atRuleAfterNameIndex),
    "atRuleBetweenIndex": (()=>atRuleBetweenIndex),
    "atRuleParamIndex": (()=>atRuleParamIndex),
    "declarationBetweenIndex": (()=>declarationBetweenIndex),
    "declarationValueIndex": (()=>declarationValueIndex),
    "ruleAfterIndex": (()=>ruleAfterIndex),
    "ruleBetweenIndex": (()=>ruleBetweenIndex)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getAtRuleParams$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getAtRuleParams.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getRuleSelector$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getRuleSelector.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
;
;
;
function atRuleParamIndex(atRule) {
    const index = atRuleAfterNameIndex(atRule);
    return index + (atRule.raws.afterName?.length ?? 0);
}
function atRuleAfterIndex(atRule) {
    // subtract 1 for `}`
    const endOffset = atRule.source?.end?.offset;
    if (!endOffset) return atRule.toString().length - 1;
    const afterLength = atRule.raws?.after?.length;
    if (!afterLength) return endOffset - 1;
    return endOffset - (afterLength + 1);
}
function atRuleAfterNameIndex(atRule) {
    // Initial 1 is for the `@`
    return 1 + atRule.name.length;
}
function atRuleBetweenIndex(atRule) {
    return atRuleParamIndex(atRule) + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getAtRuleParams$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(atRule).length;
}
function declarationBetweenIndex(decl) {
    const { prop } = decl.raws;
    const propIsObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObject"])(prop);
    return countChars([
        propIsObject && 'prefix' in prop && prop.prefix,
        propIsObject && 'raw' in prop && prop.raw || decl.prop,
        propIsObject && 'suffix' in prop && prop.suffix
    ]);
}
function declarationValueIndex(decl) {
    const { between, value } = decl.raws;
    return declarationBetweenIndex(decl) + countChars([
        between || ':',
        value && 'prefix' in value && value.prefix
    ]);
}
function ruleBetweenIndex(rule) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getRuleSelector$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(rule).length;
}
function ruleAfterIndex(rule) {
    // subtract 1 for `}`
    const endOffset = rule.source?.end?.offset;
    if (!endOffset) return rule.toString().length - 1;
    const afterLength = rule.raws?.after?.length;
    if (!afterLength) return endOffset - 1;
    return endOffset - (afterLength + 1);
}
/**
 * @param {unknown[]} values
 * @returns {number}
 */ function countChars(values) {
    return values.reduce((/** @type {number} */ count, value)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"])(value)) return count + value.length;
        return count;
    }, 0);
}
}}),
"[project]/node_modules/stylelint/lib/utils/getLexer.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @typedef {import('css-tree').Lexer} Lexer
 */ /**
 * @param {import('stylelint').RuleContext} context
 * @returns {Lexer}
 */ __turbopack_context__.s({
    "default": (()=>getLexer)
});
function getLexer(context) {
    if (!context?.lexer) {
        throw new Error('Expected a "lexer" object');
    }
    return context.lexer;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check whether a at-rule is standard
 *
 * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node
 * @returns {boolean} If `true`, the declaration is standard
 */ __turbopack_context__.s({
    "default": (()=>isStandardSyntaxAtRule)
});
function isStandardSyntaxAtRule(atRule) {
    // Ignore `@charset` css rule (is parsed as at-rule)
    if (atRule.name.toLowerCase() === 'charset') {
        return false;
    }
    // Ignore scss `@content` inside mixins
    if (!atRule.nodes && atRule.params === '') {
        return false;
    }
    // Ignore Less mixins
    if ('mixin' in atRule && atRule.mixin) {
        return false;
    }
    // Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`
    if ('variable' in atRule && atRule.variable || !atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(') {
        return false;
    }
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check whether a property is SCSS variable
 *
 * @param {string} property
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isScssVariable)
});
function isScssVariable(property) {
    // SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))
    if (property.startsWith('$')) {
        return true;
    }
    // SCSS var within a namespace (e.g. namespace.$var: x)
    if (property.includes('.$')) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isStandardSyntaxDeclaration)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)");
;
;
function isStandardSyntaxDeclaration(decl) {
    const prop = decl.prop;
    const parent = decl.parent;
    // SCSS var; covers map and list declarations
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prop)) {
        return false;
    }
    // Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})
    if (prop[0] === '@' && prop[1] !== '{') {
        return false;
    }
    // Less map declaration
    if (parent && parent.type === 'atrule' && parent.raws.afterName === ':') {
        return false;
    }
    // Less map (e.g. #my-map() { myprop: red; })
    if (parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(parent) && parent.selector && parent.selector.startsWith('#') && parent.selector.endsWith('()')) {
        return false;
    }
    // Sass nested properties (e.g. border: { style: solid; color: red; })
    if (parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(parent) && parent.selector && parent.selector[parent.selector.length - 1] === ':' && parent.selector.substring(0, 2) !== '--') {
        return false;
    }
    // Less &:extend
    if ('extend' in decl && decl.extend) {
        return false;
    }
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/rules/at-rule-descriptor-value-no-unknown/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$regexes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/regexes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$nodeFieldIndices$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/nodeFieldIndices.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getLexer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/getLexer.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxAtRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxDeclaration.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
const ruleName = 'at-rule-descriptor-value-no-unknown';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    rejected: (descriptor, value)=>`Unexpected unknown value "${value}" for descriptor "${descriptor}"`
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/at-rule-descriptor-value-no-unknown'
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary, _, context)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary
        });
        if (!validOptions) {
            return;
        }
        root.walkAtRules(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$regexes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["atRuleRegexes"].unsupportedNestingNames, (atRule)=>{
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxAtRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(atRule)) return;
            atRule.walkDecls((decl)=>{
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxDeclaration$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(decl)) return;
                const { prop, value } = decl;
                const lexer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$getLexer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(context);
                const { error } = lexer.matchAtruleDescriptor(atRule.name, prop, value);
                if (!error) return;
                if (error.name !== 'SyntaxMatchError') return;
                const index = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$nodeFieldIndices$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["declarationValueIndex"])(decl);
                const endIndex = index + value.length;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                    message: messages.rejected,
                    messageArgs: [
                        prop,
                        value
                    ],
                    node: decl,
                    index,
                    endIndex,
                    ruleName,
                    result
                });
            });
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_ededa4a3._.js.map