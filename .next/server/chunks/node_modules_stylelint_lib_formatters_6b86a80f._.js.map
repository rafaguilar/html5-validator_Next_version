{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/formatters/preprocessWarnings.mjs"],"sourcesContent":["import { DEFAULT_SEVERITY, SEVERITY_ERROR } from '../constants.mjs';\n\n/** @import {LintResult} from 'stylelint' */\n/** @typedef {LintResult['parseErrors'][0]} ParseError */\n/** @typedef {LintResult['warnings'][0]} Warning */\n/** @typedef {Warning['severity']} Severity */\n\n/**\n * Preprocess warnings in a given lint result.\n * Note that this function has a side-effect.\n *\n * @param {LintResult} result\n * @returns {LintResult}\n */\nexport default function preprocessWarnings(result) {\n\tfor (const error of result.parseErrors || []) {\n\t\tresult.warnings.push(parseErrorToWarning(error));\n\t}\n\n\tfor (const warning of result.warnings) {\n\t\twarning.severity = normalizeSeverity(warning);\n\t}\n\n\tresult.warnings.sort(byLocationOrder);\n\n\treturn result;\n}\n\n/**\n * @param {ParseError} error\n * @returns {Warning}\n */\nfunction parseErrorToWarning(error) {\n\treturn {\n\t\tline: error.line,\n\t\tcolumn: error.column,\n\t\trule: error.stylelintType,\n\t\tseverity: SEVERITY_ERROR,\n\t\ttext: `${error.text} (${error.stylelintType})`,\n\t};\n}\n\n/**\n * @param {Warning} warning\n * @returns {Severity}\n */\nfunction normalizeSeverity(warning) {\n\t// NOTE: Plugins may add a warning without severity, for example,\n\t// by directly using the PostCSS `Result#warn()` API.\n\treturn warning.severity || DEFAULT_SEVERITY;\n}\n\n/**\n * @param {Warning} a\n * @param {Warning} b\n * @returns {number}\n */\nfunction byLocationOrder(a, b) {\n\t// positionless first\n\tif (!a.line && b.line) return -1;\n\n\t// positionless first\n\tif (a.line && !b.line) return 1;\n\n\tif (a.line < b.line) return -1;\n\n\tif (a.line > b.line) return 1;\n\n\tif (a.column < b.column) return -1;\n\n\tif (a.column > b.column) return 1;\n\n\treturn 0;\n}\n"],"names":[],"mappings":";;;AAAA;;AAce,SAAS,mBAAmB,MAAM;IAChD,KAAK,MAAM,SAAS,OAAO,WAAW,IAAI,EAAE,CAAE;QAC7C,OAAO,QAAQ,CAAC,IAAI,CAAC,oBAAoB;IAC1C;IAEA,KAAK,MAAM,WAAW,OAAO,QAAQ,CAAE;QACtC,QAAQ,QAAQ,GAAG,kBAAkB;IACtC;IAEA,OAAO,QAAQ,CAAC,IAAI,CAAC;IAErB,OAAO;AACR;AAEA;;;CAGC,GACD,SAAS,oBAAoB,KAAK;IACjC,OAAO;QACN,MAAM,MAAM,IAAI;QAChB,QAAQ,MAAM,MAAM;QACpB,MAAM,MAAM,aAAa;QACzB,UAAU,gJAAA,CAAA,iBAAc;QACxB,MAAM,GAAG,MAAM,IAAI,CAAC,EAAE,EAAE,MAAM,aAAa,CAAC,CAAC,CAAC;IAC/C;AACD;AAEA;;;CAGC,GACD,SAAS,kBAAkB,OAAO;IACjC,iEAAiE;IACjE,qDAAqD;IACrD,OAAO,QAAQ,QAAQ,IAAI,gJAAA,CAAA,mBAAgB;AAC5C;AAEA;;;;CAIC,GACD,SAAS,gBAAgB,CAAC,EAAE,CAAC;IAC5B,qBAAqB;IACrB,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC;IAE/B,qBAAqB;IACrB,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO;IAE9B,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;IAE7B,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,EAAE,OAAO;IAE5B,IAAI,EAAE,MAAM,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC;IAEjC,IAAI,EAAE,MAAM,GAAG,EAAE,MAAM,EAAE,OAAO;IAEhC,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/formatters/tapFormatter.mjs"],"sourcesContent":["import { isNumber } from '../utils/validateTypes.mjs';\nimport preprocessWarnings from './preprocessWarnings.mjs';\n\n/** @import {Warning, Formatter} from 'stylelint' */\n/** @typedef {Array<Omit<Warning, 'rule'>>} Warnings */\n\n/** @type {Formatter} */\nexport default function tapFormatter(results) {\n\tconst lines = ['TAP version 14', `1..${results.length}`];\n\n\tfor (const [index, result] of results.entries()) {\n\t\tpreprocessWarnings(result);\n\t\t// SKIP indicates \"that a test was not run, or if it was,\n\t\t// that its success or failure is being temporarily ignored.\"\n\t\t// skipped tests must not be treated as test failures though\n\t\t// if a file is ignored, errored is currently always false\n\t\tconst ignored = result.ignored ? ' # SKIP ignored' : '';\n\t\tconst error = result.errored ? 'not ' : '';\n\n\t\tlines.push(`${error}ok ${index + 1} - ${getEscapedSource(result.source)}${ignored}`);\n\n\t\tif (error) {\n\t\t\tlines.push('  ---');\n\n\t\t\t/** @type {Record<string, Warnings>} */\n\t\t\tconst rules = {};\n\n\t\t\tfor (const { rule, ...rest } of result.warnings) {\n\t\t\t\tconst name = rule || 'unknown';\n\t\t\t\tconst warnings = (rules[name] ??= []);\n\n\t\t\t\twarnings.push(rest);\n\t\t\t}\n\n\t\t\tfor (const [ruleName, warnings] of Object.entries(rules)) {\n\t\t\t\tlines.push(`  ${ruleName}:`);\n\n\t\t\t\tfor (const { text, severity, line, column, endLine, endColumn } of warnings) {\n\t\t\t\t\tlines.push(\n\t\t\t\t\t\t`    - message: ${JSON.stringify(text)}`,\n\t\t\t\t\t\t`      severity: ${severity}`,\n\t\t\t\t\t\t`      line: ${line}`,\n\t\t\t\t\t\t`      column: ${column}`,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (isNumber(endLine)) lines.push(`      endLine: ${endLine}`);\n\n\t\t\t\t\tif (isNumber(endColumn)) lines.push(`      endColumn: ${endColumn}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlines.push('  ...');\n\t\t}\n\t}\n\n\tlines.push('');\n\n\treturn lines.join('\\n');\n}\n\n/**\n * Apply TAP escaping to the source that is part of the test point description\n * @see {@link https://testanything.org/tap-version-14-specification.html#escaping TAP 14 specification}\n * @param {string} [source]\n */\nfunction getEscapedSource(source) {\n\tif (!source) return source;\n\n\tlet output = '';\n\n\tfor (const char of source) {\n\t\tswitch (char.codePointAt(0)) {\n\t\t\tcase 0x005c: // `\\`\n\t\t\tcase 0x0023: // `#`\n\t\t\t\toutput += '\\\\';\n\t\t\t\toutput += char;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\toutput += char;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn output;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAMe,SAAS,aAAa,OAAO;IAC3C,MAAM,QAAQ;QAAC;QAAkB,CAAC,GAAG,EAAE,QAAQ,MAAM,EAAE;KAAC;IAExD,KAAK,MAAM,CAAC,OAAO,OAAO,IAAI,QAAQ,OAAO,GAAI;QAChD,CAAA,GAAA,uKAAA,CAAA,UAAkB,AAAD,EAAE;QACnB,yDAAyD;QACzD,6DAA6D;QAC7D,4DAA4D;QAC5D,0DAA0D;QAC1D,MAAM,UAAU,OAAO,OAAO,GAAG,oBAAoB;QACrD,MAAM,QAAQ,OAAO,OAAO,GAAG,SAAS;QAExC,MAAM,IAAI,CAAC,GAAG,MAAM,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,iBAAiB,OAAO,MAAM,IAAI,SAAS;QAEnF,IAAI,OAAO;YACV,MAAM,IAAI,CAAC;YAEX,qCAAqC,GACrC,MAAM,QAAQ,CAAC;YAEf,KAAK,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,OAAO,QAAQ,CAAE;gBAChD,MAAM,OAAO,QAAQ;gBACrB,MAAM,WAAY,KAAK,CAAC,KAAK,KAAK,EAAE;gBAEpC,SAAS,IAAI,CAAC;YACf;YAEA,KAAK,MAAM,CAAC,UAAU,SAAS,IAAI,OAAO,OAAO,CAAC,OAAQ;gBACzD,MAAM,IAAI,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;gBAE3B,KAAK,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,SAAU;oBAC5E,MAAM,IAAI,CACT,CAAC,eAAe,EAAE,KAAK,SAAS,CAAC,OAAO,EACxC,CAAC,gBAAgB,EAAE,UAAU,EAC7B,CAAC,YAAY,EAAE,MAAM,EACrB,CAAC,cAAc,EAAE,QAAQ;oBAG1B,IAAI,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,UAAU,MAAM,IAAI,CAAC,CAAC,eAAe,EAAE,SAAS;oBAE7D,IAAI,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,YAAY,MAAM,IAAI,CAAC,CAAC,iBAAiB,EAAE,WAAW;gBACpE;YACD;YAEA,MAAM,IAAI,CAAC;QACZ;IACD;IAEA,MAAM,IAAI,CAAC;IAEX,OAAO,MAAM,IAAI,CAAC;AACnB;AAEA;;;;CAIC,GACD,SAAS,iBAAiB,MAAM;IAC/B,IAAI,CAAC,QAAQ,OAAO;IAEpB,IAAI,SAAS;IAEb,KAAK,MAAM,QAAQ,OAAQ;QAC1B,OAAQ,KAAK,WAAW,CAAC;YACxB,KAAK;YACL,KAAK;gBACJ,UAAU;gBACV,UAAU;gBACV;YACD;gBACC,UAAU;gBACV;QACF;IACD;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}}]
}