module.exports = {

"[project]/node_modules/stylelint/lib/utils/isWhitespace.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check if a character is whitespace.
 *
 * @param {string} char
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isWhitespace)
});
function isWhitespace(char) {
    return [
        ' ',
        '\n',
        '\t',
        '\r',
        '\f'
    ].includes(char);
}
}}),
"[project]/node_modules/stylelint/lib/rules/comment-whitespace-inside/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxComment.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isWhitespace$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isWhitespace.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
;
;
;
;
;
const ruleName = 'comment-whitespace-inside';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    expectedOpening: 'Expected whitespace after "/*"',
    rejectedOpening: 'Unexpected whitespace after "/*"',
    expectedClosing: 'Expected whitespace before "*/"',
    rejectedClosing: 'Unexpected whitespace before "*/"'
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/comment-whitespace-inside',
    fixable: true
};
/**
 * @param {import('postcss').Comment} comment
 */ function addWhitespaceBefore(comment) {
    if (comment.text.startsWith('*')) {
        comment.text = comment.text.replace(/^(\*+)/, `$1 `);
    } else {
        comment.raws.left = ' ';
    }
}
/**
 * @param {import('postcss').Comment} comment
 */ function addWhitespaceAfter(comment) {
    if (comment.text[comment.text.length - 1] === '*') {
        comment.text = comment.text.replace(/(\*+)$/, ` $1`);
    } else {
        comment.raws.right = ' ';
    }
}
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary,
            possible: [
                'always',
                'never'
            ]
        });
        if (!validOptions) {
            return;
        }
        root.walkComments((comment)=>{
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(comment)) {
                return;
            }
            const rawComment = comment.toString();
            const firstFourChars = rawComment.slice(0, 4);
            // Return early if sourcemap or copyright comment
            if (/^\/\*[#!]\s/.test(firstFourChars)) {
                return;
            }
            const leftMatches = rawComment.match(/(^\/\*+)(\s*)/);
            if (leftMatches == null || leftMatches[1] == null) {
                throw new Error(`Invalid comment: "${rawComment}"`);
            }
            const rightMatches = rawComment.match(/(\s*)(\*+\/)$/);
            if (rightMatches == null || rightMatches[2] == null) {
                throw new Error(`Invalid comment: "${rawComment}"`);
            }
            const opener = leftMatches[1];
            const leftWord = leftMatches[2] ?? '';
            const leftSpace = leftWord.charAt(0);
            const rightWord = rightMatches[1] ?? '';
            const rightSpace = rightWord.charAt(0);
            const closer = rightMatches[2];
            if (primary === 'never' && leftSpace !== '') {
                const index = opener.length;
                const endIndex = index + leftWord.length;
                complain(messages.rejectedOpening, index, endIndex);
            }
            if (primary === 'always' && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isWhitespace$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(leftSpace)) {
                complain(messages.expectedOpening, opener.length);
            }
            if (primary === 'never' && rightSpace !== '') {
                const endIndex = rawComment.length - closer.length;
                const index = endIndex - rightWord.length;
                complain(messages.rejectedClosing, index, endIndex);
            }
            if (primary === 'always' && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isWhitespace$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(rightSpace)) {
                complain(messages.expectedClosing, rawComment.length - closer.length - 1);
            }
            /**
			 * @param {string} message
			 * @param {number} index
			 * @param {number} endIndex
			 */ function complain(message, index, endIndex = index) {
                const fix = ()=>{
                    if (primary === 'never') {
                        comment.raws.left = '';
                        comment.raws.right = '';
                        comment.text = comment.text.replace(/^(\*+)(\s+)?/, '$1').replace(/(\s+)?(\*+)$/, '$2');
                    } else {
                        const mutate = message === messages.expectedClosing ? addWhitespaceAfter : addWhitespaceBefore;
                        mutate(comment);
                    }
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                    message,
                    index,
                    endIndex,
                    result,
                    ruleName,
                    node: comment,
                    fix: {
                        apply: fix,
                        node: comment
                    }
                });
            }
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_18a0d288._.js.map