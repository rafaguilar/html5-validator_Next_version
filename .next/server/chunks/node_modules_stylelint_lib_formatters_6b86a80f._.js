module.exports = {

"[project]/node_modules/stylelint/lib/formatters/preprocessWarnings.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>preprocessWarnings)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/constants.mjs [app-route] (ecmascript)");
;
function preprocessWarnings(result) {
    for (const error of result.parseErrors || []){
        result.warnings.push(parseErrorToWarning(error));
    }
    for (const warning of result.warnings){
        warning.severity = normalizeSeverity(warning);
    }
    result.warnings.sort(byLocationOrder);
    return result;
}
/**
 * @param {ParseError} error
 * @returns {Warning}
 */ function parseErrorToWarning(error) {
    return {
        line: error.line,
        column: error.column,
        rule: error.stylelintType,
        severity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SEVERITY_ERROR"],
        text: `${error.text} (${error.stylelintType})`
    };
}
/**
 * @param {Warning} warning
 * @returns {Severity}
 */ function normalizeSeverity(warning) {
    // NOTE: Plugins may add a warning without severity, for example,
    // by directly using the PostCSS `Result#warn()` API.
    return warning.severity || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$constants$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_SEVERITY"];
}
/**
 * @param {Warning} a
 * @param {Warning} b
 * @returns {number}
 */ function byLocationOrder(a, b) {
    // positionless first
    if (!a.line && b.line) return -1;
    // positionless first
    if (a.line && !b.line) return 1;
    if (a.line < b.line) return -1;
    if (a.line > b.line) return 1;
    if (a.column < b.column) return -1;
    if (a.column > b.column) return 1;
    return 0;
}
}}),
"[project]/node_modules/stylelint/lib/formatters/tapFormatter.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>tapFormatter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$preprocessWarnings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/formatters/preprocessWarnings.mjs [app-route] (ecmascript)");
;
;
function tapFormatter(results) {
    const lines = [
        'TAP version 14',
        `1..${results.length}`
    ];
    for (const [index, result] of results.entries()){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$formatters$2f$preprocessWarnings$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result);
        // SKIP indicates "that a test was not run, or if it was,
        // that its success or failure is being temporarily ignored."
        // skipped tests must not be treated as test failures though
        // if a file is ignored, errored is currently always false
        const ignored = result.ignored ? ' # SKIP ignored' : '';
        const error = result.errored ? 'not ' : '';
        lines.push(`${error}ok ${index + 1} - ${getEscapedSource(result.source)}${ignored}`);
        if (error) {
            lines.push('  ---');
            /** @type {Record<string, Warnings>} */ const rules = {};
            for (const { rule, ...rest } of result.warnings){
                const name = rule || 'unknown';
                const warnings = rules[name] ??= [];
                warnings.push(rest);
            }
            for (const [ruleName, warnings] of Object.entries(rules)){
                lines.push(`  ${ruleName}:`);
                for (const { text, severity, line, column, endLine, endColumn } of warnings){
                    lines.push(`    - message: ${JSON.stringify(text)}`, `      severity: ${severity}`, `      line: ${line}`, `      column: ${column}`);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(endLine)) lines.push(`      endLine: ${endLine}`);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"])(endColumn)) lines.push(`      endColumn: ${endColumn}`);
                }
            }
            lines.push('  ...');
        }
    }
    lines.push('');
    return lines.join('\n');
}
/**
 * Apply TAP escaping to the source that is part of the test point description
 * @see {@link https://testanything.org/tap-version-14-specification.html#escaping TAP 14 specification}
 * @param {string} [source]
 */ function getEscapedSource(source) {
    if (!source) return source;
    let output = '';
    for (const char of source){
        switch(char.codePointAt(0)){
            case 0x005c:
            case 0x0023:
                output += '\\';
                output += char;
                break;
            default:
                output += char;
                break;
        }
    }
    return output;
}
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_formatters_6b86a80f._.js.map