{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/beforeBlockString.mjs"],"sourcesContent":["import { isAtRule, isRule } from './typeGuards.mjs';\n\n/**\n * @param {import('postcss').Container} statement\n * @param {{ noRawBefore: boolean }} options\n * @returns {string}\n */\nexport default function beforeBlockString(statement, { noRawBefore } = { noRawBefore: false }) {\n\tlet result = '';\n\n\tconst before = statement.raws.before || '';\n\n\tif (!noRawBefore) {\n\t\tresult += before;\n\t}\n\n\tif (isRule(statement)) {\n\t\tresult += statement.selector;\n\t} else if (isAtRule(statement)) {\n\t\tresult += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;\n\t} else {\n\t\treturn '';\n\t}\n\n\tresult += statement.raws.between || '';\n\n\treturn result;\n}\n"],"names":[],"mappings":";;;AAAA;;AAOe,SAAS,kBAAkB,SAAS,EAAE,EAAE,WAAW,EAAE,GAAG;IAAE,aAAa;AAAM,CAAC;IAC5F,IAAI,SAAS;IAEb,MAAM,SAAS,UAAU,IAAI,CAAC,MAAM,IAAI;IAExC,IAAI,CAAC,aAAa;QACjB,UAAU;IACX;IAEA,IAAI,CAAA,GAAA,0JAAA,CAAA,SAAM,AAAD,EAAE,YAAY;QACtB,UAAU,UAAU,QAAQ;IAC7B,OAAO,IAAI,CAAA,GAAA,0JAAA,CAAA,WAAQ,AAAD,EAAE,YAAY;QAC/B,UAAU,CAAC,CAAC,EAAE,UAAU,IAAI,GAAG,UAAU,IAAI,CAAC,SAAS,IAAI,KAAK,UAAU,MAAM,EAAE;IACnF,OAAO;QACN,OAAO;IACR;IAEA,UAAU,UAAU,IAAI,CAAC,OAAO,IAAI;IAEpC,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/hasBlock.mjs"],"sourcesContent":["/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @returns {boolean} True if `statement` has a block (empty or otherwise)\n */\nexport default function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACc,SAAS,SAAS,SAAS;IACzC,OAAO,UAAU,KAAK,KAAK;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/rawNodeString.mjs"],"sourcesContent":["/**\n * Stringify PostCSS node including its raw \"before\" string.\n *\n * @param {import('postcss').Node} node\n *\n * @returns {string}\n */\nexport default function rawNodeString(node) {\n\tlet result = '';\n\n\tif (node.raws.before) {\n\t\tresult += node.raws.before;\n\t}\n\n\tresult += node.toString();\n\n\treturn result;\n}\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;AACc,SAAS,cAAc,IAAI;IACzC,IAAI,SAAS;IAEb,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;QACrB,UAAU,KAAK,IAAI,CAAC,MAAM;IAC3B;IAEA,UAAU,KAAK,QAAQ;IAEvB,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/blockString.mjs"],"sourcesContent":["import beforeBlockString from './beforeBlockString.mjs';\nimport hasBlock from './hasBlock.mjs';\nimport rawNodeString from './rawNodeString.mjs';\n\n/**\n * Return a CSS statement's block -- the string that starts and `{` and ends with `}`.\n *\n * If the statement has no block (e.g. `@import url(foo.css);`), returns an empty string.\n *\n * @param {import('postcss').Container} statement\n * @returns {string}\n */\nexport default function blockString(statement) {\n\tif (!hasBlock(statement)) {\n\t\treturn '';\n\t}\n\n\treturn rawNodeString(statement).slice(beforeBlockString(statement).length);\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAUe,SAAS,YAAY,SAAS;IAC5C,IAAI,CAAC,CAAA,GAAA,wJAAA,CAAA,UAAQ,AAAD,EAAE,YAAY;QACzB,OAAO;IACR;IAEA,OAAO,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD,EAAE,WAAW,KAAK,CAAC,CAAA,GAAA,iKAAA,CAAA,UAAiB,AAAD,EAAE,WAAW,MAAM;AAC1E","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isSingleLineString.mjs"],"sourcesContent":["/**\n * Check if a string is a single line (i.e. does not contain\n * any newline characters).\n *\n * @param {string} input\n * @returns {boolean}\n */\nexport default function isSingleLineString(input) {\n\treturn !/[\\n\\r]/.test(input);\n}\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;AACc,SAAS,mBAAmB,KAAK;IAC/C,OAAO,CAAC,SAAS,IAAI,CAAC;AACvB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.mjs"],"sourcesContent":["import blockString from '../../utils/blockString.mjs';\nimport { isNumber } from '../../utils/validateTypes.mjs';\nimport isSingleLineString from '../../utils/isSingleLineString.mjs';\nimport report from '../../utils/report.mjs';\nimport ruleMessages from '../../utils/ruleMessages.mjs';\nimport validateOptions from '../../utils/validateOptions.mjs';\n\nconst ruleName = 'declaration-block-single-line-max-declarations';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (max) => `Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/declaration-block-single-line-max-declarations',\n};\n\n/** @type {import('stylelint').CoreRules[ruleName]} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [isNumber],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\troot.walkRules((ruleNode) => {\n\t\t\tconst block = blockString(ruleNode);\n\n\t\t\tif (!isSingleLineString(block)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ruleNode.nodes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst decls = ruleNode.nodes.filter((node) => node.type === 'decl');\n\n\t\t\tif (decls.length <= primary) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treport({\n\t\t\t\tmessage: messages.expected,\n\t\t\t\tmessageArgs: [primary],\n\t\t\t\tnode: ruleNode,\n\t\t\t\tword: block,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t});\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nexport default rule;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,WAAW;AAEjB,MAAM,WAAW,CAAA,GAAA,4JAAA,CAAA,UAAY,AAAD,EAAE,UAAU;IACvC,UAAU,CAAC,MAAQ,CAAC,sBAAsB,EAAE,IAAI,CAAC,EAAE,QAAQ,IAAI,gBAAgB,gBAAgB;AAChG;AAEA,MAAM,OAAO;IACZ,KAAK;AACN;AAEA,oDAAoD,GACpD,MAAM,OAAO,CAAC;IACb,OAAO,CAAC,MAAM;QACb,MAAM,eAAe,CAAA,GAAA,+JAAA,CAAA,UAAe,AAAD,EAAE,QAAQ,UAAU;YACtD,QAAQ;YACR,UAAU;gBAAC,6JAAA,CAAA,WAAQ;aAAC;QACrB;QAEA,IAAI,CAAC,cAAc;YAClB;QACD;QAEA,KAAK,SAAS,CAAC,CAAC;YACf,MAAM,QAAQ,CAAA,GAAA,2JAAA,CAAA,UAAW,AAAD,EAAE;YAE1B,IAAI,CAAC,CAAA,GAAA,kKAAA,CAAA,UAAkB,AAAD,EAAE,QAAQ;gBAC/B;YACD;YAEA,IAAI,CAAC,SAAS,KAAK,EAAE;gBACpB;YACD;YAEA,MAAM,QAAQ,SAAS,KAAK,CAAC,MAAM,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK;YAE5D,IAAI,MAAM,MAAM,IAAI,SAAS;gBAC5B;YACD;YAEA,CAAA,GAAA,sJAAA,CAAA,UAAM,AAAD,EAAE;gBACN,SAAS,SAAS,QAAQ;gBAC1B,aAAa;oBAAC;iBAAQ;gBACtB,MAAM;gBACN,MAAM;gBACN;gBACA;YACD;QACD;IACD;AACD;AAEA,KAAK,QAAQ,GAAG;AAChB,KAAK,QAAQ,GAAG;AAChB,KAAK,IAAI,GAAG;uCACG","ignoreList":[0],"debugId":null}}]
}