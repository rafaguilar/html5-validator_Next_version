{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/createMapWithSet.mjs"],"sourcesContent":["/**\n * Create a map with unique sets of values from a record.\n *\n * @template T\n * @param {Record<string, T | T[]>} record\n * @returns {Map<string, Set<T>>}\n */\nexport default function createMapWithSet(record) {\n\t/** @type {Map<string, Set<T>>} */\n\tconst map = new Map();\n\n\tfor (const [key, value] of Object.entries(record)) {\n\t\tconst list = Array.isArray(value) ? value : [value];\n\n\t\tmap.set(key, new Set(list));\n\t}\n\n\treturn map;\n}\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;AACc,SAAS,iBAAiB,MAAM;IAC9C,gCAAgC,GAChC,MAAM,MAAM,IAAI;IAEhB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,QAAS;QAClD,MAAM,OAAO,MAAM,OAAO,CAAC,SAAS,QAAQ;YAAC;SAAM;QAEnD,IAAI,GAAG,CAAC,KAAK,IAAI,IAAI;IACtB;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.mjs"],"sourcesContent":["/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @returns {boolean} If `true`, the declaration is standard\n */\nexport default function isStandardSyntaxAtRule(atRule) {\n\t// Ignore `@charset` css rule (is parsed as at-rule)\n\tif (atRule.name.toLowerCase() === 'charset') {\n\t\treturn false;\n\t}\n\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACc,SAAS,uBAAuB,MAAM;IACpD,oDAAoD;IACpD,IAAI,OAAO,IAAI,CAAC,WAAW,OAAO,WAAW;QAC5C,OAAO;IACR;IAEA,uCAAuC;IACvC,IAAI,CAAC,OAAO,KAAK,IAAI,OAAO,MAAM,KAAK,IAAI;QAC1C,OAAO;IACR;IAEA,qBAAqB;IACrB,IAAI,WAAW,UAAU,OAAO,KAAK,EAAE;QACtC,OAAO;IACR;IAEA,wGAAwG;IACxG,IACC,AAAC,cAAc,UAAU,OAAO,QAAQ,IACvC,CAAC,OAAO,KAAK,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,MAAM,OAAO,MAAM,CAAC,EAAE,KAAK,KACtE;QACD,OAAO;IACR;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/validateObjectWithArrayProps.mjs"],"sourcesContent":["import { isPlainObject } from './validateTypes.mjs';\n\n/**\n * Check whether the variable is an object and all its properties are one or more values\n * that satisfy the specified validator(s):\n *\n * @example\n * ignoreProperties = {\n *   value1: [\"item11\", \"item12\", \"item13\"],\n *   value2: \"item2\",\n * };\n * validateObjectWithArrayProps(isString)(ignoreProperties);\n * //=> true\n *\n * @typedef {(value: unknown) => boolean} Validator\n * @param {...Validator} validators\n * @returns {Validator}\n */\nexport default function validateObjectWithArrayProps(...validators) {\n\treturn (value) => {\n\t\tif (!isPlainObject(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.values(value)\n\t\t\t.flat()\n\t\t\t.every((item) => validators.some((v) => v(item)));\n\t};\n}\n"],"names":[],"mappings":";;;AAAA;;AAkBe,SAAS,6BAA6B,GAAG,UAAU;IACjE,OAAO,CAAC;QACP,IAAI,CAAC,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAE,QAAQ;YAC1B,OAAO;QACR;QAEA,OAAO,OAAO,MAAM,CAAC,OACnB,IAAI,GACJ,KAAK,CAAC,CAAC,OAAS,WAAW,IAAI,CAAC,CAAC,IAAM,EAAE;IAC5C;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/rules/at-rule-property-required-list/index.mjs"],"sourcesContent":["import createMapWithSet from '../../utils/createMapWithSet.mjs';\nimport isStandardSyntaxAtRule from '../../utils/isStandardSyntaxAtRule.mjs';\nimport { isString } from '../../utils/validateTypes.mjs';\nimport report from '../../utils/report.mjs';\nimport ruleMessages from '../../utils/ruleMessages.mjs';\nimport validateObjectWithArrayProps from '../../utils/validateObjectWithArrayProps.mjs';\nimport validateOptions from '../../utils/validateOptions.mjs';\n\n// NOTE: We should have named this rule as `at-rule-descriptor-required-list` instead.\n// See https://github.com/stylelint/stylelint/pull/8185\nconst ruleName = 'at-rule-property-required-list';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: (atRule, property) =>\n\t\t`Expected property (or descriptor) \"${property}\" for at-rule \"${atRule}\"`,\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-property-required-list',\n};\n\n/** @type {import('stylelint').CoreRules[ruleName]} */\nconst rule = (primary) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(result, ruleName, {\n\t\t\tactual: primary,\n\t\t\tpossible: [validateObjectWithArrayProps(isString)],\n\t\t});\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst propLists = createMapWithSet(primary);\n\n\t\t/** @type {Set<string>} */\n\t\tconst currentPropList = new Set();\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { name, nodes } = atRule;\n\n\t\t\tif (!nodes) return;\n\n\t\t\tconst atRuleName = name.toLowerCase();\n\t\t\tconst propList = propLists.get(atRuleName);\n\n\t\t\tif (!propList) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcurrentPropList.clear();\n\n\t\t\tfor (const node of nodes) {\n\t\t\t\tif (!node || node.type !== 'decl') continue;\n\n\t\t\t\tconst propName = node.prop.toLowerCase();\n\n\t\t\t\tif (!propList.has(propName)) continue;\n\n\t\t\t\tcurrentPropList.add(propName);\n\t\t\t}\n\n\t\t\tif (currentPropList.size === propList.size) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const requiredProp of propList) {\n\t\t\t\tif (currentPropList.has(requiredProp)) continue;\n\n\t\t\t\tconst atName = `@${atRule.name}`;\n\n\t\t\t\treport({\n\t\t\t\t\tmessage: messages.expected,\n\t\t\t\t\tmessageArgs: [atName, requiredProp],\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tword: atName,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n};\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nexport default rule;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,sFAAsF;AACtF,uDAAuD;AACvD,MAAM,WAAW;AAEjB,MAAM,WAAW,CAAA,GAAA,4JAAA,CAAA,UAAY,AAAD,EAAE,UAAU;IACvC,UAAU,CAAC,QAAQ,WAClB,CAAC,mCAAmC,EAAE,SAAS,eAAe,EAAE,OAAO,CAAC,CAAC;AAC3E;AAEA,MAAM,OAAO;IACZ,KAAK;AACN;AAEA,oDAAoD,GACpD,MAAM,OAAO,CAAC;IACb,OAAO,CAAC,MAAM;QACb,MAAM,eAAe,CAAA,GAAA,+JAAA,CAAA,UAAe,AAAD,EAAE,QAAQ,UAAU;YACtD,QAAQ;YACR,UAAU;gBAAC,CAAA,GAAA,4KAAA,CAAA,UAA4B,AAAD,EAAE,6JAAA,CAAA,WAAQ;aAAE;QACnD;QAEA,IAAI,CAAC,cAAc;YAClB;QACD;QAEA,MAAM,YAAY,CAAA,GAAA,gKAAA,CAAA,UAAgB,AAAD,EAAE;QAEnC,wBAAwB,GACxB,MAAM,kBAAkB,IAAI;QAE5B,KAAK,WAAW,CAAC,CAAC;YACjB,IAAI,CAAC,CAAA,GAAA,sKAAA,CAAA,UAAsB,AAAD,EAAE,SAAS;gBACpC;YACD;YAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;YAExB,IAAI,CAAC,OAAO;YAEZ,MAAM,aAAa,KAAK,WAAW;YACnC,MAAM,WAAW,UAAU,GAAG,CAAC;YAE/B,IAAI,CAAC,UAAU;gBACd;YACD;YAEA,gBAAgB,KAAK;YAErB,KAAK,MAAM,QAAQ,MAAO;gBACzB,IAAI,CAAC,QAAQ,KAAK,IAAI,KAAK,QAAQ;gBAEnC,MAAM,WAAW,KAAK,IAAI,CAAC,WAAW;gBAEtC,IAAI,CAAC,SAAS,GAAG,CAAC,WAAW;gBAE7B,gBAAgB,GAAG,CAAC;YACrB;YAEA,IAAI,gBAAgB,IAAI,KAAK,SAAS,IAAI,EAAE;gBAC3C;YACD;YAEA,KAAK,MAAM,gBAAgB,SAAU;gBACpC,IAAI,gBAAgB,GAAG,CAAC,eAAe;gBAEvC,MAAM,SAAS,CAAC,CAAC,EAAE,OAAO,IAAI,EAAE;gBAEhC,CAAA,GAAA,sJAAA,CAAA,UAAM,AAAD,EAAE;oBACN,SAAS,SAAS,QAAQ;oBAC1B,aAAa;wBAAC;wBAAQ;qBAAa;oBACnC,MAAM;oBACN,MAAM;oBACN;oBACA;gBACD;YACD;QACD;IACD;AACD;AAEA,KAAK,QAAQ,GAAG;AAChB,KAAK,QAAQ,GAAG;AAChB,KAAK,IAAI,GAAG;uCACG","ignoreList":[0],"debugId":null}}]
}