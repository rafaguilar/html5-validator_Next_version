{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/addEmptyLineBefore.mjs"],"sourcesContent":["/**\n * Add one or two empty line(s) before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nexport default function addEmptyLineBefore(node, newline) {\n\tconst { raws } = node;\n\n\tif (typeof raws.before !== 'string') {\n\t\treturn node;\n\t}\n\n\traws.before = !/\\r?\\n/.test(raws.before)\n\t\t? newline.repeat(2) + raws.before\n\t\t: raws.before.replace(/(\\r?\\n)/, `${newline}$1`);\n\n\treturn node;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;AACc,SAAS,mBAAmB,IAAI,EAAE,OAAO;IACvD,MAAM,EAAE,IAAI,EAAE,GAAG;IAEjB,IAAI,OAAO,KAAK,MAAM,KAAK,UAAU;QACpC,OAAO;IACR;IAEA,KAAK,MAAM,GAAG,CAAC,QAAQ,IAAI,CAAC,KAAK,MAAM,IACpC,QAAQ,MAAM,CAAC,KAAK,KAAK,MAAM,GAC/B,KAAK,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,QAAQ,EAAE,CAAC;IAEhD,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/removeEmptyLinesBefore.mjs"],"sourcesContent":["/**\n * Remove empty lines before a node. Mutates the node.\n *\n * @template {import('postcss').Node} T\n * @param {T} node\n * @param {string} newline\n * @returns {T}\n */\nexport default function removeEmptyLinesBefore(node, newline) {\n\tnode.raws.before = node.raws.before ? node.raws.before.replace(/(\\r?\\n\\s*\\n)+/g, newline) : '';\n\n\treturn node;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;AACc,SAAS,uBAAuB,IAAI,EAAE,OAAO;IAC3D,KAAK,IAAI,CAAC,MAAM,GAAG,KAAK,IAAI,CAAC,MAAM,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,WAAW;IAE5F,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/fixEmptyLinesBefore.mjs"],"sourcesContent":["import addEmptyLineBefore from './addEmptyLineBefore.mjs';\nimport { assert } from './validateTypes.mjs';\nimport removeEmptyLinesBefore from './removeEmptyLinesBefore.mjs';\n\n/**\n * fix callback for *-empty-line-before rules\n * @param {object} o\n * @param {import('postcss').Node} o.node\n * @param {string=} o.newline\n * @param {'add'|'remove'} o.action\n * @throws {TypeError}\n */\nexport default function fixEmptyLinesBefore({ node, newline, action }) {\n\tassert(newline);\n\n\tswitch (action) {\n\t\tcase 'add':\n\t\t\taddEmptyLineBefore(node, newline);\n\t\t\tbreak;\n\t\tcase 'remove':\n\t\t\tremoveEmptyLinesBefore(node, newline);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new TypeError(`Unknown action ${action}`);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAUe,SAAS,oBAAoB,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE;IACpE,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAEP,OAAQ;QACP,KAAK;YACJ,CAAA,GAAA,kKAAA,CAAA,UAAkB,AAAD,EAAE,MAAM;YACzB;QACD,KAAK;YACJ,CAAA,GAAA,sKAAA,CAAA,UAAsB,AAAD,EAAE,MAAM;YAC7B;QACD;YACC,MAAM,IAAI,UAAU,CAAC,eAAe,EAAE,QAAQ;IAChD;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/getPreviousNonSharedLineCommentNode.mjs"],"sourcesContent":["/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node} node\n */\nfunction getNodeLine(node) {\n\treturn node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | undefined} node\n * @returns {Node | undefined}\n */\nexport default function getPreviousNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn previousNode;\n\t}\n\n\tif (getNodeLine(node) === getNodeLine(previousNode)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\tconst previousNode2 = previousNode.prev();\n\n\tif (previousNode2 && getNodeLine(previousNode) === getNodeLine(previousNode2)) {\n\t\treturn getPreviousNonSharedLineCommentNode(previousNode);\n\t}\n\n\treturn previousNode;\n}\n"],"names":[],"mappings":"AAAA,2CAA2C,GAE3C;;CAEC;;;AACD,SAAS,YAAY,IAAI;IACxB,OAAO,KAAK,MAAM,IAAI,KAAK,MAAM,CAAC,KAAK,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,IAAI;AAClE;AAMe,SAAS,oCAAoC,IAAI;IAC/D,IAAI,SAAS,WAAW;QACvB,OAAO;IACR;IAEA,MAAM,eAAe,KAAK,IAAI;IAE9B,IAAI,CAAC,gBAAgB,aAAa,IAAI,KAAK,WAAW;QACrD,OAAO;IACR;IAEA,IAAI,YAAY,UAAU,YAAY,eAAe;QACpD,OAAO,oCAAoC;IAC5C;IAEA,MAAM,gBAAgB,aAAa,IAAI;IAEvC,IAAI,iBAAiB,YAAY,kBAAkB,YAAY,gBAAgB;QAC9E,OAAO,oCAAoC;IAC5C;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/hasEmptyLine.mjs"],"sourcesContent":["const HAS_EMPTY_LINE = /\\n[\\r\\t ]*\\n/;\n\n/**\n * Check if a string contains at least one empty line\n *\n * @param {string | undefined} string\n * @returns {boolean}\n */\nexport default function hasEmptyLine(string) {\n\tif (string === '' || string === undefined) return false;\n\n\treturn HAS_EMPTY_LINE.test(string);\n}\n"],"names":[],"mappings":";;;AAAA,MAAM,iBAAiB;AAQR,SAAS,aAAa,MAAM;IAC1C,IAAI,WAAW,MAAM,WAAW,WAAW,OAAO;IAElD,OAAO,eAAe,IAAI,CAAC;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/getNextNonSharedLineCommentNode.mjs"],"sourcesContent":["/** @typedef {import('postcss').Node} Node */\n\n/**\n * @param {Node | void} node\n */\nfunction getNodeLine(node) {\n\treturn node && node.source && node.source.start && node.source.start.line;\n}\n\n/**\n * @param {Node | void} node\n * @returns {Node | void}\n */\nexport default function getNextNonSharedLineCommentNode(node) {\n\tif (node === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/** @type {Node | void} */\n\tconst nextNode = node.next();\n\n\tif (!nextNode || nextNode.type !== 'comment') {\n\t\treturn nextNode;\n\t}\n\n\tif (\n\t\tgetNodeLine(node) === getNodeLine(nextNode) ||\n\t\tgetNodeLine(nextNode) === getNodeLine(nextNode.next())\n\t) {\n\t\treturn getNextNonSharedLineCommentNode(nextNode);\n\t}\n\n\treturn nextNode;\n}\n"],"names":[],"mappings":"AAAA,2CAA2C,GAE3C;;CAEC;;;AACD,SAAS,YAAY,IAAI;IACxB,OAAO,QAAQ,KAAK,MAAM,IAAI,KAAK,MAAM,CAAC,KAAK,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,IAAI;AAC1E;AAMe,SAAS,gCAAgC,IAAI;IAC3D,IAAI,SAAS,WAAW;QACvB,OAAO;IACR;IAEA,wBAAwB,GACxB,MAAM,WAAW,KAAK,IAAI;IAE1B,IAAI,CAAC,YAAY,SAAS,IAAI,KAAK,WAAW;QAC7C,OAAO;IACR;IAEA,IACC,YAAY,UAAU,YAAY,aAClC,YAAY,cAAc,YAAY,SAAS,IAAI,KAClD;QACD,OAAO,gCAAgC;IACxC;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isSharedLineComment.mjs"],"sourcesContent":["import { isComment, isRoot } from './typeGuards.mjs';\nimport getNextNonSharedLineCommentNode from './getNextNonSharedLineCommentNode.mjs';\nimport getPreviousNonSharedLineCommentNode from './getPreviousNonSharedLineCommentNode.mjs';\n\n/** @typedef {import('postcss').Node} PostcssNode */\n\n/**\n * @param {PostcssNode | void} a\n * @param {PostcssNode | void} b\n */\nfunction nodesShareLines(a, b) {\n\tconst endLine = a && a.source && a.source.end && a.source.end.line;\n\tconst startLine = b && b.source && b.source.start && b.source.start.line;\n\n\treturn endLine === startLine;\n}\n\n/**\n * @param {PostcssNode} node\n * @returns {boolean}\n */\nexport default function isSharedLineComment(node) {\n\tif (!isComment(node)) {\n\t\treturn false;\n\t}\n\n\tconst previousNonSharedLineCommentNode = getPreviousNonSharedLineCommentNode(node);\n\n\tif (nodesShareLines(previousNonSharedLineCommentNode, node)) {\n\t\treturn true;\n\t}\n\n\tconst nextNonSharedLineCommentNode = getNextNonSharedLineCommentNode(node);\n\n\tif (nextNonSharedLineCommentNode && nodesShareLines(node, nextNonSharedLineCommentNode)) {\n\t\treturn true;\n\t}\n\n\tconst parentNode = node.parent;\n\n\t// It's a first child and located on the same line as block start\n\tif (\n\t\tparentNode !== undefined &&\n\t\t!isRoot(parentNode) &&\n\t\tparentNode.index(node) === 0 &&\n\t\tnode.raws.before !== undefined &&\n\t\t!node.raws.before.includes('\\n')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,kDAAkD,GAElD;;;CAGC,GACD,SAAS,gBAAgB,CAAC,EAAE,CAAC;IAC5B,MAAM,UAAU,KAAK,EAAE,MAAM,IAAI,EAAE,MAAM,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI;IAClE,MAAM,YAAY,KAAK,EAAE,MAAM,IAAI,EAAE,MAAM,CAAC,KAAK,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI;IAExE,OAAO,YAAY;AACpB;AAMe,SAAS,oBAAoB,IAAI;IAC/C,IAAI,CAAC,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QACrB,OAAO;IACR;IAEA,MAAM,mCAAmC,CAAA,GAAA,mLAAA,CAAA,UAAmC,AAAD,EAAE;IAE7E,IAAI,gBAAgB,kCAAkC,OAAO;QAC5D,OAAO;IACR;IAEA,MAAM,+BAA+B,CAAA,GAAA,+KAAA,CAAA,UAA+B,AAAD,EAAE;IAErE,IAAI,gCAAgC,gBAAgB,MAAM,+BAA+B;QACxF,OAAO;IACR;IAEA,MAAM,aAAa,KAAK,MAAM;IAE9B,iEAAiE;IACjE,IACC,eAAe,aACf,CAAC,CAAA,GAAA,0JAAA,CAAA,SAAM,AAAD,EAAE,eACR,WAAW,KAAK,CAAC,UAAU,KAC3B,KAAK,IAAI,CAAC,MAAM,KAAK,aACrB,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAC1B;QACD,OAAO;IACR;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isAfterComment.mjs"],"sourcesContent":["import isSharedLineComment from './isSharedLineComment.mjs';\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nexport default function isAfterComment(node) {\n\tconst previousNode = node.prev();\n\n\tif (!previousNode || previousNode.type !== 'comment') {\n\t\treturn false;\n\t}\n\n\treturn !isSharedLineComment(previousNode);\n}\n"],"names":[],"mappings":";;;AAAA;;AAMe,SAAS,eAAe,IAAI;IAC1C,MAAM,eAAe,KAAK,IAAI;IAE9B,IAAI,CAAC,gBAAgB,aAAa,IAAI,KAAK,WAAW;QACrD,OAAO;IACR;IAEA,OAAO,CAAC,CAAA,GAAA,mKAAA,CAAA,UAAmB,AAAD,EAAE;AAC7B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/hasBlock.mjs"],"sourcesContent":["/**\n * Check if a statement has an block (empty or otherwise).\n *\n * @param {import('postcss').Container} statement\n * @returns {boolean} True if `statement` has a block (empty or otherwise)\n */\nexport default function hasBlock(statement) {\n\treturn statement.nodes !== undefined;\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACc,SAAS,SAAS,SAAS;IACzC,OAAO,UAAU,KAAK,KAAK;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterBlocklessAtRule.mjs"],"sourcesContent":["import getPreviousNonSharedLineCommentNode from './getPreviousNonSharedLineCommentNode.mjs';\nimport hasBlock from './hasBlock.mjs';\nimport { isAtRule } from './typeGuards.mjs';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nexport default function isBlocklessAtRuleAfterBlocklessAtRule(atRule) {\n\tif (atRule.type !== 'atrule') {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode === undefined) {\n\t\treturn false;\n\t}\n\n\treturn isAtRule(previousNode) && !hasBlock(previousNode) && !hasBlock(atRule);\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAMe,SAAS,sCAAsC,MAAM;IACnE,IAAI,OAAO,IAAI,KAAK,UAAU;QAC7B,OAAO;IACR;IAEA,MAAM,eAAe,CAAA,GAAA,mLAAA,CAAA,UAAmC,AAAD,EAAE;IAEzD,IAAI,iBAAiB,WAAW;QAC/B,OAAO;IACR;IAEA,OAAO,CAAA,GAAA,0JAAA,CAAA,WAAQ,AAAD,EAAE,iBAAiB,CAAC,CAAA,GAAA,wJAAA,CAAA,UAAQ,AAAD,EAAE,iBAAiB,CAAC,CAAA,GAAA,wJAAA,CAAA,UAAQ,AAAD,EAAE;AACvE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.mjs"],"sourcesContent":["import getPreviousNonSharedLineCommentNode from './getPreviousNonSharedLineCommentNode.mjs';\nimport { isAtRule } from './typeGuards.mjs';\nimport isBlocklessAtRuleAfterBlocklessAtRule from './isBlocklessAtRuleAfterBlocklessAtRule.mjs';\n\n/**\n * @param {import('postcss').AtRule} atRule\n * @returns {boolean}\n */\nexport default function isBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule) {\n\tif (!isBlocklessAtRuleAfterBlocklessAtRule(atRule)) {\n\t\treturn false;\n\t}\n\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\tif (previousNode && isAtRule(previousNode)) {\n\t\treturn previousNode.name === atRule.name;\n\t}\n\n\treturn false;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAMe,SAAS,8CAA8C,MAAM;IAC3E,IAAI,CAAC,CAAA,GAAA,qLAAA,CAAA,UAAqC,AAAD,EAAE,SAAS;QACnD,OAAO;IACR;IAEA,MAAM,eAAe,CAAA,GAAA,mLAAA,CAAA,UAAmC,AAAD,EAAE;IAEzD,IAAI,gBAAgB,CAAA,GAAA,0JAAA,CAAA,WAAQ,AAAD,EAAE,eAAe;QAC3C,OAAO,aAAa,IAAI,KAAK,OAAO,IAAI;IACzC;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isFirstNested.mjs"],"sourcesContent":["import { hasSource, isComment, isDocument, isRoot } from './typeGuards.mjs';\n\n/**\n * @param {import('postcss').Node} statement\n * @returns {boolean}\n */\nexport default function isFirstNested(statement) {\n\tconst parentNode = statement.parent;\n\n\tif (parentNode === undefined) {\n\t\treturn false;\n\t}\n\n\tif (isRoot(parentNode) && !isInDocument(parentNode)) {\n\t\treturn false;\n\t}\n\n\tif (statement === parentNode.first) {\n\t\treturn true;\n\t}\n\n\t/*\n\t * Search for the statement in the parent's nodes, ignoring comment\n\t * nodes on the same line as the parent's opening brace.\n\t */\n\n\tconst parentNodes = parentNode.nodes;\n\n\tif (!parentNodes) {\n\t\treturn false;\n\t}\n\n\tconst firstNode = parentNodes[0];\n\n\tif (!firstNode) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\t!isComment(firstNode) ||\n\t\t(typeof firstNode.raws.before === 'string' && firstNode.raws.before.includes('\\n'))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (!hasSource(firstNode) || !firstNode.source.start) {\n\t\treturn false;\n\t}\n\n\tconst openingBraceLine = firstNode.source.start.line;\n\n\tif (!firstNode.source.end || openingBraceLine !== firstNode.source.end.line) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, node] of parentNodes.entries()) {\n\t\tif (index === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === statement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t!isComment(node) ||\n\t\t\t(hasSource(node) && node.source.end && node.source.end.line !== openingBraceLine)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/* istanbul ignore next: Should always return in the loop */\n\treturn false;\n}\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nfunction isInDocument({ parent }) {\n\treturn Boolean(parent && isDocument(parent));\n}\n"],"names":[],"mappings":";;;AAAA;;AAMe,SAAS,cAAc,SAAS;IAC9C,MAAM,aAAa,UAAU,MAAM;IAEnC,IAAI,eAAe,WAAW;QAC7B,OAAO;IACR;IAEA,IAAI,CAAA,GAAA,0JAAA,CAAA,SAAM,AAAD,EAAE,eAAe,CAAC,aAAa,aAAa;QACpD,OAAO;IACR;IAEA,IAAI,cAAc,WAAW,KAAK,EAAE;QACnC,OAAO;IACR;IAEA;;;EAGC,GAED,MAAM,cAAc,WAAW,KAAK;IAEpC,IAAI,CAAC,aAAa;QACjB,OAAO;IACR;IAEA,MAAM,YAAY,WAAW,CAAC,EAAE;IAEhC,IAAI,CAAC,WAAW;QACf,OAAO;IACR;IAEA,IACC,CAAC,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE,cACV,OAAO,UAAU,IAAI,CAAC,MAAM,KAAK,YAAY,UAAU,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAC5E;QACD,OAAO;IACR;IAEA,IAAI,CAAC,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE,cAAc,CAAC,UAAU,MAAM,CAAC,KAAK,EAAE;QACrD,OAAO;IACR;IAEA,MAAM,mBAAmB,UAAU,MAAM,CAAC,KAAK,CAAC,IAAI;IAEpD,IAAI,CAAC,UAAU,MAAM,CAAC,GAAG,IAAI,qBAAqB,UAAU,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;QAC5E,OAAO;IACR;IAEA,KAAK,MAAM,CAAC,OAAO,KAAK,IAAI,YAAY,OAAO,GAAI;QAClD,IAAI,UAAU,GAAG;YAChB;QACD;QAEA,IAAI,SAAS,WAAW;YACvB,OAAO;QACR;QAEA,IACC,CAAC,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE,SACV,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE,SAAS,KAAK,MAAM,CAAC,GAAG,IAAI,KAAK,MAAM,CAAC,GAAG,CAAC,IAAI,KAAK,kBAC/D;YACD,OAAO;QACR;IACD;IAEA,0DAA0D,GAC1D,OAAO;AACR;AAEA;;;CAGC,GACD,SAAS,aAAa,EAAE,MAAM,EAAE;IAC/B,OAAO,QAAQ,UAAU,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAD,EAAE;AACrC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isFirstNodeOfRoot.mjs"],"sourcesContent":["import { isRoot } from './typeGuards.mjs';\n\n/**\n * @param {import('postcss').Node} node\n * @returns {boolean}\n */\nexport default function isFirstNodeOfRoot(node) {\n\tif (isRoot(node)) return false;\n\n\tconst parentNode = node.parent;\n\n\tif (!parentNode) {\n\t\treturn false;\n\t}\n\n\treturn isRoot(parentNode) && node === parentNode.first;\n}\n"],"names":[],"mappings":";;;AAAA;;AAMe,SAAS,kBAAkB,IAAI;IAC7C,IAAI,CAAA,GAAA,0JAAA,CAAA,SAAM,AAAD,EAAE,OAAO,OAAO;IAEzB,MAAM,aAAa,KAAK,MAAM;IAE9B,IAAI,CAAC,YAAY;QAChB,OAAO;IACR;IAEA,OAAO,CAAA,GAAA,0JAAA,CAAA,SAAM,AAAD,EAAE,eAAe,SAAS,WAAW,KAAK;AACvD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/utils/isStandardSyntaxAtRule.mjs"],"sourcesContent":["/**\n * Check whether a at-rule is standard\n *\n * @param {import('postcss').AtRule | import('postcss-less').AtRule} atRule postcss at-rule node\n * @returns {boolean} If `true`, the declaration is standard\n */\nexport default function isStandardSyntaxAtRule(atRule) {\n\t// Ignore `@charset` css rule (is parsed as at-rule)\n\tif (atRule.name.toLowerCase() === 'charset') {\n\t\treturn false;\n\t}\n\n\t// Ignore scss `@content` inside mixins\n\tif (!atRule.nodes && atRule.params === '') {\n\t\treturn false;\n\t}\n\n\t// Ignore Less mixins\n\tif ('mixin' in atRule && atRule.mixin) {\n\t\treturn false;\n\t}\n\n\t// Ignore Less detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`\n\tif (\n\t\t('variable' in atRule && atRule.variable) ||\n\t\t(!atRule.nodes && atRule.raws.afterName === '' && atRule.params[0] === '(')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACc,SAAS,uBAAuB,MAAM;IACpD,oDAAoD;IACpD,IAAI,OAAO,IAAI,CAAC,WAAW,OAAO,WAAW;QAC5C,OAAO;IACR;IAEA,uCAAuC;IACvC,IAAI,CAAC,OAAO,KAAK,IAAI,OAAO,MAAM,KAAK,IAAI;QAC1C,OAAO;IACR;IAEA,qBAAqB;IACrB,IAAI,WAAW,UAAU,OAAO,KAAK,EAAE;QACtC,OAAO;IACR;IAEA,wGAAwG;IACxG,IACC,AAAC,cAAc,UAAU,OAAO,QAAQ,IACvC,CAAC,OAAO,KAAK,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,MAAM,OAAO,MAAM,CAAC,EAAE,KAAK,KACtE;QACD,OAAO;IACR;IAEA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/rules/at-rule-empty-line-before/index.mjs"],"sourcesContent":["import { isRegExp, isString } from '../../utils/validateTypes.mjs';\nimport fixEmptyLinesBefore from '../../utils/fixEmptyLinesBefore.mjs';\nimport getPreviousNonSharedLineCommentNode from '../../utils/getPreviousNonSharedLineCommentNode.mjs';\nimport hasEmptyLine from '../../utils/hasEmptyLine.mjs';\nimport isAfterComment from '../../utils/isAfterComment.mjs';\nimport { isAtRule } from '../../utils/typeGuards.mjs';\nimport isBlocklessAtRuleAfterBlocklessAtRule from '../../utils/isBlocklessAtRuleAfterBlocklessAtRule.mjs';\nimport isBlocklessAtRuleAfterSameNameBlocklessAtRule from '../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule.mjs';\nimport isFirstNested from '../../utils/isFirstNested.mjs';\nimport isFirstNodeOfRoot from '../../utils/isFirstNodeOfRoot.mjs';\nimport isStandardSyntaxAtRule from '../../utils/isStandardSyntaxAtRule.mjs';\nimport optionsMatches from '../../utils/optionsMatches.mjs';\nimport report from '../../utils/report.mjs';\nimport ruleMessages from '../../utils/ruleMessages.mjs';\nimport validateOptions from '../../utils/validateOptions.mjs';\n\nconst ruleName = 'at-rule-empty-line-before';\n\nconst messages = ruleMessages(ruleName, {\n\texpected: 'Expected empty line before at-rule',\n\trejected: 'Unexpected empty line before at-rule',\n});\n\nconst meta = {\n\turl: 'https://stylelint.io/user-guide/rules/at-rule-empty-line-before',\n\tfixable: true,\n};\n\n/** @type {import('stylelint').CoreRules[ruleName]} */\nconst rule = (primary, secondaryOptions, context) => {\n\treturn (root, result) => {\n\t\tconst validOptions = validateOptions(\n\t\t\tresult,\n\t\t\truleName,\n\t\t\t{\n\t\t\t\tactual: primary,\n\t\t\t\tpossible: ['always', 'never'],\n\t\t\t},\n\t\t\t{\n\t\t\t\tactual: secondaryOptions,\n\t\t\t\tpossible: {\n\t\t\t\t\texcept: [\n\t\t\t\t\t\t'after-same-name',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t],\n\t\t\t\t\tignore: [\n\t\t\t\t\t\t'after-comment',\n\t\t\t\t\t\t'first-nested',\n\t\t\t\t\t\t'inside-block',\n\t\t\t\t\t\t'blockless-after-same-name-blockless',\n\t\t\t\t\t\t'blockless-after-blockless',\n\t\t\t\t\t],\n\t\t\t\t\tignoreAtRules: [isString, isRegExp],\n\t\t\t\t},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t);\n\n\t\tif (!validOptions) {\n\t\t\treturn;\n\t\t}\n\n\t\t/** @type {'always' | 'never'} */\n\t\tconst expectation = primary;\n\n\t\troot.walkAtRules((atRule) => {\n\t\t\tconst isNested = atRule.parent && atRule.parent.type !== 'root';\n\n\t\t\t// Ignore the first node\n\t\t\tif (isFirstNodeOfRoot(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!isStandardSyntaxAtRule(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return early if at-rule is to be ignored\n\t\t\tif (optionsMatches(secondaryOptions, 'ignoreAtRules', atRule.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the node if it is the first nested\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'first-nested') && isFirstNested(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is blockless\n\t\t\t// and following another blockless at-rule with the same name\n\t\t\tif (\n\t\t\t\toptionsMatches(secondaryOptions, 'ignore', 'blockless-after-same-name-blockless') &&\n\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if the node is inside a block\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'inside-block') && isNested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Optionally ignore the expectation if a comment precedes this node\n\t\t\tif (optionsMatches(secondaryOptions, 'ignore', 'after-comment') && isAfterComment(atRule)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasEmptyLineBefore = hasEmptyLine(atRule.raws.before);\n\t\t\tlet expectEmptyLineBefore = expectation === 'always';\n\n\t\t\t// Optionally reverse the expectation if any exceptions apply\n\t\t\tif (\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'after-same-name') &&\n\t\t\t\t\tisAtRuleAfterSameNameAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'inside-block') && isNested) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'first-nested') && isFirstNested(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterBlocklessAtRule(atRule)) ||\n\t\t\t\t(optionsMatches(secondaryOptions, 'except', 'blockless-after-same-name-blockless') &&\n\t\t\t\t\tisBlocklessAtRuleAfterSameNameBlocklessAtRule(atRule))\n\t\t\t) {\n\t\t\t\texpectEmptyLineBefore = !expectEmptyLineBefore;\n\t\t\t}\n\n\t\t\t// Return if the expectation is met\n\t\t\tif (expectEmptyLineBefore === hasEmptyLineBefore) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = expectEmptyLineBefore ? messages.expected : messages.rejected;\n\t\t\tconst action = expectEmptyLineBefore ? 'add' : 'remove';\n\n\t\t\t// Fix\n\t\t\tconst fix = () =>\n\t\t\t\tfixEmptyLinesBefore({\n\t\t\t\t\tnode: atRule,\n\t\t\t\t\tnewline: context.newline,\n\t\t\t\t\taction,\n\t\t\t\t});\n\n\t\t\treport({\n\t\t\t\tmessage,\n\t\t\t\tnode: atRule,\n\t\t\t\tresult,\n\t\t\t\truleName,\n\t\t\t\tfix: {\n\t\t\t\t\tapply: fix,\n\t\t\t\t\tnode: atRule.parent,\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n};\n\n/**\n * @param {import('postcss').AtRule} atRule\n */\nfunction isAtRuleAfterSameNameAtRule(atRule) {\n\tconst previousNode = getPreviousNonSharedLineCommentNode(atRule);\n\n\treturn previousNode && isAtRule(previousNode) && previousNode.name === atRule.name;\n}\n\nrule.ruleName = ruleName;\nrule.messages = messages;\nrule.meta = meta;\nexport default rule;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}