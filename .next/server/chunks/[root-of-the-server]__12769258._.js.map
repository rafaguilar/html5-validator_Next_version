{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/postcss-safe-parser/lib/safe-parser.js"],"sourcesContent":["let Comment = require('postcss/lib/comment')\nlet Parser = require('postcss/lib/parser')\nlet tokenizer = require('postcss/lib/tokenize')\n\nclass SafeParser extends Parser {\n  checkMissedSemicolon() {}\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    let pos =\n      this.input.fromOffset(token[3]) ||\n      this.input.fromOffset(this.input.css.length - 1)\n    node.source.end = {\n      column: pos.col,\n      line: pos.line,\n      offset: token[3] + 1\n    }\n\n    let text = token[1].slice(2)\n    if (text.slice(-2) === '*/') text = text.slice(0, -2)\n\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input, { ignoreErrors: true })\n  }\n\n  decl(tokens) {\n    if (tokens.length > 1 && tokens.some(i => i[0] === 'word')) {\n      super.decl(tokens)\n    }\n  }\n\n  doubleColon() {}\n\n  endFile() {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n\n    while (this.current.parent) {\n      this.current = this.current.parent\n      this.current.raws.after = ''\n    }\n    this.root.source.end = this.getPosition(this.tokenizer.position())\n  }\n\n  precheckMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let nextStart, prevEnd\n    for (nextStart = colon - 1; nextStart >= 0; nextStart--) {\n      if (tokens[nextStart][0] === 'word') break\n    }\n    if (nextStart === 0 || nextStart < 0) return\n\n    for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {\n      if (tokens[prevEnd][0] !== 'space') {\n        prevEnd += 1\n        break\n      }\n    }\n\n    let other = tokens.slice(nextStart)\n    let spaces = tokens.slice(prevEnd, nextStart)\n    tokens.splice(prevEnd, tokens.length - prevEnd)\n    this.spaces = spaces.map(i => i[1]).join('')\n\n    this.decl(other)\n  }\n\n  unclosedBracket() {}\n\n  unexpectedClose() {\n    this.current.raws.after += '}'\n  }\n\n  unknownWord(tokens) {\n    this.spaces += tokens.map(i => i[1]).join('')\n  }\n\n  unnamedAtrule(node) {\n    node.name = ''\n  }\n}\n\nmodule.exports = SafeParser\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/postcss-safe-parser/lib/safe-parse.js"],"sourcesContent":["let { Input } = require('postcss')\n\nlet SafeParser = require('./safe-parser')\n\nmodule.exports = function safeParse(css, opts) {\n  let input = new Input(css, opts)\n\n  let parser = new SafeParser(input)\n  parser.parse()\n\n  return parser.root\n}\n"],"names":[],"mappings":"AAAA,IAAI,EAAE,KAAK,EAAE;AAEb,IAAI;AAEJ,OAAO,OAAO,GAAG,SAAS,UAAU,GAAG,EAAE,IAAI;IAC3C,IAAI,QAAQ,IAAI,MAAM,KAAK;IAE3B,IAAI,SAAS,IAAI,WAAW;IAC5B,OAAO,KAAK;IAEZ,OAAO,OAAO,IAAI;AACpB","ignoreList":[0],"debugId":null}}]
}