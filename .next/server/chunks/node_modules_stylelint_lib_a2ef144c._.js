module.exports = {

"[project]/node_modules/stylelint/lib/utils/eachDeclarationBlock.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>eachDeclarationBlock)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
/** @typedef {import('postcss').Root} Root */ /** @typedef {import('postcss').Root} Document */ /** @typedef {import('postcss').Node} PostcssNode */ /** @typedef {import('postcss').Container} PostcssContainerNode */ /** @typedef {import('postcss').Declaration} Declaration */ /** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */ /**
 * @param {PostcssNode} node
 * @returns {node is PostcssContainerNode}
 */ function isContainerNode(node) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(node);
}
function eachDeclarationBlock(root, callback) {
    /**
	 * @param {PostcssNode} statement
	 *
	 * @returns {void}
	 */ function each(statement) {
        if (!isContainerNode(statement)) return;
        if (statement.nodes && statement.nodes.length) {
            /** @type {Declaration[]} */ const decls = [];
            for (const node of statement.nodes){
                if (node.type === 'decl') {
                    decls.push(node);
                }
                each(node);
            }
            if (decls.length) {
                callback(decls.forEach.bind(decls));
            }
        }
    }
    each(root);
}
}}),
"[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Unite two or more sets
 *
 * @param {Iterable<string>[]} args
 * @see {@link https://github.com/microsoft/TypeScript/issues/57228|GitHub}
 */ __turbopack_context__.s({
    "default": (()=>uniteSets)
});
function uniteSets(...args) {
    return new Set([
        ...args
    ].reduce((result, set)=>[
            ...result,
            ...set
        ], []));
}
}}),
"[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Contains helpers for working with vendor prefixes.
 *
 * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2
 *
 * @namespace vendor
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    /**
	 * Returns the vendor prefix extracted from an input string.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} vendor prefix or empty string
	 *
	 * @example
	 * vendor.prefix('-moz-tab-size') //=> '-moz-'
	 * vendor.prefix('tab-size')      //=> ''
	 */ prefix (prop) {
        const match = prop.match(/^(-\w+-)/);
        if (match) {
            return match[0] || '';
        }
        return '';
    },
    /**
	 * Returns the input string stripped of its vendor prefix.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} String name without vendor prefixes.
	 *
	 * @example
	 * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
	 */ unprefixed (prop) {
        return prop.replace(/^-\w+-/, '');
    }
};
}}),
"[project]/node_modules/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$eachDeclarationBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/eachDeclarationBlock.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reference/properties.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
const ruleName = 'declaration-block-no-shorthand-property-overrides';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    rejected: (shorthand, original)=>`Unexpected shorthand "${shorthand}" after "${original}"`
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/declaration-block-no-shorthand-property-overrides'
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary
        });
        if (!validOptions) {
            return;
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$eachDeclarationBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(root, (eachDecl)=>{
            /** @type {Map<string, string>} */ const declarations = new Map();
            eachDecl((decl)=>{
                const prop = decl.prop;
                const unprefixedProp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefixed(prop).toLowerCase();
                const prefix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].prefix(prop).toLowerCase();
                const subProperties = /** @type {Map<string, Set<string>>} */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["longhandSubPropertiesOfShorthandProperties"].get(unprefixedProp);
                const resettables = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["shorthandToResetToInitialProperty"].get(unprefixedProp);
                const union = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(subProperties ?? [], resettables ?? []);
                declarations.set(prop.toLowerCase(), prop);
                if (union.size === 0) return;
                for (const property of union){
                    const declaration = declarations.get(prefix + property);
                    if (!declaration) {
                        continue;
                    }
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                        ruleName,
                        result,
                        node: decl,
                        message: messages.rejected,
                        messageArgs: [
                            prop,
                            declaration || ''
                        ],
                        word: prop
                    });
                }
            });
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_a2ef144c._.js.map