{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/formatters/preprocessWarnings.mjs"],"sourcesContent":["import { DEFAULT_SEVERITY, SEVERITY_ERROR } from '../constants.mjs';\n\n/** @import {LintResult} from 'stylelint' */\n/** @typedef {LintResult['parseErrors'][0]} ParseError */\n/** @typedef {LintResult['warnings'][0]} Warning */\n/** @typedef {Warning['severity']} Severity */\n\n/**\n * Preprocess warnings in a given lint result.\n * Note that this function has a side-effect.\n *\n * @param {LintResult} result\n * @returns {LintResult}\n */\nexport default function preprocessWarnings(result) {\n\tfor (const error of result.parseErrors || []) {\n\t\tresult.warnings.push(parseErrorToWarning(error));\n\t}\n\n\tfor (const warning of result.warnings) {\n\t\twarning.severity = normalizeSeverity(warning);\n\t}\n\n\tresult.warnings.sort(byLocationOrder);\n\n\treturn result;\n}\n\n/**\n * @param {ParseError} error\n * @returns {Warning}\n */\nfunction parseErrorToWarning(error) {\n\treturn {\n\t\tline: error.line,\n\t\tcolumn: error.column,\n\t\trule: error.stylelintType,\n\t\tseverity: SEVERITY_ERROR,\n\t\ttext: `${error.text} (${error.stylelintType})`,\n\t};\n}\n\n/**\n * @param {Warning} warning\n * @returns {Severity}\n */\nfunction normalizeSeverity(warning) {\n\t// NOTE: Plugins may add a warning without severity, for example,\n\t// by directly using the PostCSS `Result#warn()` API.\n\treturn warning.severity || DEFAULT_SEVERITY;\n}\n\n/**\n * @param {Warning} a\n * @param {Warning} b\n * @returns {number}\n */\nfunction byLocationOrder(a, b) {\n\t// positionless first\n\tif (!a.line && b.line) return -1;\n\n\t// positionless first\n\tif (a.line && !b.line) return 1;\n\n\tif (a.line < b.line) return -1;\n\n\tif (a.line > b.line) return 1;\n\n\tif (a.column < b.column) return -1;\n\n\tif (a.column > b.column) return 1;\n\n\treturn 0;\n}\n"],"names":[],"mappings":";;;AAAA;;AAce,SAAS,mBAAmB,MAAM;IAChD,KAAK,MAAM,SAAS,OAAO,WAAW,IAAI,EAAE,CAAE;QAC7C,OAAO,QAAQ,CAAC,IAAI,CAAC,oBAAoB;IAC1C;IAEA,KAAK,MAAM,WAAW,OAAO,QAAQ,CAAE;QACtC,QAAQ,QAAQ,GAAG,kBAAkB;IACtC;IAEA,OAAO,QAAQ,CAAC,IAAI,CAAC;IAErB,OAAO;AACR;AAEA;;;CAGC,GACD,SAAS,oBAAoB,KAAK;IACjC,OAAO;QACN,MAAM,MAAM,IAAI;QAChB,QAAQ,MAAM,MAAM;QACpB,MAAM,MAAM,aAAa;QACzB,UAAU,gJAAA,CAAA,iBAAc;QACxB,MAAM,GAAG,MAAM,IAAI,CAAC,EAAE,EAAE,MAAM,aAAa,CAAC,CAAC,CAAC;IAC/C;AACD;AAEA;;;CAGC,GACD,SAAS,kBAAkB,OAAO;IACjC,iEAAiE;IACjE,qDAAqD;IACrD,OAAO,QAAQ,QAAQ,IAAI,gJAAA,CAAA,mBAAgB;AAC5C;AAEA;;;;CAIC,GACD,SAAS,gBAAgB,CAAC,EAAE,CAAC;IAC5B,qBAAqB;IACrB,IAAI,CAAC,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC;IAE/B,qBAAqB;IACrB,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO;IAE9B,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;IAE7B,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,EAAE,OAAO;IAE5B,IAAI,EAAE,MAAM,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC;IAEjC,IAAI,EAAE,MAAM,GAAG,EAAE,MAAM,EAAE,OAAO;IAEhC,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/BACK-UP%20II/Desktop/PGD/PGD%20-%20Labs/html5-validator_Next_version/node_modules/stylelint/lib/formatters/githubFormatter.mjs"],"sourcesContent":["import preprocessWarnings from './preprocessWarnings.mjs';\n\n/**\n * @see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions\n *\n * @type {import('stylelint').Formatter}\n *\n * @deprecated See https://stylelint.io/awesome-stylelint#formatters for alternative formatters.\n */\nexport default function githubFormatter(results, returnValue) {\n\tconst title = 'Stylelint problem';\n\tconst metadata = returnValue.ruleMetadata;\n\n\tconst lines = results.flatMap((result) => {\n\t\tconst { source, warnings } = preprocessWarnings(result);\n\n\t\treturn warnings.map(({ line, column, endLine, endColumn, text, severity, rule }) => {\n\t\t\tconst msg = buildMessage(text, metadata[rule]);\n\n\t\t\treturn endLine === undefined\n\t\t\t\t? `::${severity} file=${source},line=${line},col=${column},title=${title}::${msg}`\n\t\t\t\t: `::${severity} file=${source},line=${line},col=${column},endLine=${endLine},endColumn=${endColumn},title=${title}::${msg}`;\n\t\t});\n\t});\n\n\tlines.push(`::notice title=Stylelint deprecation::The github formatter is deprecated`);\n\tlines.push('');\n\n\treturn lines.join('\\n');\n}\n\n/**\n * @param {string} msg\n * @param {Partial<import('stylelint').RuleMeta> | undefined} metadata\n * @returns {string}\n */\nfunction buildMessage(msg, metadata) {\n\tif (!metadata) return msg;\n\n\tconst url = metadata.url ? ` - ${metadata.url}` : '';\n\n\tlet additional = [\n\t\tmetadata.fixable ? 'maybe fixable' : '',\n\t\tmetadata.deprecated ? 'deprecated' : '',\n\t]\n\t\t.filter(Boolean)\n\t\t.join(', ');\n\n\tadditional = additional ? ` [${additional}]` : '';\n\n\treturn `${msg}${additional}${url}`;\n}\n"],"names":[],"mappings":";;;AAAA;;AASe,SAAS,gBAAgB,OAAO,EAAE,WAAW;IAC3D,MAAM,QAAQ;IACd,MAAM,WAAW,YAAY,YAAY;IAEzC,MAAM,QAAQ,QAAQ,OAAO,CAAC,CAAC;QAC9B,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,uKAAA,CAAA,UAAkB,AAAD,EAAE;QAEhD,OAAO,SAAS,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC9E,MAAM,MAAM,aAAa,MAAM,QAAQ,CAAC,KAAK;YAE7C,OAAO,YAAY,YAChB,CAAC,EAAE,EAAE,SAAS,MAAM,EAAE,OAAO,MAAM,EAAE,KAAK,KAAK,EAAE,OAAO,OAAO,EAAE,MAAM,EAAE,EAAE,KAAK,GAChF,CAAC,EAAE,EAAE,SAAS,MAAM,EAAE,OAAO,MAAM,EAAE,KAAK,KAAK,EAAE,OAAO,SAAS,EAAE,QAAQ,WAAW,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE,EAAE,KAAK;QAC9H;IACD;IAEA,MAAM,IAAI,CAAC,CAAC,wEAAwE,CAAC;IACrF,MAAM,IAAI,CAAC;IAEX,OAAO,MAAM,IAAI,CAAC;AACnB;AAEA;;;;CAIC,GACD,SAAS,aAAa,GAAG,EAAE,QAAQ;IAClC,IAAI,CAAC,UAAU,OAAO;IAEtB,MAAM,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,EAAE,SAAS,GAAG,EAAE,GAAG;IAElD,IAAI,aAAa;QAChB,SAAS,OAAO,GAAG,kBAAkB;QACrC,SAAS,UAAU,GAAG,eAAe;KACrC,CACC,MAAM,CAAC,SACP,IAAI,CAAC;IAEP,aAAa,aAAa,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC,GAAG;IAE/C,OAAO,GAAG,MAAM,aAAa,KAAK;AACnC","ignoreList":[0],"debugId":null}}]
}