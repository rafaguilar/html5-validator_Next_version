module.exports = {

"[project]/node_modules/stylelint/lib/utils/eachDeclarationBlock.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>eachDeclarationBlock)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
/** @typedef {import('postcss').Root} Root */ /** @typedef {import('postcss').Root} Document */ /** @typedef {import('postcss').Node} PostcssNode */ /** @typedef {import('postcss').Container} PostcssContainerNode */ /** @typedef {import('postcss').Declaration} Declaration */ /** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */ /**
 * @param {PostcssNode} node
 * @returns {node is PostcssContainerNode}
 */ function isContainerNode(node) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(node);
}
function eachDeclarationBlock(root, callback) {
    /**
	 * @param {PostcssNode} statement
	 *
	 * @returns {void}
	 */ function each(statement) {
        if (!isContainerNode(statement)) return;
        if (statement.nodes && statement.nodes.length) {
            /** @type {Declaration[]} */ const decls = [];
            for (const node of statement.nodes){
                if (node.type === 'decl') {
                    decls.push(node);
                }
                each(node);
            }
            if (decls.length) {
                callback(decls.forEach.bind(decls));
            }
        }
    }
    each(root);
}
}}),
"[project]/node_modules/stylelint/lib/utils/isCustomProperty.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check whether a property is a custom one
 * @param {string} property
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isCustomProperty)
});
function isCustomProperty(property) {
    return property.startsWith('--');
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasLessInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasLessInterpolation)
});
const HAS_LESS_INTERPOLATION = /@\{.+?\}/;
function hasLessInterpolation(string) {
    return HAS_LESS_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasPsvInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasPsvInterpolation)
});
const HAS_PSV_INTERPOLATION = /\$\(.+?\)/;
function hasPsvInterpolation(string) {
    return HAS_PSV_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasScssInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasScssInterpolation)
});
const HAS_SCSS_INTERPOLATION = /#\{.+?\}/s;
function hasScssInterpolation(string) {
    return HAS_SCSS_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasTplInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasTplInterpolation)
});
const HAS_TPL_INTERPOLATION = /\{.+?\}/s;
function hasTplInterpolation(string) {
    return HAS_TPL_INTERPOLATION.test(string);
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasInterpolation.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>hasInterpolation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasLessInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasLessInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasPsvInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasPsvInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasScssInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasScssInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasTplInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasTplInterpolation.mjs [app-route] (ecmascript)");
;
;
;
;
function hasInterpolation(string) {
    // SCSS or Less interpolation
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasLessInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasScssInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasTplInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasPsvInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(string)) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check whether a property is SCSS variable
 *
 * @param {string} property
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isScssVariable)
});
function isScssVariable(property) {
    // SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))
    if (property.startsWith('$')) {
        return true;
    }
    // SCSS var within a namespace (e.g. namespace.$var: x)
    if (property.includes('.$')) {
        return true;
    }
    return false;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxProperty.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isStandardSyntaxProperty)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasInterpolation.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isScssVariable.mjs [app-route] (ecmascript)");
;
;
function isStandardSyntaxProperty(property) {
    // SCSS var
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isScssVariable$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(property)) {
        return false;
    }
    // Less var (e.g. @var: x)
    if (property.startsWith('@')) {
        return false;
    }
    // Less append property value with space (e.g. transform+_: scale(2))
    if (property.endsWith('+') || property.endsWith('+_')) {
        return false;
    }
    // SCSS or Less interpolation
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(property)) {
        return false;
    }
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/utils/isStandardSyntaxValue.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>isStandardSyntaxValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasInterpolation.mjs [app-route] (ecmascript)");
;
function isStandardSyntaxValue(value) {
    let normalizedValue = value;
    // Ignore operators before variables (example -$variable)
    if (/^[-+*/]/.test(value.charAt(0))) {
        normalizedValue = normalizedValue.slice(1);
    }
    // SCSS variable (example $variable)
    // styled component interpolation (example ${foo => foo.bar})
    if (normalizedValue.startsWith('$')) {
        return false;
    }
    // SCSS namespace (example namespace.$variable)
    if (/^.+\.\$/.test(value)) {
        return false;
    }
    // SCSS namespace (example namespace.function-name())
    if (/^.+\.[-\w]+\(/.test(value)) {
        return false;
    }
    // Less variable
    if (normalizedValue.startsWith('@')) {
        return false;
    }
    // SCSS or Less interpolation
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasInterpolation$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(normalizedValue)) {
        return false;
    }
    // WebExtension replacement keyword used by Chrome/Firefox
    // more information: https://developer.chrome.com/extensions/i18n
    // and https://github.com/stylelint/stylelint/issues/4707
    if (/__MSG_\S+__/.test(value)) {
        return false;
    }
    return true;
}
}}),
"[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Contains helpers for working with vendor prefixes.
 *
 * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2
 *
 * @namespace vendor
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    /**
	 * Returns the vendor prefix extracted from an input string.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} vendor prefix or empty string
	 *
	 * @example
	 * vendor.prefix('-moz-tab-size') //=> '-moz-'
	 * vendor.prefix('tab-size')      //=> ''
	 */ prefix (prop) {
        const match = prop.match(/^(-\w+-)/);
        if (match) {
            return match[0] || '';
        }
        return '';
    },
    /**
	 * Returns the input string stripped of its vendor prefix.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} String name without vendor prefixes.
	 *
	 * @example
	 * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
	 */ unprefixed (prop) {
        return prop.replace(/^-\w+-/, '');
    }
};
}}),
"[project]/node_modules/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/css-tree/lib/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$utils$2f$List$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/css-tree/lib/utils/List.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/css-tree/lib/index.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$eachDeclarationBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/eachDeclarationBlock.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isCustomProperty.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxProperty.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isStandardSyntaxValue.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
const ruleName = 'declaration-block-no-duplicate-properties';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    rejected: (property)=>`Unexpected duplicate "${property}"`
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-properties',
    fixable: true
};
/** @typedef {import('css-tree').CssNode} CssNode */ /** @typedef {import('postcss').Declaration} Declaration */ /** @type {(node: CssNode) => node is CssNode & { children: import('css-tree').List<CssNode> }} */ const hasChildren = (node)=>'children' in node && node.children instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$utils$2f$List$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["List"];
/** @type {(node1: CssNode[], node2: CssNode[]) => boolean} */ const isEqualValueNodes = (nodes1, nodes2)=>{
    // Different lengths indicate different syntaxes.
    if (nodes1.length !== nodes2.length) {
        return false;
    }
    for(let i = 0; i < nodes1.length; i++){
        const node1 = nodes1[i];
        const node2 = nodes2[i];
        // Different types indicate different syntaxes.
        if (typeof node1 === 'undefined' || typeof node2 === 'undefined' || node1.type !== node2.type) {
            return false;
        }
        const node1Name = 'name' in node1 ? String(node1.name) : '';
        const node2Name = 'name' in node2 ? String(node2.name) : '';
        // Custom properties have unknown value syntaxes but are equal for CSS parsers.
        if (node1.type === 'Identifier' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node1Name) && node2.type === 'Identifier' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(node2Name)) {
            continue;
        }
        // Different ident or function names indicate different syntaxes.
        if (node1Name.toLowerCase() !== node2Name.toLowerCase()) {
            return false;
        }
        const node1Unit = 'unit' in node1 ? node1.unit : '';
        const node2Unit = 'unit' in node2 ? node2.unit : '';
        // Different units indicate different syntaxes.
        if (node1Unit !== node2Unit) {
            return false;
        }
        const node1Children = hasChildren(node1) ? node1.children.toArray() : null;
        const node2Children = hasChildren(node2) ? node2.children.toArray() : null;
        if (Array.isArray(node1Children) && Array.isArray(node2Children)) {
            if (isEqualValueNodes(node1Children, node2Children)) {
                continue;
            } else {
                return false;
            }
        }
    }
    return true;
};
/** @type {(value1: string, value2: string) => boolean} */ const isEqualValueSyntaxes = (value1, value2)=>{
    if (value1 === value2) {
        return true;
    }
    if (!((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(value1) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(value2))) {
        return false;
    }
    let value1Node;
    let value2Node;
    try {
        value1Node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["parse"])(value1, {
            context: 'value'
        });
        value2Node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$tree$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["parse"])(value2, {
            context: 'value'
        });
    } catch  {
        return false;
    }
    const node1Children = hasChildren(value1Node) ? value1Node.children.toArray() : [];
    const node2Children = hasChildren(value2Node) ? value2Node.children.toArray() : [];
    return isEqualValueNodes(node1Children, node2Children);
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary, secondaryOptions)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary
        }, {
            actual: secondaryOptions,
            possible: {
                ignore: [
                    'consecutive-duplicates',
                    'consecutive-duplicates-with-different-values',
                    'consecutive-duplicates-with-different-syntaxes',
                    'consecutive-duplicates-with-same-prefixless-values'
                ],
                ignoreProperties: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"],
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRegExp"]
                ]
            },
            optional: true
        });
        if (!validOptions) {
            return;
        }
        const ignoreDuplicates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'consecutive-duplicates');
        const ignoreDiffValues = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'consecutive-duplicates-with-different-values');
        const ignoreDiffSyntaxes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'consecutive-duplicates-with-different-syntaxes');
        const ignorePrefixlessSameValues = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'consecutive-duplicates-with-same-prefixless-values');
        /** @param {Declaration} node */ const fixer = (node)=>()=>{
                node.remove();
            };
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$eachDeclarationBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(root, (eachDecl)=>{
            /** @type {Declaration[]} */ const decls = [];
            eachDecl((decl)=>{
                const prop = decl.prop;
                const lowerProp = decl.prop.toLowerCase();
                const value = decl.value;
                const important = decl.important;
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isStandardSyntaxProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prop)) {
                    return;
                }
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isCustomProperty$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prop)) {
                    return;
                }
                // Return early if the property is to be ignored
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignoreProperties', prop)) {
                    return;
                }
                // Ignore the src property as commonly duplicated in at-fontface
                if (lowerProp === 'src') {
                    return;
                }
                const indexDuplicate = decls.findIndex((d)=>d.prop.toLowerCase() === lowerProp);
                if (indexDuplicate === -1) {
                    decls.push(decl);
                }
                const duplicateDecl = decls[indexDuplicate];
                if (!duplicateDecl) {
                    return;
                }
                const duplicateValue = duplicateDecl.value || '';
                const duplicateImportant = duplicateDecl.important || false;
                const duplicateIsMoreImportant = !important && duplicateImportant;
                const duplicatesAreConsecutive = indexDuplicate === decls.length - 1;
                const unprefixedDuplicatesAreEqual = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefixed(value) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefixed(duplicateValue);
                const fixOrReport = ()=>{
                    const node = duplicateIsMoreImportant ? decl : duplicateDecl;
                    const word = duplicateIsMoreImportant ? prop : duplicateDecl.prop;
                    if (!duplicateIsMoreImportant) {
                        // replace previous "active" decl with current one
                        decls[indexDuplicate] = decl;
                    }
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                        message: messages.rejected,
                        messageArgs: [
                            word
                        ],
                        node,
                        result,
                        ruleName,
                        word,
                        fix: {
                            apply: fixer(node),
                            node: node.parent
                        }
                    });
                };
                if (ignoreDiffValues || ignoreDiffSyntaxes || ignorePrefixlessSameValues) {
                    if (!duplicatesAreConsecutive || ignorePrefixlessSameValues && !unprefixedDuplicatesAreEqual) {
                        fixOrReport();
                        return;
                    }
                    if (ignoreDiffSyntaxes) {
                        const duplicateValueSyntaxesAreEqual = isEqualValueSyntaxes(value, duplicateValue);
                        if (duplicateValueSyntaxesAreEqual) {
                            fixOrReport();
                            return;
                        }
                    }
                    if (value !== duplicateValue) {
                        return;
                    }
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                        message: messages.rejected,
                        messageArgs: [
                            duplicateDecl.prop
                        ],
                        node: duplicateDecl,
                        result,
                        ruleName,
                        word: duplicateDecl.prop,
                        fix: {
                            apply: fixer(duplicateDecl),
                            node: duplicateDecl.parent
                        }
                    });
                }
                if (ignoreDuplicates && duplicatesAreConsecutive) {
                    return;
                }
                fixOrReport();
            });
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_481ceeaf._.js.map