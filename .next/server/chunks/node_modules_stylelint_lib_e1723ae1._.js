module.exports = {

"[project]/node_modules/stylelint/lib/utils/beforeBlockString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>beforeBlockString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
function beforeBlockString(statement, { noRawBefore } = {
    noRawBefore: false
}) {
    let result = '';
    const before = statement.raws.before || '';
    if (!noRawBefore) {
        result += before;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(statement)) {
        result += statement.selector;
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(statement)) {
        result += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;
    } else {
        return '';
    }
    result += statement.raws.between || '';
    return result;
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasBlock.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check if a statement has an block (empty or otherwise).
 *
 * @param {import('postcss').Container} statement
 * @returns {boolean} True if `statement` has a block (empty or otherwise)
 */ __turbopack_context__.s({
    "default": (()=>hasBlock)
});
function hasBlock(statement) {
    return statement.nodes !== undefined;
}
}}),
"[project]/node_modules/stylelint/lib/utils/rawNodeString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Stringify PostCSS node including its raw "before" string.
 *
 * @param {import('postcss').Node} node
 *
 * @returns {string}
 */ __turbopack_context__.s({
    "default": (()=>rawNodeString)
});
function rawNodeString(node) {
    let result = '';
    if (node.raws.before) {
        result += node.raws.before;
    }
    result += node.toString();
    return result;
}
}}),
"[project]/node_modules/stylelint/lib/utils/blockString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>blockString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$beforeBlockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/beforeBlockString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasBlock.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$rawNodeString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/rawNodeString.mjs [app-route] (ecmascript)");
;
;
;
function blockString(statement) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement)) {
        return '';
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$rawNodeString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement).slice((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$beforeBlockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement).length);
}
}}),
"[project]/node_modules/stylelint/lib/utils/isSingleLineString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check if a string is a single line (i.e. does not contain
 * any newline characters).
 *
 * @param {string} input
 * @returns {boolean}
 */ __turbopack_context__.s({
    "default": (()=>isSingleLineString)
});
function isSingleLineString(input) {
    return !/[\n\r]/.test(input);
}
}}),
"[project]/node_modules/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/blockString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isSingleLineString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/isSingleLineString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
const ruleName = 'declaration-block-single-line-max-declarations';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    expected: (max)=>`Expected no more than ${max} ${max === 1 ? 'declaration' : 'declarations'}`
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/declaration-block-single-line-max-declarations'
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary,
            possible: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNumber"]
            ]
        });
        if (!validOptions) {
            return;
        }
        root.walkRules((ruleNode)=>{
            const block = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleNode);
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$isSingleLineString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(block)) {
                return;
            }
            if (!ruleNode.nodes) {
                return;
            }
            const decls = ruleNode.nodes.filter((node)=>node.type === 'decl');
            if (decls.length <= primary) {
                return;
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                message: messages.expected,
                messageArgs: [
                    primary
                ],
                node: ruleNode,
                word: block,
                result,
                ruleName
            });
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_e1723ae1._.js.map