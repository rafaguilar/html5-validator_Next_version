module.exports = {

"[project]/node_modules/stylelint/lib/utils/beforeBlockString.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>beforeBlockString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
function beforeBlockString(statement, { noRawBefore } = {
    noRawBefore: false
}) {
    let result = '';
    const before = statement.raws.before || '';
    if (!noRawBefore) {
        result += before;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(statement)) {
        result += statement.selector;
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(statement)) {
        result += `@${statement.name}${statement.raws.afterName || ''}${statement.params}`;
    } else {
        return '';
    }
    result += statement.raws.between || '';
    return result;
}
}}),
"[project]/node_modules/stylelint/lib/utils/hasBlock.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Check if a statement has an block (empty or otherwise).
 *
 * @param {import('postcss').Container} statement
 * @returns {boolean} True if `statement` has a block (empty or otherwise)
 */ __turbopack_context__.s({
    "default": (()=>hasBlock)
});
function hasBlock(statement) {
    return statement.nodes !== undefined;
}
}}),
"[project]/node_modules/stylelint/lib/rules/block-no-empty/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$beforeBlockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/beforeBlockString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/hasBlock.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/configurationComment.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
const ruleName = 'block-no-empty';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    rejected: 'Unexpected empty block'
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/block-no-empty'
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary, secondaryOptions, context)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary,
            possible: [
                true
            ]
        }, {
            actual: secondaryOptions,
            possible: {
                ignore: [
                    'comments'
                ]
            },
            optional: true
        });
        if (!validOptions) {
            return;
        }
        const ignoreComments = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignore', 'comments');
        // Check both kinds of statements: rules and at-rules
        root.walkRules(check);
        root.walkAtRules(check);
        /** @typedef {import('postcss').Rule | import('postcss').AtRule} Statement */ /**
		 * @param {Statement} statement
		 */ function check(statement) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$hasBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement)) {
                return;
            }
            if (hasNotableChild(statement)) {
                return;
            }
            if (hasNonWhitespace(statement)) {
                return;
            }
            let index = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$beforeBlockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(statement, {
                noRawBefore: true
            }).length;
            // For empty blocks when using SugarSS parser
            if (statement.raws.between === undefined) {
                index--;
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                message: messages.rejected,
                node: statement,
                start: statement.positionBy({
                    index
                }),
                end: statement.rangeBy({}).end,
                result,
                ruleName
            });
        }
        /**
		 * @param {Statement} statement
		 * @returns {boolean}
		 */ function hasNotableChild(statement) {
            return (statement.nodes ?? []).some((child)=>{
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isComment"])(child)) {
                    if (ignoreComments) return false;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$configurationComment$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isConfigurationComment"])(child, context.configurationComment)) return false;
                }
                return true;
            });
        }
        /**
		 * @param {Statement} statement
		 * @returns {boolean}
		 */ function hasNonWhitespace(statement) {
            const { after } = statement.raws;
            return typeof after === 'string' && /\S/.test(after);
        }
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_stylelint_lib_5698e599._.js.map