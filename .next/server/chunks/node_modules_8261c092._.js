module.exports = {

"[project]/node_modules/postcss-value-parser/lib/unit.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var minus = "-".charCodeAt(0);
var plus = "+".charCodeAt(0);
var dot = ".".charCodeAt(0);
var exp = "e".charCodeAt(0);
var EXP = "E".charCodeAt(0);
// Check if three code points would start a number
// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
function likeNumber(value) {
    var code = value.charCodeAt(0);
    var nextCode;
    if (code === plus || code === minus) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) {
            return true;
        }
        var nextNextCode = value.charCodeAt(2);
        if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
            return true;
        }
        return false;
    }
    if (code === dot) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) {
            return true;
        }
        return false;
    }
    if (code >= 48 && code <= 57) {
        return true;
    }
    return false;
}
// Consume a number
// https://www.w3.org/TR/css-syntax-3/#consume-number
module.exports = function(value) {
    var pos = 0;
    var length = value.length;
    var code;
    var nextCode;
    var nextNextCode;
    if (length === 0 || !likeNumber(value)) {
        return false;
    }
    code = value.charCodeAt(pos);
    if (code === plus || code === minus) {
        pos++;
    }
    while(pos < length){
        code = value.charCodeAt(pos);
        if (code < 48 || code > 57) {
            break;
        }
        pos += 1;
    }
    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    if (code === dot && nextCode >= 48 && nextCode <= 57) {
        pos += 2;
        while(pos < length){
            code = value.charCodeAt(pos);
            if (code < 48 || code > 57) {
                break;
            }
            pos += 1;
        }
    }
    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    nextNextCode = value.charCodeAt(pos + 2);
    if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {
        pos += nextCode === plus || nextCode === minus ? 3 : 2;
        while(pos < length){
            code = value.charCodeAt(pos);
            if (code < 48 || code > 57) {
                break;
            }
            pos += 1;
        }
    }
    return {
        number: value.slice(0, pos),
        unit: value.slice(pos)
    };
};
}}),
"[project]/node_modules/postcss-value-parser/lib/parse.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var openParentheses = "(".charCodeAt(0);
var closeParentheses = ")".charCodeAt(0);
var singleQuote = "'".charCodeAt(0);
var doubleQuote = '"'.charCodeAt(0);
var backslash = "\\".charCodeAt(0);
var slash = "/".charCodeAt(0);
var comma = ",".charCodeAt(0);
var colon = ":".charCodeAt(0);
var star = "*".charCodeAt(0);
var uLower = "u".charCodeAt(0);
var uUpper = "U".charCodeAt(0);
var plus = "+".charCodeAt(0);
var isUnicodeRange = /^[a-f0-9?-]+$/i;
module.exports = function(input) {
    var tokens = [];
    var value = input;
    var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;
    var pos = 0;
    var code = value.charCodeAt(pos);
    var max = value.length;
    var stack = [
        {
            nodes: tokens
        }
    ];
    var balanced = 0;
    var parent;
    var name = "";
    var before = "";
    var after = "";
    while(pos < max){
        // Whitespaces
        if (code <= 32) {
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            }while (code <= 32)
            token = value.slice(pos, next);
            prev = tokens[tokens.length - 1];
            if (code === closeParentheses && balanced) {
                after = token;
            } else if (prev && prev.type === "div") {
                prev.after = token;
                prev.sourceEndIndex += token.length;
            } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === "function" && parent.value !== "calc")) {
                before = token;
            } else {
                tokens.push({
                    type: "space",
                    sourceIndex: pos,
                    sourceEndIndex: next,
                    value: token
                });
            }
            pos = next;
        // Quotes
        } else if (code === singleQuote || code === doubleQuote) {
            next = pos;
            quote = code === singleQuote ? "'" : '"';
            token = {
                type: "string",
                sourceIndex: pos,
                quote: quote
            };
            do {
                escape = false;
                next = value.indexOf(quote, next + 1);
                if (~next) {
                    escapePos = next;
                    while(value.charCodeAt(escapePos - 1) === backslash){
                        escapePos -= 1;
                        escape = !escape;
                    }
                } else {
                    value += quote;
                    next = value.length - 1;
                    token.unclosed = true;
                }
            }while (escape)
            token.value = value.slice(pos + 1, next);
            token.sourceEndIndex = token.unclosed ? next : next + 1;
            tokens.push(token);
            pos = next + 1;
            code = value.charCodeAt(pos);
        // Comments
        } else if (code === slash && value.charCodeAt(pos + 1) === star) {
            next = value.indexOf("*/", pos);
            token = {
                type: "comment",
                sourceIndex: pos,
                sourceEndIndex: next + 2
            };
            if (next === -1) {
                token.unclosed = true;
                next = value.length;
                token.sourceEndIndex = next;
            }
            token.value = value.slice(pos + 2, next);
            tokens.push(token);
            pos = next + 2;
            code = value.charCodeAt(pos);
        // Operation within calc
        } else if ((code === slash || code === star) && parent && parent.type === "function" && parent.value === "calc") {
            token = value[pos];
            tokens.push({
                type: "word",
                sourceIndex: pos - before.length,
                sourceEndIndex: pos + token.length,
                value: token
            });
            pos += 1;
            code = value.charCodeAt(pos);
        // Dividers
        } else if (code === slash || code === comma || code === colon) {
            token = value[pos];
            tokens.push({
                type: "div",
                sourceIndex: pos - before.length,
                sourceEndIndex: pos + token.length,
                value: token,
                before: before,
                after: ""
            });
            before = "";
            pos += 1;
            code = value.charCodeAt(pos);
        // Open parentheses
        } else if (openParentheses === code) {
            // Whitespaces after open parentheses
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            }while (code <= 32)
            parenthesesOpenPos = pos;
            token = {
                type: "function",
                sourceIndex: pos - name.length,
                value: name,
                before: value.slice(parenthesesOpenPos + 1, next)
            };
            pos = next;
            if (name === "url" && code !== singleQuote && code !== doubleQuote) {
                next -= 1;
                do {
                    escape = false;
                    next = value.indexOf(")", next + 1);
                    if (~next) {
                        escapePos = next;
                        while(value.charCodeAt(escapePos - 1) === backslash){
                            escapePos -= 1;
                            escape = !escape;
                        }
                    } else {
                        value += ")";
                        next = value.length - 1;
                        token.unclosed = true;
                    }
                }while (escape)
                // Whitespaces before closed
                whitespacePos = next;
                do {
                    whitespacePos -= 1;
                    code = value.charCodeAt(whitespacePos);
                }while (code <= 32)
                if (parenthesesOpenPos < whitespacePos) {
                    if (pos !== whitespacePos + 1) {
                        token.nodes = [
                            {
                                type: "word",
                                sourceIndex: pos,
                                sourceEndIndex: whitespacePos + 1,
                                value: value.slice(pos, whitespacePos + 1)
                            }
                        ];
                    } else {
                        token.nodes = [];
                    }
                    if (token.unclosed && whitespacePos + 1 !== next) {
                        token.after = "";
                        token.nodes.push({
                            type: "space",
                            sourceIndex: whitespacePos + 1,
                            sourceEndIndex: next,
                            value: value.slice(whitespacePos + 1, next)
                        });
                    } else {
                        token.after = value.slice(whitespacePos + 1, next);
                        token.sourceEndIndex = next;
                    }
                } else {
                    token.after = "";
                    token.nodes = [];
                }
                pos = next + 1;
                token.sourceEndIndex = token.unclosed ? next : pos;
                code = value.charCodeAt(pos);
                tokens.push(token);
            } else {
                balanced += 1;
                token.after = "";
                token.sourceEndIndex = pos + 1;
                tokens.push(token);
                stack.push(token);
                tokens = token.nodes = [];
                parent = token;
            }
            name = "";
        // Close parentheses
        } else if (closeParentheses === code && balanced) {
            pos += 1;
            code = value.charCodeAt(pos);
            parent.after = after;
            parent.sourceEndIndex += after.length;
            after = "";
            balanced -= 1;
            stack[stack.length - 1].sourceEndIndex = pos;
            stack.pop();
            parent = stack[balanced];
            tokens = parent.nodes;
        // Words
        } else {
            next = pos;
            do {
                if (code === backslash) {
                    next += 1;
                }
                next += 1;
                code = value.charCodeAt(next);
            }while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === "function" && parent.value === "calc" || code === slash && parent.type === "function" && parent.value === "calc" || code === closeParentheses && balanced))
            token = value.slice(pos, next);
            if (openParentheses === code) {
                name = token;
            } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {
                tokens.push({
                    type: "unicode-range",
                    sourceIndex: pos,
                    sourceEndIndex: next,
                    value: token
                });
            } else {
                tokens.push({
                    type: "word",
                    sourceIndex: pos,
                    sourceEndIndex: next,
                    value: token
                });
            }
            pos = next;
        }
    }
    for(pos = stack.length - 1; pos; pos -= 1){
        stack[pos].unclosed = true;
        stack[pos].sourceEndIndex = value.length;
    }
    return stack[0].nodes;
};
}}),
"[project]/node_modules/postcss-value-parser/lib/walk.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = function walk(nodes, cb, bubble) {
    var i, max, node, result;
    for(i = 0, max = nodes.length; i < max; i += 1){
        node = nodes[i];
        if (!bubble) {
            result = cb(node, i, nodes);
        }
        if (result !== false && node.type === "function" && Array.isArray(node.nodes)) {
            walk(node.nodes, cb, bubble);
        }
        if (bubble) {
            cb(node, i, nodes);
        }
    }
};
}}),
"[project]/node_modules/postcss-value-parser/lib/stringify.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
function stringifyNode(node, custom) {
    var type = node.type;
    var value = node.value;
    var buf;
    var customResult;
    if (custom && (customResult = custom(node)) !== undefined) {
        return customResult;
    } else if (type === "word" || type === "space") {
        return value;
    } else if (type === "string") {
        buf = node.quote || "";
        return buf + value + (node.unclosed ? "" : buf);
    } else if (type === "comment") {
        return "/*" + value + (node.unclosed ? "" : "*/");
    } else if (type === "div") {
        return (node.before || "") + value + (node.after || "");
    } else if (Array.isArray(node.nodes)) {
        buf = stringify(node.nodes, custom);
        if (type !== "function") {
            return buf;
        }
        return value + "(" + (node.before || "") + buf + (node.after || "") + (node.unclosed ? "" : ")");
    }
    return value;
}
function stringify(nodes, custom) {
    var result, i;
    if (Array.isArray(nodes)) {
        result = "";
        for(i = nodes.length - 1; ~i; i -= 1){
            result = stringifyNode(nodes[i], custom) + result;
        }
        return result;
    }
    return stringifyNode(nodes, custom);
}
module.exports = stringify;
}}),
"[project]/node_modules/postcss-value-parser/lib/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var parse = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/parse.js [app-route] (ecmascript)");
var walk = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/walk.js [app-route] (ecmascript)");
var stringify = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/stringify.js [app-route] (ecmascript)");
function ValueParser(value) {
    if (this instanceof ValueParser) {
        this.nodes = parse(value);
        return this;
    }
    return new ValueParser(value);
}
ValueParser.prototype.toString = function() {
    return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
};
ValueParser.prototype.walk = function(cb, bubble) {
    walk(this.nodes, cb, bubble);
    return this;
};
ValueParser.unit = __turbopack_context__.r("[project]/node_modules/postcss-value-parser/lib/unit.js [app-route] (ecmascript)");
ValueParser.walk = walk;
ValueParser.stringify = stringify;
module.exports = ValueParser;
}}),
"[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Unite two or more sets
 *
 * @param {Iterable<string>[]} args
 * @see {@link https://github.com/microsoft/TypeScript/issues/57228|GitHub}
 */ __turbopack_context__.s({
    "default": (()=>uniteSets)
});
function uniteSets(...args) {
    return new Set([
        ...args
    ].reduce((result, set)=>[
            ...result,
            ...set
        ], []));
}
}}),
"[project]/node_modules/stylelint/lib/reference/keywords.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "animationNameKeywords": (()=>animationNameKeywords),
    "animationShorthandKeywords": (()=>animationShorthandKeywords),
    "basicKeywords": (()=>basicKeywords),
    "camelCaseKeywords": (()=>camelCaseKeywords),
    "counterIncrementKeywords": (()=>counterIncrementKeywords),
    "counterResetKeywords": (()=>counterResetKeywords),
    "deprecatedSystemColorKeywords": (()=>deprecatedSystemColorKeywords),
    "fontFamilyKeywords": (()=>fontFamilyKeywords),
    "fontShorthandKeywords": (()=>fontShorthandKeywords),
    "fontSizeKeywords": (()=>fontSizeKeywords),
    "fontWeightAbsoluteKeywords": (()=>fontWeightAbsoluteKeywords),
    "fontWeightKeywords": (()=>fontWeightKeywords),
    "fontWeightNonNumericKeywords": (()=>fontWeightNonNumericKeywords),
    "fontWeightRelativeKeywords": (()=>fontWeightRelativeKeywords),
    "gridAreaKeywords": (()=>gridAreaKeywords),
    "gridColumnKeywords": (()=>gridColumnKeywords),
    "gridRowKeywords": (()=>gridRowKeywords),
    "keyframeSelectorKeywords": (()=>keyframeSelectorKeywords),
    "listStyleImageKeywords": (()=>listStyleImageKeywords),
    "listStylePositionKeywords": (()=>listStylePositionKeywords),
    "listStyleShorthandKeywords": (()=>listStyleShorthandKeywords),
    "listStyleTypeKeywords": (()=>listStyleTypeKeywords),
    "namedColorsKeywords": (()=>namedColorsKeywords),
    "namedTimelineRangeKeywords": (()=>namedTimelineRangeKeywords),
    "prefixedSystemFonts": (()=>prefixedSystemFonts),
    "systemColorsKeywords": (()=>systemColorsKeywords),
    "systemFontKeywords": (()=>systemFontKeywords)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/uniteSets.mjs [app-route] (ecmascript)");
;
const basicKeywords = new Set([
    'initial',
    'inherit',
    'revert',
    'revert-layer',
    'unset'
]);
const systemFontKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'caption',
    'icon',
    'menu',
    'message-box',
    'small-caption',
    'status-bar'
]);
const fontFamilyKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'serif',
    'sans-serif',
    'cursive',
    'fantasy',
    'monospace',
    'system-ui',
    'ui-serif',
    'ui-sans-serif',
    'ui-monospace',
    'ui-rounded',
    'emoji',
    'math',
    'fangsong'
]);
/** @type {ReadonlySet<string>} */ const appleSystemFonts = new Set([
    '-apple-system',
    '-apple-system-headline',
    '-apple-system-body',
    '-apple-system-subheadline',
    '-apple-system-footnote',
    '-apple-system-caption1',
    '-apple-system-caption2',
    '-apple-system-short-headline',
    '-apple-system-short-body',
    '-apple-system-short-subheadline',
    '-apple-system-short-footnote',
    '-apple-system-short-caption1',
    '-apple-system-tall-body',
    '-apple-system-title0',
    '-apple-system-title1',
    '-apple-system-title2',
    '-apple-system-title3',
    '-apple-system-title4'
]);
/** @type {ReadonlySet<string>} */ const mozillaSystemFonts = new Set([
    '-moz-button',
    '-moz-desktop',
    '-moz-dialog',
    '-moz-document',
    '-moz-field',
    '-moz-fixed',
    '-moz-info',
    '-moz-list',
    '-moz-pull-down-menu',
    '-moz-window',
    '-moz-workspace'
]);
/** @type {ReadonlySet<string>} */ const webkitSystemFonts = new Set([
    '-webkit-body',
    '-webkit-control',
    '-webkit-mini-control',
    '-webkit-pictograph',
    '-webkit-small-control',
    '-webkit-standard'
]);
const prefixedSystemFonts = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(appleSystemFonts, mozillaSystemFonts, webkitSystemFonts);
const fontWeightRelativeKeywords = new Set([
    'bolder',
    'lighter'
]);
const fontWeightAbsoluteKeywords = new Set([
    'normal',
    'bold'
]);
const fontWeightNonNumericKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(fontWeightRelativeKeywords, fontWeightAbsoluteKeywords);
/** @type {ReadonlySet<string>} */ const fontWeightNumericKeywords = new Set([
    '100',
    '200',
    '300',
    '400',
    '500',
    '600',
    '700',
    '800',
    '900'
]);
const fontWeightKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, fontWeightNonNumericKeywords, fontWeightNumericKeywords);
/** @type {ReadonlySet<string>} */ const fontStyleKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'normal',
    'italic',
    'oblique'
]);
/** @type {ReadonlySet<string>} */ const fontVariantCSS2Keywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'normal',
    'none',
    'small-caps'
]);
/** @type {ReadonlySet<string>} */ const fontStretchKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'semi-condensed',
    'condensed',
    'extra-condensed',
    'ultra-condensed',
    'semi-expanded',
    'expanded',
    'extra-expanded',
    'ultra-expanded'
]);
const fontSizeKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'xx-small',
    'x-small',
    'small',
    'medium',
    'large',
    'x-large',
    'xx-large',
    'xxx-large',
    'larger',
    'smaller',
    'math',
    '-konq-xxx-large',
    '-webkit-xxx-large'
]);
/** @type {ReadonlySet<string>} */ const lineHeightKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'normal'
]);
const fontShorthandKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, fontStyleKeywords, fontVariantCSS2Keywords, fontWeightKeywords, fontStretchKeywords, fontSizeKeywords, lineHeightKeywords, fontFamilyKeywords);
const animationNameKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'none'
]);
/** @type {ReadonlySet<string>} */ const animationTimingFunctionKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'linear',
    'ease',
    'ease-in',
    'ease-in-out',
    'ease-out',
    'step-start',
    'step-end',
    'steps',
    'cubic-bezier'
]);
/** @type {ReadonlySet<string>} */ const animationIterationCountKeywords = new Set([
    'infinite'
]);
/** @type {ReadonlySet<string>} */ const animationDirectionKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'normal',
    'reverse',
    'alternate',
    'alternate-reverse'
]);
/** @type {ReadonlySet<string>} */ const animationFillModeKeywords = new Set([
    'none',
    'forwards',
    'backwards',
    'both'
]);
/** @type {ReadonlySet<string>} */ const animationPlayStateKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'running',
    'paused'
]);
const animationShorthandKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, animationNameKeywords, animationTimingFunctionKeywords, animationIterationCountKeywords, animationDirectionKeywords, animationFillModeKeywords, animationPlayStateKeywords);
const gridRowKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'auto',
    'span'
]);
const gridColumnKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'auto',
    'span'
]);
const gridAreaKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'auto',
    'span'
]);
const counterIncrementKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'none'
]);
const counterResetKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'none'
]);
const listStyleTypeKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'none',
    'disc',
    'circle',
    'square',
    'decimal',
    'decimal-leading-zero',
    'cjk-decimal',
    'cjk-earthly-branch',
    'cjk-heavenly-stem',
    'cjk-ideographic',
    'lower-alpha',
    'upper-alpha',
    'lower-armenian',
    'upper-armenian',
    'lower-greek',
    'upper-greek',
    'lower-hexadecimal',
    'upper-hexadecimal',
    'lower-latin',
    'upper-latin',
    'lower-norwegian',
    'upper-norwegian',
    'lower-roman',
    'upper-roman',
    'afar',
    'amharic',
    'amharic-abegede',
    'arabic-indic',
    'armenian',
    'bengali',
    'cambodian',
    'devanagari',
    'ethiopic-abegede',
    'ethiopic-abegede-am-et',
    'ethiopic-abegede-gez',
    'ethiopic-abegede-ti-er',
    'ethiopic-abegede-ti-et',
    'ethiopic-halehame',
    'ethiopic-halehame-aa-er',
    'ethiopic-halehame-aa-et',
    'ethiopic-halehame-am',
    'ethiopic-halehame-am-et',
    'ethiopic-halehame-gez',
    'ethiopic-halehame-om-et',
    'ethiopic-halehame-sid-et',
    'ethiopic-halehame-so-et',
    'ethiopic-halehame-ti-er',
    'ethiopic-halehame-ti-et',
    'ethiopic-halehame-tig',
    'ethiopic-numeric',
    'georgian',
    'gujarati',
    'gurmukhi',
    'hangul',
    'hangul-consonant',
    'hebrew',
    'hiragana',
    'hiragana-iroha',
    'japanese-formal',
    'japanese-informal',
    'kannada',
    'katakana',
    'katakana-iroha',
    'khmer',
    'korean-hangul-formal',
    'korean-hanja-formal',
    'korean-hanja-informal',
    'lao',
    'malayalam',
    'mongolian',
    'myanmar',
    'oriya',
    'oromo',
    'persian',
    'sidama',
    'somali',
    'simp-chinese-formal',
    'simp-chinese-informal',
    'tamil',
    'telugu',
    'thai',
    'tibetan',
    'tigre',
    'tigrinya-er',
    'tigrinya-er-abegede',
    'tigrinya-et',
    'tigrinya-et-abegede',
    'trad-chinese-formal',
    'trad-chinese-informal',
    'urdu',
    'disclosure-open',
    'disclosure-closed',
    'asterisks',
    'binary',
    'footnotes',
    'octal'
]);
const listStylePositionKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'inside',
    'outside'
]);
const listStyleImageKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, [
    'none'
]);
const listStyleShorthandKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(basicKeywords, listStyleTypeKeywords, listStylePositionKeywords, listStyleImageKeywords);
const camelCaseKeywords = new Set([
    'optimizeSpeed',
    'optimizeQuality',
    'optimizeLegibility',
    'geometricPrecision',
    'currentColor',
    'crispEdges',
    'visiblePainted',
    'visibleFill',
    'visibleStroke',
    'sRGB',
    'linearRGB'
]);
const keyframeSelectorKeywords = new Set([
    'from',
    'to'
]);
const namedTimelineRangeKeywords = new Set([
    'contain',
    'cover',
    'entry',
    'entry-crossing',
    'exit',
    'exit-crossing'
]);
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Mozilla_Extensions#color_keywords
 * @type {ReadonlySet<string>}
 */ const prefixedSystemColorKeywords = new Set([
    '-moz-buttondefault',
    '-moz-buttonhoverface',
    '-moz-buttonhovertext',
    '-moz-cellhighlight',
    '-moz-cellhighlighttext',
    '-moz-combobox',
    '-moz-comboboxtext',
    '-moz-dialog',
    '-moz-dialogtext',
    '-moz-dragtargetzone',
    '-moz-eventreerow',
    '-moz-field',
    '-moz-fieldtext',
    '-moz-html-cellhighlight',
    '-moz-html-cellhighlighttext',
    '-moz-mac-accentdarkestshadow',
    '-moz-mac-accentdarkshadow',
    '-moz-mac-accentface',
    '-moz-mac-accentlightesthighlight',
    '-moz-mac-accentlightshadow',
    '-moz-mac-accentregularhighlight',
    '-moz-mac-accentregularshadow',
    '-moz-mac-chrome-active',
    '-moz-mac-chrome-inactive',
    '-moz-mac-focusring',
    '-moz-mac-menuselect',
    '-moz-mac-menushadow',
    '-moz-mac-menutextselect',
    '-moz-menubarhovertext',
    '-moz-menubartext',
    '-moz-menuhover',
    '-moz-menuhovertext',
    '-moz-nativehyperlinktext',
    '-moz-oddtreerow',
    '-moz-win-accentcolor',
    '-moz-win-accentcolortext',
    '-moz-win-communicationstext',
    '-moz-win-mediatext',
    '-ms-hotlight'
]);
const deprecatedSystemColorKeywords = new Set([
    'activeborder',
    'activecaption',
    'appworkspace',
    'background',
    'buttonhighlight',
    'buttonshadow',
    'captiontext',
    'inactiveborder',
    'inactivecaption',
    'inactivecaptiontext',
    'infobackground',
    'infotext',
    'menu',
    'menutext',
    'scrollbar',
    'threeddarkshadow',
    'threedface',
    'threedhighlight',
    'threedlightshadow',
    'threedshadow',
    'window',
    'windowframe',
    'windowtext'
]);
const systemColorsKeywords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$uniteSets$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(prefixedSystemColorKeywords, deprecatedSystemColorKeywords, [
    // https://www.w3.org/TR/css-color-4/#css-system-colors
    'accentcolor',
    'accentcolortext',
    'activetext',
    'buttonborder',
    'buttonface',
    'buttontext',
    'canvas',
    'canvastext',
    'field',
    'fieldtext',
    'graytext',
    'highlight',
    'highlighttext',
    'linktext',
    'mark',
    'marktext',
    'selecteditem',
    'selecteditemtext',
    'visitedtext'
]);
const namedColorsKeywords = new Set([
    'aliceblue',
    'antiquewhite',
    'aqua',
    'aquamarine',
    'azure',
    'beige',
    'bisque',
    'black',
    'blanchedalmond',
    'blue',
    'blueviolet',
    'brown',
    'burlywood',
    'cadetblue',
    'chartreuse',
    'chocolate',
    'coral',
    'cornflowerblue',
    'cornsilk',
    'crimson',
    'cyan',
    'darkblue',
    'darkcyan',
    'darkgoldenrod',
    'darkgray',
    'darkgreen',
    'darkgrey',
    'darkkhaki',
    'darkmagenta',
    'darkolivegreen',
    'darkorange',
    'darkorchid',
    'darkred',
    'darksalmon',
    'darkseagreen',
    'darkslateblue',
    'darkslategray',
    'darkslategrey',
    'darkturquoise',
    'darkviolet',
    'deeppink',
    'deepskyblue',
    'dimgray',
    'dimgrey',
    'dodgerblue',
    'firebrick',
    'floralwhite',
    'forestgreen',
    'fuchsia',
    'gainsboro',
    'ghostwhite',
    'gold',
    'goldenrod',
    'gray',
    'green',
    'greenyellow',
    'grey',
    'honeydew',
    'hotpink',
    'indianred',
    'indigo',
    'ivory',
    'khaki',
    'lavender',
    'lavenderblush',
    'lawngreen',
    'lemonchiffon',
    'lightblue',
    'lightcoral',
    'lightcyan',
    'lightgoldenrodyellow',
    'lightgray',
    'lightgreen',
    'lightgrey',
    'lightpink',
    'lightsalmon',
    'lightseagreen',
    'lightskyblue',
    'lightslategray',
    'lightslategrey',
    'lightsteelblue',
    'lightyellow',
    'lime',
    'limegreen',
    'linen',
    'magenta',
    'maroon',
    'mediumaquamarine',
    'mediumblue',
    'mediumorchid',
    'mediumpurple',
    'mediumseagreen',
    'mediumslateblue',
    'mediumspringgreen',
    'mediumturquoise',
    'mediumvioletred',
    'midnightblue',
    'mintcream',
    'mistyrose',
    'moccasin',
    'navajowhite',
    'navy',
    'oldlace',
    'olive',
    'olivedrab',
    'orange',
    'orangered',
    'orchid',
    'palegoldenrod',
    'palegreen',
    'paleturquoise',
    'palevioletred',
    'papayawhip',
    'peachpuff',
    'peru',
    'pink',
    'plum',
    'powderblue',
    'purple',
    'rebeccapurple',
    'red',
    'rosybrown',
    'royalblue',
    'saddlebrown',
    'salmon',
    'sandybrown',
    'seagreen',
    'seashell',
    'sienna',
    'silver',
    'skyblue',
    'slateblue',
    'slategray',
    'slategrey',
    'snow',
    'springgreen',
    'steelblue',
    'tan',
    'teal',
    'thistle',
    'tomato',
    'turquoise',
    'violet',
    'wheat',
    'white',
    'whitesmoke',
    'yellow',
    'yellowgreen'
]);
}}),
"[project]/node_modules/stylelint/lib/utils/eachDeclarationBlock.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>eachDeclarationBlock)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/typeGuards.mjs [app-route] (ecmascript)");
;
/** @typedef {import('postcss').Root} Root */ /** @typedef {import('postcss').Root} Document */ /** @typedef {import('postcss').Node} PostcssNode */ /** @typedef {import('postcss').Container} PostcssContainerNode */ /** @typedef {import('postcss').Declaration} Declaration */ /** @typedef {(callbackFn: (decl: Declaration, index: number, decls: Declaration[]) => void) => void} EachDeclaration */ /**
 * @param {PostcssNode} node
 * @returns {node is PostcssContainerNode}
 */ function isContainerNode(node) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRule"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAtRule"])(node) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRoot"])(node);
}
function eachDeclarationBlock(root, callback) {
    /**
	 * @param {PostcssNode} statement
	 *
	 * @returns {void}
	 */ function each(statement) {
        if (!isContainerNode(statement)) return;
        if (statement.nodes && statement.nodes.length) {
            /** @type {Declaration[]} */ const decls = [];
            for (const node of statement.nodes){
                if (node.type === 'decl') {
                    decls.push(node);
                }
                each(node);
            }
            if (decls.length) {
                callback(decls.forEach.bind(decls));
            }
        }
    }
    each(root);
}
}}),
"[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Contains helpers for working with vendor prefixes.
 *
 * Copied from https://github.com/postcss/postcss/commit/777c55b5d2a10605313a4972888f4f32005f5ac2
 *
 * @namespace vendor
 */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    /**
	 * Returns the vendor prefix extracted from an input string.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} vendor prefix or empty string
	 *
	 * @example
	 * vendor.prefix('-moz-tab-size') //=> '-moz-'
	 * vendor.prefix('tab-size')      //=> ''
	 */ prefix (prop) {
        const match = prop.match(/^(-\w+-)/);
        if (match) {
            return match[0] || '';
        }
        return '';
    },
    /**
	 * Returns the input string stripped of its vendor prefix.
	 *
	 * @param {string} prop String with or without vendor prefix.
	 *
	 * @returns {string} String name without vendor prefixes.
	 *
	 * @example
	 * vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
	 */ unprefixed (prop) {
        return prop.replace(/^-\w+-/, '');
    }
};
}}),
"[project]/node_modules/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$postcss$2d$value$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/postcss-value-parser/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateTypes.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$arrayEqual$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/arrayEqual.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$keywords$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reference/keywords.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$eachDeclarationBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/eachDeclarationBlock.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/reference/properties.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/optionsMatches.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/report.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/ruleMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/validateOptions.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/stylelint/lib/utils/vendor.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
const ruleName = 'declaration-block-no-redundant-longhand-properties';
const messages = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$ruleMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(ruleName, {
    expected: (property)=>`Expected shorthand property "${property}"`
});
const meta = {
    url: 'https://stylelint.io/user-guide/rules/declaration-block-no-redundant-longhand-properties',
    fixable: true
};
/** @typedef {import('postcss').Declaration} Declaration */ /** @type {Map<string, (decls: Map<string, Declaration>) => (string | undefined)>} */ const customResolvers = new Map([
    [
        'font-synthesis',
        (decls)=>{
            const weight = decls.get('font-synthesis-weight')?.value.trim();
            const style = decls.get('font-synthesis-style')?.value.trim();
            const smallCaps = decls.get('font-synthesis-small-caps')?.value.trim();
            /** @type {(s: string | undefined) => boolean} */ const isValidFontSynthesisValue = (s)=>s === 'none' || s === 'auto';
            if (!isValidFontSynthesisValue(weight) || !isValidFontSynthesisValue(style) || !isValidFontSynthesisValue(smallCaps)) {
                return;
            }
            const autoShorthands = [];
            if (weight === 'auto') {
                autoShorthands.push('weight');
            }
            if (style === 'auto') {
                autoShorthands.push('style');
            }
            if (smallCaps === 'auto') {
                autoShorthands.push('small-caps');
            }
            if (autoShorthands.length === 0) return 'none';
            return autoShorthands.join(' ');
        }
    ],
    [
        'grid-column',
        (decls)=>{
            const start = decls.get('grid-column-start')?.value.trim();
            const end = decls.get('grid-column-end')?.value.trim();
            if (!start || !end) return;
            return `${start} / ${end}`;
        }
    ],
    [
        'grid-row',
        (decls)=>{
            const start = decls.get('grid-row-start')?.value.trim();
            const end = decls.get('grid-row-end')?.value.trim();
            if (!start || !end) return;
            return `${start} / ${end}`;
        }
    ],
    [
        'grid-template',
        (decls)=>{
            const areas = decls.get('grid-template-areas')?.value.trim();
            const columns = decls.get('grid-template-columns')?.value.trim();
            const rows = decls.get('grid-template-rows')?.value.trim();
            if (!(areas && columns && rows)) return;
            // repeat() is not allowed inside track listings for grid-template.
            // related issue: https://github.com/stylelint/stylelint/issues/7228
            // spec ref: https://drafts.csswg.org/css-grid/#explicit-grid-shorthand
            if (columns.includes('repeat(') || rows.includes('repeat(')) return;
            const splitAreas = [
                ...areas.matchAll(/"[^"]+"/g)
            ].map((x)=>x[0]);
            const splitRows = rows.split(' ');
            if (splitAreas.length === 0 || splitRows.length === 0) return;
            if (splitAreas.length !== splitRows.length) return;
            const zipped = splitAreas.map((area, i)=>`${area} ${splitRows[i]}`).join(' ');
            return `${zipped} / ${columns}`;
        }
    ],
    [
        'transition',
        (decls)=>{
            /** @type {(input: string | undefined) => string[]} */ const commaSeparated = (input = '')=>{
                let trimmedInput = input.trim();
                if (!trimmedInput) return [];
                if (trimmedInput.indexOf(',') === -1) return [
                    trimmedInput
                ];
                /** @type {import('postcss-value-parser').ParsedValue} */ let parsedValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$postcss$2d$value$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(trimmedInput);
                /** @type {Array<Array<import('postcss-value-parser').Node>>} */ let valueParts = [];
                {
                    /** @type {Array<import('postcss-value-parser').Node>} */ let currentListItem = [];
                    parsedValue.nodes.forEach((node)=>{
                        if (node.type === 'div' && node.value === ',') {
                            valueParts.push(currentListItem);
                            currentListItem = [];
                            return;
                        }
                        currentListItem.push(node);
                    });
                    valueParts.push(currentListItem);
                }
                return valueParts.map((s)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$postcss$2d$value$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].stringify(s).trim()).filter((s)=>s.length > 0);
            };
            const delays = commaSeparated(decls.get('transition-delay')?.value);
            const durations = commaSeparated(decls.get('transition-duration')?.value);
            const timingFunctions = commaSeparated(decls.get('transition-timing-function')?.value);
            const properties = commaSeparated(decls.get('transition-property')?.value);
            if (!(delays.length && durations.length && timingFunctions.length && properties.length)) {
                return;
            }
            // transition-property is the canonical list of the number of properties;
            // see spec: https://w3c.github.io/csswg-drafts/css-transitions/#transition-property-property
            // if there are more transition-properties than duration/delay/timings,
            // the other properties are computed cyclically -- ex with %
            // see spec example #3: https://w3c.github.io/csswg-drafts/css-transitions/#example-d94cbd75
            return properties.map((property, i)=>{
                return [
                    property,
                    durations[i % durations.length],
                    timingFunctions[i % timingFunctions.length],
                    delays[i % delays.length]
                ].filter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"]).join(' ');
            }).join(', ');
        }
    ]
]);
const haveConflicts = [
    'border-width',
    'border-style',
    'border-color',
    'border-top',
    'border-right',
    'border-bottom',
    'border-left',
    'grid-column',
    'grid-row'
];
/**
 * @param {string} prefixedShorthandProperty
 * @param {string[]} prefixedShorthandData
 * @param {Map<string, Declaration>} transformedDeclarationNodes
 * @returns {string | undefined}
 */ const resolveShorthandValue = (prefixedShorthandProperty, prefixedShorthandData, transformedDeclarationNodes)=>{
    const resolver = customResolvers.get(prefixedShorthandProperty);
    if (resolver === undefined) {
        // the "default" resolver: sort the longhand values in the order
        // of their properties
        const values = prefixedShorthandData.map((p)=>transformedDeclarationNodes.get(p)?.value.trim()).filter(Boolean);
        return values.length > 0 ? values.join(' ') : undefined;
    }
    return resolver(transformedDeclarationNodes);
};
/** @type {import('stylelint').CoreRules[ruleName]} */ const rule = (primary, secondaryOptions)=>{
    return (root, result)=>{
        const validOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateOptions$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(result, ruleName, {
            actual: primary
        }, {
            actual: secondaryOptions,
            possible: {
                ignoreShorthands: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"],
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRegExp"]
                ],
                ignoreLonghands: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$validateTypes$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isString"]
                ]
            },
            optional: true
        });
        if (!validOptions) {
            return;
        }
        /** @type {Map<string, import('stylelint').ShorthandProperties[]>} */ const longhandToShorthands = new Map();
        const ignoreLonghands = [
            secondaryOptions?.ignoreLonghands ?? []
        ].flat();
        for (const [shorthand, longhandProps] of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["longhandSubPropertiesOfShorthandProperties"].entries()){
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$optionsMatches$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(secondaryOptions, 'ignoreShorthands', shorthand)) {
                continue;
            }
            for (const longhand of longhandProps){
                if (ignoreLonghands.includes(longhand)) continue;
                const shorthands = longhandToShorthands.get(longhand) || [];
                shorthands.push(shorthand);
                longhandToShorthands.set(longhand, shorthands);
            }
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$eachDeclarationBlock$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(root, (eachDecl)=>{
            /** @type {Map<string, string[]>} */ const longhandDeclarations = new Map();
            /** @type {Map<string, Declaration[]>} */ const longhandDeclarationNodes = new Map();
            eachDecl((decl)=>{
                // basic keywords are not allowed in shorthand properties
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$keywords$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["basicKeywords"].has(decl.value)) {
                    return;
                }
                const prop = decl.prop.toLowerCase();
                const unprefixedProp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].unprefixed(prop);
                const prefix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$vendor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].prefix(prop);
                const shorthandProperties = longhandToShorthands.get(unprefixedProp);
                if (!shorthandProperties) {
                    return;
                }
                for (const shorthandProperty of shorthandProperties){
                    const prefixedShorthandProperty = prefix + shorthandProperty;
                    const longhandDeclaration = longhandDeclarations.get(prefixedShorthandProperty) || [];
                    const longhandDeclarationNode = longhandDeclarationNodes.get(prefixedShorthandProperty) || [];
                    longhandDeclaration.push(prop);
                    longhandDeclarations.set(prefixedShorthandProperty, longhandDeclaration);
                    longhandDeclarationNode.push(decl);
                    longhandDeclarationNodes.set(prefixedShorthandProperty, longhandDeclarationNode);
                    const shorthandProps = new Set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$reference$2f$properties$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["longhandSubPropertiesOfShorthandProperties"].get(shorthandProperty));
                    ignoreLonghands.forEach((value)=>shorthandProps.delete(value));
                    const prefixedShorthandData = Array.from(shorthandProps, (item)=>prefix + item);
                    const copiedPrefixedShorthandData = [
                        ...prefixedShorthandData
                    ];
                    // TODO use toSorted in the next major that supports it
                    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$arrayEqual$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(copiedPrefixedShorthandData.sort(), longhandDeclaration.sort())) {
                        continue;
                    }
                    const declNodes = longhandDeclarationNodes.get(prefixedShorthandProperty) || [];
                    const importantDeclNodesCount = declNodes.reduce((count, declNode)=>declNode.important ? count += 1 : count, 0);
                    if (importantDeclNodesCount && importantDeclNodesCount !== declNodes.length) {
                        continue;
                    }
                    const [firstDeclNode] = declNodes;
                    let resolvedShorthandValue = undefined;
                    if (firstDeclNode) {
                        const transformedDeclarationNodes = new Map(declNodes.map((d)=>[
                                d.prop.toLowerCase(),
                                d
                            ]));
                        resolvedShorthandValue = resolveShorthandValue(prefixedShorthandProperty, prefixedShorthandData, transformedDeclarationNodes);
                    }
                    const hasFix = firstDeclNode && resolvedShorthandValue;
                    const fix = hasFix ? ()=>{
                        const newShorthandDeclarationNode = firstDeclNode.clone({
                            prop: prefixedShorthandProperty,
                            value: resolvedShorthandValue
                        });
                        firstDeclNode.replaceWith(newShorthandDeclarationNode);
                        declNodes.forEach((node)=>node.remove());
                        if (haveConflicts.includes(shorthandProperty)) {
                            longhandDeclarations.forEach((longhands, shorthand)=>{
                                longhandDeclarations.set(shorthand, longhands.filter((longhand)=>!longhandDeclaration.includes(longhand)));
                            });
                        }
                    } : undefined;
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylelint$2f$lib$2f$utils$2f$report$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])({
                        ruleName,
                        result,
                        node: decl,
                        word: decl.prop,
                        message: messages.expected,
                        messageArgs: [
                            prefixedShorthandProperty
                        ],
                        fix: {
                            apply: fix,
                            node: decl.parent
                        }
                    });
                }
            });
        });
    };
};
rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;
const __TURBOPACK__default__export__ = rule;
}}),

};

//# sourceMappingURL=node_modules_8261c092._.js.map